
./Debug/Boids.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#include "drivers.h"

__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 f9ea 	bl	200003dc <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <squaredDistance>:
    void (* draw) (struct tBoid *);
    void (* updatePos) (struct tBoid *);
    void (* updateVel) (struct tBoid *);
} BOID, *pBOID;

float squaredDistance(pBOID one, pBOID two) {
20000010:	b580      	push	{r7, lr}
20000012:	b084      	sub	sp, #16
20000014:	af00      	add	r7, sp, #0
20000016:	6078      	str	r0, [r7, #4]
20000018:	6039      	str	r1, [r7, #0]
    float xD = two->x - one->x;
2000001a:	683b      	ldr	r3, [r7, #0]
2000001c:	681a      	ldr	r2, [r3, #0]
2000001e:	687b      	ldr	r3, [r7, #4]
20000020:	681b      	ldr	r3, [r3, #0]
20000022:	1c19      	adds	r1, r3, #0
20000024:	1c10      	adds	r0, r2, #0
20000026:	f001 fbd5 	bl	200017d4 <__aeabi_fsub>
2000002a:	1c03      	adds	r3, r0, #0
2000002c:	60fb      	str	r3, [r7, #12]
    float yD = two->y - one->y;
2000002e:	683b      	ldr	r3, [r7, #0]
20000030:	685a      	ldr	r2, [r3, #4]
20000032:	687b      	ldr	r3, [r7, #4]
20000034:	685b      	ldr	r3, [r3, #4]
20000036:	1c19      	adds	r1, r3, #0
20000038:	1c10      	adds	r0, r2, #0
2000003a:	f001 fbcb 	bl	200017d4 <__aeabi_fsub>
2000003e:	1c03      	adds	r3, r0, #0
20000040:	60bb      	str	r3, [r7, #8]
    return xD * xD + yD + yD;
20000042:	68f9      	ldr	r1, [r7, #12]
20000044:	68f8      	ldr	r0, [r7, #12]
20000046:	f001 fd17 	bl	20001a78 <__aeabi_fmul>
2000004a:	1c03      	adds	r3, r0, #0
2000004c:	68b9      	ldr	r1, [r7, #8]
2000004e:	1c18      	adds	r0, r3, #0
20000050:	f001 fbc2 	bl	200017d8 <__addsf3>
20000054:	1c03      	adds	r3, r0, #0
20000056:	68b9      	ldr	r1, [r7, #8]
20000058:	1c18      	adds	r0, r3, #0
2000005a:	f001 fbbd 	bl	200017d8 <__addsf3>
2000005e:	1c03      	adds	r3, r0, #0
}
20000060:	1c18      	adds	r0, r3, #0
20000062:	46bd      	mov	sp, r7
20000064:	b004      	add	sp, #16
20000066:	bd80      	pop	{r7, pc}

20000068 <draw>:


static BOID boids[BOID_COUNT];

void draw(pBOID self) {
20000068:	b590      	push	{r4, r7, lr}
2000006a:	b083      	sub	sp, #12
2000006c:	af00      	add	r7, sp, #0
2000006e:	6078      	str	r0, [r7, #4]
    //pixel((uint8_t) self->x, (uint8_t) self->y, 1);
    old_pixel((uint8_t) self->x, (uint8_t) self->y, 1);
20000070:	687b      	ldr	r3, [r7, #4]
20000072:	681b      	ldr	r3, [r3, #0]
20000074:	1c18      	adds	r0, r3, #0
20000076:	f001 ff05 	bl	20001e84 <__aeabi_f2uiz>
2000007a:	0003      	movs	r3, r0
2000007c:	b2db      	uxtb	r3, r3
2000007e:	001c      	movs	r4, r3
20000080:	687b      	ldr	r3, [r7, #4]
20000082:	685b      	ldr	r3, [r3, #4]
20000084:	1c18      	adds	r0, r3, #0
20000086:	f001 fefd 	bl	20001e84 <__aeabi_f2uiz>
2000008a:	0003      	movs	r3, r0
2000008c:	b2db      	uxtb	r3, r3
2000008e:	2201      	movs	r2, #1
20000090:	0019      	movs	r1, r3
20000092:	0020      	movs	r0, r4
20000094:	f000 fc46 	bl	20000924 <old_pixel>
}
20000098:	46c0      	nop			; (mov r8, r8)
2000009a:	46bd      	mov	sp, r7
2000009c:	b003      	add	sp, #12
2000009e:	bd90      	pop	{r4, r7, pc}

200000a0 <updatePos>:

void updatePos(pBOID self) {
200000a0:	b580      	push	{r7, lr}
200000a2:	b082      	sub	sp, #8
200000a4:	af00      	add	r7, sp, #0
200000a6:	6078      	str	r0, [r7, #4]
    self->x += self->xVel;
200000a8:	687b      	ldr	r3, [r7, #4]
200000aa:	681a      	ldr	r2, [r3, #0]
200000ac:	687b      	ldr	r3, [r7, #4]
200000ae:	689b      	ldr	r3, [r3, #8]
200000b0:	1c19      	adds	r1, r3, #0
200000b2:	1c10      	adds	r0, r2, #0
200000b4:	f001 fb90 	bl	200017d8 <__addsf3>
200000b8:	1c03      	adds	r3, r0, #0
200000ba:	1c1a      	adds	r2, r3, #0
200000bc:	687b      	ldr	r3, [r7, #4]
200000be:	601a      	str	r2, [r3, #0]
    self->y += self->yVel;
200000c0:	687b      	ldr	r3, [r7, #4]
200000c2:	685a      	ldr	r2, [r3, #4]
200000c4:	687b      	ldr	r3, [r7, #4]
200000c6:	68db      	ldr	r3, [r3, #12]
200000c8:	1c19      	adds	r1, r3, #0
200000ca:	1c10      	adds	r0, r2, #0
200000cc:	f001 fb84 	bl	200017d8 <__addsf3>
200000d0:	1c03      	adds	r3, r0, #0
200000d2:	1c1a      	adds	r2, r3, #0
200000d4:	687b      	ldr	r3, [r7, #4]
200000d6:	605a      	str	r2, [r3, #4]
}
200000d8:	46c0      	nop			; (mov r8, r8)
200000da:	46bd      	mov	sp, r7
200000dc:	b002      	add	sp, #8
200000de:	bd80      	pop	{r7, pc}

200000e0 <updateVel>:

void updateVel(pBOID self) {
200000e0:	b5b0      	push	{r4, r5, r7, lr}
200000e2:	b096      	sub	sp, #88	; 0x58
200000e4:	af00      	add	r7, sp, #0
200000e6:	60f8      	str	r0, [r7, #12]
    int nearbyCount = 0;
200000e8:	2300      	movs	r3, #0
200000ea:	657b      	str	r3, [r7, #84]	; 0x54
    float sumXPos = 0, sumYPos = 0;
200000ec:	2300      	movs	r3, #0
200000ee:	653b      	str	r3, [r7, #80]	; 0x50
200000f0:	2300      	movs	r3, #0
200000f2:	64fb      	str	r3, [r7, #76]	; 0x4c
    float sumXVel = 0, sumYVel = 0;
200000f4:	2300      	movs	r3, #0
200000f6:	64bb      	str	r3, [r7, #72]	; 0x48
200000f8:	2300      	movs	r3, #0
200000fa:	63bb      	str	r3, [r7, #56]	; 0x38
    float dXSeparation = 0, dYSeparation = 0;
200000fc:	2300      	movs	r3, #0
200000fe:	647b      	str	r3, [r7, #68]	; 0x44
20000100:	2300      	movs	r3, #0
20000102:	643b      	str	r3, [r7, #64]	; 0x40
    
    for (int i = 0; i < BOID_COUNT; i++) {
20000104:	2300      	movs	r3, #0
20000106:	63fb      	str	r3, [r7, #60]	; 0x3c
20000108:	e06c      	b.n	200001e4 <updateVel+0x104>
        pBOID other = &boids[i];
2000010a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
2000010c:	0013      	movs	r3, r2
2000010e:	00db      	lsls	r3, r3, #3
20000110:	1a9b      	subs	r3, r3, r2
20000112:	009b      	lsls	r3, r3, #2
20000114:	4a9a      	ldr	r2, [pc, #616]	; (20000380 <updateVel+0x2a0>)
20000116:	189b      	adds	r3, r3, r2
20000118:	617b      	str	r3, [r7, #20]
        float dSquared = squaredDistance(self, other);
2000011a:	697a      	ldr	r2, [r7, #20]
2000011c:	68fb      	ldr	r3, [r7, #12]
2000011e:	0011      	movs	r1, r2
20000120:	0018      	movs	r0, r3
20000122:	f7ff ff75 	bl	20000010 <squaredDistance>
20000126:	1c03      	adds	r3, r0, #0
20000128:	613b      	str	r3, [r7, #16]
        if (dSquared > VIEW_DISTANCE * VIEW_DISTANCE) {
2000012a:	2185      	movs	r1, #133	; 0x85
2000012c:	05c9      	lsls	r1, r1, #23
2000012e:	6938      	ldr	r0, [r7, #16]
20000130:	f001 fe9c 	bl	20001e6c <__aeabi_fcmpgt>
20000134:	1e03      	subs	r3, r0, #0
20000136:	d14f      	bne.n	200001d8 <updateVel+0xf8>
            continue;
        }
        if (self == other) {
20000138:	68fa      	ldr	r2, [r7, #12]
2000013a:	697b      	ldr	r3, [r7, #20]
2000013c:	429a      	cmp	r2, r3
2000013e:	d04d      	beq.n	200001dc <updateVel+0xfc>
            continue;
        }
        nearbyCount++;
20000140:	6d7b      	ldr	r3, [r7, #84]	; 0x54
20000142:	3301      	adds	r3, #1
20000144:	657b      	str	r3, [r7, #84]	; 0x54
        
        // Cohesion
        sumXPos += other->x;
20000146:	697b      	ldr	r3, [r7, #20]
20000148:	681b      	ldr	r3, [r3, #0]
2000014a:	1c19      	adds	r1, r3, #0
2000014c:	6d38      	ldr	r0, [r7, #80]	; 0x50
2000014e:	f001 fb43 	bl	200017d8 <__addsf3>
20000152:	1c03      	adds	r3, r0, #0
20000154:	653b      	str	r3, [r7, #80]	; 0x50
        sumYPos += other->y;
20000156:	697b      	ldr	r3, [r7, #20]
20000158:	685b      	ldr	r3, [r3, #4]
2000015a:	1c19      	adds	r1, r3, #0
2000015c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
2000015e:	f001 fb3b 	bl	200017d8 <__addsf3>
20000162:	1c03      	adds	r3, r0, #0
20000164:	64fb      	str	r3, [r7, #76]	; 0x4c
        
        // Alignment
        sumXVel += other->x;
20000166:	697b      	ldr	r3, [r7, #20]
20000168:	681b      	ldr	r3, [r3, #0]
2000016a:	1c19      	adds	r1, r3, #0
2000016c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
2000016e:	f001 fb33 	bl	200017d8 <__addsf3>
20000172:	1c03      	adds	r3, r0, #0
20000174:	64bb      	str	r3, [r7, #72]	; 0x48
        sumXVel += other->y;
20000176:	697b      	ldr	r3, [r7, #20]
20000178:	685b      	ldr	r3, [r3, #4]
2000017a:	1c19      	adds	r1, r3, #0
2000017c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
2000017e:	f001 fb2b 	bl	200017d8 <__addsf3>
20000182:	1c03      	adds	r3, r0, #0
20000184:	64bb      	str	r3, [r7, #72]	; 0x48
        
        // Separation
        dXSeparation += (self->x - other->x) / dSquared;
20000186:	68fb      	ldr	r3, [r7, #12]
20000188:	681a      	ldr	r2, [r3, #0]
2000018a:	697b      	ldr	r3, [r7, #20]
2000018c:	681b      	ldr	r3, [r3, #0]
2000018e:	1c19      	adds	r1, r3, #0
20000190:	1c10      	adds	r0, r2, #0
20000192:	f001 fb1f 	bl	200017d4 <__aeabi_fsub>
20000196:	1c03      	adds	r3, r0, #0
20000198:	6939      	ldr	r1, [r7, #16]
2000019a:	1c18      	adds	r0, r3, #0
2000019c:	f001 fd38 	bl	20001c10 <__aeabi_fdiv>
200001a0:	1c03      	adds	r3, r0, #0
200001a2:	1c19      	adds	r1, r3, #0
200001a4:	6c78      	ldr	r0, [r7, #68]	; 0x44
200001a6:	f001 fb17 	bl	200017d8 <__addsf3>
200001aa:	1c03      	adds	r3, r0, #0
200001ac:	647b      	str	r3, [r7, #68]	; 0x44
        dYSeparation += (self->y - other->y) / dSquared;
200001ae:	68fb      	ldr	r3, [r7, #12]
200001b0:	685a      	ldr	r2, [r3, #4]
200001b2:	697b      	ldr	r3, [r7, #20]
200001b4:	685b      	ldr	r3, [r3, #4]
200001b6:	1c19      	adds	r1, r3, #0
200001b8:	1c10      	adds	r0, r2, #0
200001ba:	f001 fb0b 	bl	200017d4 <__aeabi_fsub>
200001be:	1c03      	adds	r3, r0, #0
200001c0:	6939      	ldr	r1, [r7, #16]
200001c2:	1c18      	adds	r0, r3, #0
200001c4:	f001 fd24 	bl	20001c10 <__aeabi_fdiv>
200001c8:	1c03      	adds	r3, r0, #0
200001ca:	1c19      	adds	r1, r3, #0
200001cc:	6c38      	ldr	r0, [r7, #64]	; 0x40
200001ce:	f001 fb03 	bl	200017d8 <__addsf3>
200001d2:	1c03      	adds	r3, r0, #0
200001d4:	643b      	str	r3, [r7, #64]	; 0x40
200001d6:	e002      	b.n	200001de <updateVel+0xfe>
            continue;
200001d8:	46c0      	nop			; (mov r8, r8)
200001da:	e000      	b.n	200001de <updateVel+0xfe>
            continue;
200001dc:	46c0      	nop			; (mov r8, r8)
    for (int i = 0; i < BOID_COUNT; i++) {
200001de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
200001e0:	3301      	adds	r3, #1
200001e2:	63fb      	str	r3, [r7, #60]	; 0x3c
200001e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
200001e6:	2b01      	cmp	r3, #1
200001e8:	dd8f      	ble.n	2000010a <updateVel+0x2a>
    }
    
    // Cohesion
    float avgXPos = sumXPos / nearbyCount;
200001ea:	6d78      	ldr	r0, [r7, #84]	; 0x54
200001ec:	f001 fbd6 	bl	2000199c <__aeabi_i2f>
200001f0:	1c03      	adds	r3, r0, #0
200001f2:	1c19      	adds	r1, r3, #0
200001f4:	6d38      	ldr	r0, [r7, #80]	; 0x50
200001f6:	f001 fd0b 	bl	20001c10 <__aeabi_fdiv>
200001fa:	1c03      	adds	r3, r0, #0
200001fc:	637b      	str	r3, [r7, #52]	; 0x34
    float avgYPos = sumYPos / nearbyCount;
200001fe:	6d78      	ldr	r0, [r7, #84]	; 0x54
20000200:	f001 fbcc 	bl	2000199c <__aeabi_i2f>
20000204:	1c03      	adds	r3, r0, #0
20000206:	1c19      	adds	r1, r3, #0
20000208:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
2000020a:	f001 fd01 	bl	20001c10 <__aeabi_fdiv>
2000020e:	1c03      	adds	r3, r0, #0
20000210:	633b      	str	r3, [r7, #48]	; 0x30
    
    float dXCohesion = avgXPos - self->x;
20000212:	68fb      	ldr	r3, [r7, #12]
20000214:	681b      	ldr	r3, [r3, #0]
20000216:	1c19      	adds	r1, r3, #0
20000218:	6b78      	ldr	r0, [r7, #52]	; 0x34
2000021a:	f001 fadb 	bl	200017d4 <__aeabi_fsub>
2000021e:	1c03      	adds	r3, r0, #0
20000220:	62fb      	str	r3, [r7, #44]	; 0x2c
    float dYCohesion = avgYPos - self->y;
20000222:	68fb      	ldr	r3, [r7, #12]
20000224:	685b      	ldr	r3, [r3, #4]
20000226:	1c19      	adds	r1, r3, #0
20000228:	6b38      	ldr	r0, [r7, #48]	; 0x30
2000022a:	f001 fad3 	bl	200017d4 <__aeabi_fsub>
2000022e:	1c03      	adds	r3, r0, #0
20000230:	62bb      	str	r3, [r7, #40]	; 0x28
    
    // Alignment
    float avgXVel = sumXVel / nearbyCount;
20000232:	6d78      	ldr	r0, [r7, #84]	; 0x54
20000234:	f001 fbb2 	bl	2000199c <__aeabi_i2f>
20000238:	1c03      	adds	r3, r0, #0
2000023a:	1c19      	adds	r1, r3, #0
2000023c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
2000023e:	f001 fce7 	bl	20001c10 <__aeabi_fdiv>
20000242:	1c03      	adds	r3, r0, #0
20000244:	627b      	str	r3, [r7, #36]	; 0x24
    float avgYVel = sumYVel / nearbyCount;
20000246:	6d78      	ldr	r0, [r7, #84]	; 0x54
20000248:	f001 fba8 	bl	2000199c <__aeabi_i2f>
2000024c:	1c03      	adds	r3, r0, #0
2000024e:	1c19      	adds	r1, r3, #0
20000250:	6bb8      	ldr	r0, [r7, #56]	; 0x38
20000252:	f001 fcdd 	bl	20001c10 <__aeabi_fdiv>
20000256:	1c03      	adds	r3, r0, #0
20000258:	623b      	str	r3, [r7, #32]
    
    float dXAlignment = avgXVel - self->xVel;
2000025a:	68fb      	ldr	r3, [r7, #12]
2000025c:	689b      	ldr	r3, [r3, #8]
2000025e:	1c19      	adds	r1, r3, #0
20000260:	6a78      	ldr	r0, [r7, #36]	; 0x24
20000262:	f001 fab7 	bl	200017d4 <__aeabi_fsub>
20000266:	1c03      	adds	r3, r0, #0
20000268:	61fb      	str	r3, [r7, #28]
    float dYAlignment = avgYVel - self->yVel;
2000026a:	68fb      	ldr	r3, [r7, #12]
2000026c:	68db      	ldr	r3, [r3, #12]
2000026e:	1c19      	adds	r1, r3, #0
20000270:	6a38      	ldr	r0, [r7, #32]
20000272:	f001 faaf 	bl	200017d4 <__aeabi_fsub>
20000276:	1c03      	adds	r3, r0, #0
20000278:	61bb      	str	r3, [r7, #24]
    
    // Calculate new acceleration for the Boid
    self->xVel += dXSeparation * SEPARATION_BIAS + dXCohesion * COHESION_BIAS + dXAlignment * ALIGNMENT_BIAS;
2000027a:	68fb      	ldr	r3, [r7, #12]
2000027c:	689b      	ldr	r3, [r3, #8]
2000027e:	1c18      	adds	r0, r3, #0
20000280:	f001 f9f6 	bl	20001670 <__aeabi_f2d>
20000284:	0004      	movs	r4, r0
20000286:	000d      	movs	r5, r1
20000288:	6c78      	ldr	r0, [r7, #68]	; 0x44
2000028a:	f001 f9f1 	bl	20001670 <__aeabi_f2d>
2000028e:	4a3d      	ldr	r2, [pc, #244]	; (20000384 <updateVel+0x2a4>)
20000290:	4b3d      	ldr	r3, [pc, #244]	; (20000388 <updateVel+0x2a8>)
20000292:	f000 fe25 	bl	20000ee0 <__aeabi_dmul>
20000296:	0002      	movs	r2, r0
20000298:	000b      	movs	r3, r1
2000029a:	603a      	str	r2, [r7, #0]
2000029c:	607b      	str	r3, [r7, #4]
2000029e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
200002a0:	f001 f9e6 	bl	20001670 <__aeabi_f2d>
200002a4:	4a39      	ldr	r2, [pc, #228]	; (2000038c <updateVel+0x2ac>)
200002a6:	4b3a      	ldr	r3, [pc, #232]	; (20000390 <updateVel+0x2b0>)
200002a8:	f000 fe1a 	bl	20000ee0 <__aeabi_dmul>
200002ac:	0002      	movs	r2, r0
200002ae:	000b      	movs	r3, r1
200002b0:	6838      	ldr	r0, [r7, #0]
200002b2:	6879      	ldr	r1, [r7, #4]
200002b4:	f001 f82e 	bl	20001314 <__adddf3>
200002b8:	0002      	movs	r2, r0
200002ba:	000b      	movs	r3, r1
200002bc:	603a      	str	r2, [r7, #0]
200002be:	607b      	str	r3, [r7, #4]
200002c0:	69f8      	ldr	r0, [r7, #28]
200002c2:	f001 f9d5 	bl	20001670 <__aeabi_f2d>
200002c6:	4a31      	ldr	r2, [pc, #196]	; (2000038c <updateVel+0x2ac>)
200002c8:	4b31      	ldr	r3, [pc, #196]	; (20000390 <updateVel+0x2b0>)
200002ca:	f000 fe09 	bl	20000ee0 <__aeabi_dmul>
200002ce:	0002      	movs	r2, r0
200002d0:	000b      	movs	r3, r1
200002d2:	6838      	ldr	r0, [r7, #0]
200002d4:	6879      	ldr	r1, [r7, #4]
200002d6:	f001 f81d 	bl	20001314 <__adddf3>
200002da:	0002      	movs	r2, r0
200002dc:	000b      	movs	r3, r1
200002de:	0020      	movs	r0, r4
200002e0:	0029      	movs	r1, r5
200002e2:	f001 f817 	bl	20001314 <__adddf3>
200002e6:	0002      	movs	r2, r0
200002e8:	000b      	movs	r3, r1
200002ea:	0010      	movs	r0, r2
200002ec:	0019      	movs	r1, r3
200002ee:	f001 fa1d 	bl	2000172c <__aeabi_d2f>
200002f2:	1c02      	adds	r2, r0, #0
200002f4:	68fb      	ldr	r3, [r7, #12]
200002f6:	609a      	str	r2, [r3, #8]
    self->yVel += dYSeparation * SEPARATION_BIAS + dYCohesion * COHESION_BIAS + dYAlignment * ALIGNMENT_BIAS;
200002f8:	68fb      	ldr	r3, [r7, #12]
200002fa:	68db      	ldr	r3, [r3, #12]
200002fc:	1c18      	adds	r0, r3, #0
200002fe:	f001 f9b7 	bl	20001670 <__aeabi_f2d>
20000302:	0004      	movs	r4, r0
20000304:	000d      	movs	r5, r1
20000306:	6c38      	ldr	r0, [r7, #64]	; 0x40
20000308:	f001 f9b2 	bl	20001670 <__aeabi_f2d>
2000030c:	4a1d      	ldr	r2, [pc, #116]	; (20000384 <updateVel+0x2a4>)
2000030e:	4b1e      	ldr	r3, [pc, #120]	; (20000388 <updateVel+0x2a8>)
20000310:	f000 fde6 	bl	20000ee0 <__aeabi_dmul>
20000314:	0002      	movs	r2, r0
20000316:	000b      	movs	r3, r1
20000318:	603a      	str	r2, [r7, #0]
2000031a:	607b      	str	r3, [r7, #4]
2000031c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
2000031e:	f001 f9a7 	bl	20001670 <__aeabi_f2d>
20000322:	4a1a      	ldr	r2, [pc, #104]	; (2000038c <updateVel+0x2ac>)
20000324:	4b1a      	ldr	r3, [pc, #104]	; (20000390 <updateVel+0x2b0>)
20000326:	f000 fddb 	bl	20000ee0 <__aeabi_dmul>
2000032a:	0002      	movs	r2, r0
2000032c:	000b      	movs	r3, r1
2000032e:	6838      	ldr	r0, [r7, #0]
20000330:	6879      	ldr	r1, [r7, #4]
20000332:	f000 ffef 	bl	20001314 <__adddf3>
20000336:	0002      	movs	r2, r0
20000338:	000b      	movs	r3, r1
2000033a:	603a      	str	r2, [r7, #0]
2000033c:	607b      	str	r3, [r7, #4]
2000033e:	69b8      	ldr	r0, [r7, #24]
20000340:	f001 f996 	bl	20001670 <__aeabi_f2d>
20000344:	4a11      	ldr	r2, [pc, #68]	; (2000038c <updateVel+0x2ac>)
20000346:	4b12      	ldr	r3, [pc, #72]	; (20000390 <updateVel+0x2b0>)
20000348:	f000 fdca 	bl	20000ee0 <__aeabi_dmul>
2000034c:	0002      	movs	r2, r0
2000034e:	000b      	movs	r3, r1
20000350:	6838      	ldr	r0, [r7, #0]
20000352:	6879      	ldr	r1, [r7, #4]
20000354:	f000 ffde 	bl	20001314 <__adddf3>
20000358:	0002      	movs	r2, r0
2000035a:	000b      	movs	r3, r1
2000035c:	0020      	movs	r0, r4
2000035e:	0029      	movs	r1, r5
20000360:	f000 ffd8 	bl	20001314 <__adddf3>
20000364:	0002      	movs	r2, r0
20000366:	000b      	movs	r3, r1
20000368:	0010      	movs	r0, r2
2000036a:	0019      	movs	r1, r3
2000036c:	f001 f9de 	bl	2000172c <__aeabi_d2f>
20000370:	1c02      	adds	r2, r0, #0
20000372:	68fb      	ldr	r3, [r7, #12]
20000374:	60da      	str	r2, [r3, #12]
}
20000376:	46c0      	nop			; (mov r8, r8)
20000378:	46bd      	mov	sp, r7
2000037a:	b016      	add	sp, #88	; 0x58
2000037c:	bdb0      	pop	{r4, r5, r7, pc}
2000037e:	46c0      	nop			; (mov r8, r8)
20000380:	200022d8 	ldrdcs	r2, [r0], -r8
20000384:	e978d4fe 	ldmdb	r8!, {r1, r2, r3, r4, r5, r6, r7, sl, ip, lr, pc}^
20000388:	3fd03126 	svccc	0x00d03126
2000038c:	425aee63 	subsmi	lr, sl, #1584	; 0x630
20000390:	3f99e83e 	svccc	0x0099e83e

20000394 <createBoids>:

void createBoids() {
20000394:	b590      	push	{r4, r7, lr}
20000396:	b089      	sub	sp, #36	; 0x24
20000398:	af00      	add	r7, sp, #0
    for (int i = 0; i < BOID_COUNT; i++) {
2000039a:	2300      	movs	r3, #0
2000039c:	61fb      	str	r3, [r7, #28]
2000039e:	e010      	b.n	200003c2 <createBoids+0x2e>
        boids[i] = (BOID) { 8.0, 31.0, 0.0, 0.0, draw, updatePos, updateVel };
200003a0:	490c      	ldr	r1, [pc, #48]	; (200003d4 <createBoids+0x40>)
200003a2:	69fa      	ldr	r2, [r7, #28]
200003a4:	0013      	movs	r3, r2
200003a6:	00db      	lsls	r3, r3, #3
200003a8:	1a9b      	subs	r3, r3, r2
200003aa:	009b      	lsls	r3, r3, #2
200003ac:	4a0a      	ldr	r2, [pc, #40]	; (200003d8 <createBoids+0x44>)
200003ae:	18cb      	adds	r3, r1, r3
200003b0:	ca13      	ldmia	r2!, {r0, r1, r4}
200003b2:	c313      	stmia	r3!, {r0, r1, r4}
200003b4:	ca13      	ldmia	r2!, {r0, r1, r4}
200003b6:	c313      	stmia	r3!, {r0, r1, r4}
200003b8:	6812      	ldr	r2, [r2, #0]
200003ba:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < BOID_COUNT; i++) {
200003bc:	69fb      	ldr	r3, [r7, #28]
200003be:	3301      	adds	r3, #1
200003c0:	61fb      	str	r3, [r7, #28]
200003c2:	69fb      	ldr	r3, [r7, #28]
200003c4:	2b01      	cmp	r3, #1
200003c6:	ddeb      	ble.n	200003a0 <createBoids+0xc>
            draw,
            updatePos,
            updateVel
        };*/
    }
}
200003c8:	46c0      	nop			; (mov r8, r8)
200003ca:	46c0      	nop			; (mov r8, r8)
200003cc:	46bd      	mov	sp, r7
200003ce:	b009      	add	sp, #36	; 0x24
200003d0:	bd90      	pop	{r4, r7, pc}
200003d2:	46c0      	nop			; (mov r8, r8)
200003d4:	200022d8 	ldrdcs	r2, [r0], -r8
200003d8:	20002710 	andcs	r2, r0, r0, lsl r7

200003dc <main>:


void main(void) {
200003dc:	b580      	push	{r7, lr}
200003de:	b082      	sub	sp, #8
200003e0:	af00      	add	r7, sp, #0
	init();
200003e2:	f000 fc79 	bl	20000cd8 <init>
    
    old_pixel(5, 5, 1);
200003e6:	2201      	movs	r2, #1
200003e8:	2105      	movs	r1, #5
200003ea:	2005      	movs	r0, #5
200003ec:	f000 fa9a 	bl	20000924 <old_pixel>
	clear_buffer();
200003f0:	f000 fbb2 	bl	20000b58 <clear_buffer>
#ifndef SIMULATOR
	draw_buffer();
#endif

    createBoids();
200003f4:	f7ff ffce 	bl	20000394 <createBoids>
    
	
    while (1) {
        for (int i = 0; i < BOID_COUNT; i++) {
200003f8:	2300      	movs	r3, #0
200003fa:	607b      	str	r3, [r7, #4]
200003fc:	e002      	b.n	20000404 <main+0x28>
200003fe:	687b      	ldr	r3, [r7, #4]
20000400:	3301      	adds	r3, #1
20000402:	607b      	str	r3, [r7, #4]
20000404:	687b      	ldr	r3, [r7, #4]
20000406:	2b01      	cmp	r3, #1
20000408:	ddf9      	ble.n	200003fe <main+0x22>
            //boids[i].updateVel(&boids[i]);
        }
        for (int i = 0; i < BOID_COUNT; i++) {
2000040a:	2300      	movs	r3, #0
2000040c:	603b      	str	r3, [r7, #0]
2000040e:	e026      	b.n	2000045e <main+0x82>
            boids[i].updatePos(&boids[i]);
20000410:	4916      	ldr	r1, [pc, #88]	; (2000046c <main+0x90>)
20000412:	683a      	ldr	r2, [r7, #0]
20000414:	0013      	movs	r3, r2
20000416:	00db      	lsls	r3, r3, #3
20000418:	1a9b      	subs	r3, r3, r2
2000041a:	009b      	lsls	r3, r3, #2
2000041c:	18cb      	adds	r3, r1, r3
2000041e:	3314      	adds	r3, #20
20000420:	6819      	ldr	r1, [r3, #0]
20000422:	683a      	ldr	r2, [r7, #0]
20000424:	0013      	movs	r3, r2
20000426:	00db      	lsls	r3, r3, #3
20000428:	1a9b      	subs	r3, r3, r2
2000042a:	009b      	lsls	r3, r3, #2
2000042c:	4a0f      	ldr	r2, [pc, #60]	; (2000046c <main+0x90>)
2000042e:	189b      	adds	r3, r3, r2
20000430:	0018      	movs	r0, r3
20000432:	4788      	blx	r1
            boids[i].draw(&boids[i]);
20000434:	490d      	ldr	r1, [pc, #52]	; (2000046c <main+0x90>)
20000436:	683a      	ldr	r2, [r7, #0]
20000438:	0013      	movs	r3, r2
2000043a:	00db      	lsls	r3, r3, #3
2000043c:	1a9b      	subs	r3, r3, r2
2000043e:	009b      	lsls	r3, r3, #2
20000440:	18cb      	adds	r3, r1, r3
20000442:	3310      	adds	r3, #16
20000444:	6819      	ldr	r1, [r3, #0]
20000446:	683a      	ldr	r2, [r7, #0]
20000448:	0013      	movs	r3, r2
2000044a:	00db      	lsls	r3, r3, #3
2000044c:	1a9b      	subs	r3, r3, r2
2000044e:	009b      	lsls	r3, r3, #2
20000450:	4a06      	ldr	r2, [pc, #24]	; (2000046c <main+0x90>)
20000452:	189b      	adds	r3, r3, r2
20000454:	0018      	movs	r0, r3
20000456:	4788      	blx	r1
        for (int i = 0; i < BOID_COUNT; i++) {
20000458:	683b      	ldr	r3, [r7, #0]
2000045a:	3301      	adds	r3, #1
2000045c:	603b      	str	r3, [r7, #0]
2000045e:	683b      	ldr	r3, [r7, #0]
20000460:	2b01      	cmp	r3, #1
20000462:	ddd5      	ble.n	20000410 <main+0x34>
        }
        
        //draw_buffer();
		delay_milli(20);
20000464:	2014      	movs	r0, #20
20000466:	f000 f84d 	bl	20000504 <delay_milli>
    while (1) {
2000046a:	e7c5      	b.n	200003f8 <main+0x1c>
2000046c:	200022d8 	ldrdcs	r2, [r0], -r8

20000470 <delay_250ns>:
#define KB_OUT  (volatile unsigned char *) (0x40020C15)
#define KB_IN   (volatile unsigned char *) (0x40020C11)

#define SEG_OUT (unsigned char *) GPIO_D_ODR

static void delay_250ns(void) {
20000470:	b580      	push	{r7, lr}
20000472:	af00      	add	r7, sp, #0
    *STK_CTRL = 0;
20000474:	4b0c      	ldr	r3, [pc, #48]	; (200004a8 <delay_250ns+0x38>)
20000476:	2200      	movs	r2, #0
20000478:	601a      	str	r2, [r3, #0]
    *STK_LOAD = (168/4)-1;
2000047a:	4b0c      	ldr	r3, [pc, #48]	; (200004ac <delay_250ns+0x3c>)
2000047c:	2229      	movs	r2, #41	; 0x29
2000047e:	601a      	str	r2, [r3, #0]
    *STK_VAL = 0;
20000480:	4b0b      	ldr	r3, [pc, #44]	; (200004b0 <delay_250ns+0x40>)
20000482:	2200      	movs	r2, #0
20000484:	601a      	str	r2, [r3, #0]
    *STK_CTRL = 5;
20000486:	4b08      	ldr	r3, [pc, #32]	; (200004a8 <delay_250ns+0x38>)
20000488:	2205      	movs	r2, #5
2000048a:	601a      	str	r2, [r3, #0]
    while((*STK_CTRL & 0x10000) == 0);
2000048c:	46c0      	nop			; (mov r8, r8)
2000048e:	4b06      	ldr	r3, [pc, #24]	; (200004a8 <delay_250ns+0x38>)
20000490:	681a      	ldr	r2, [r3, #0]
20000492:	2380      	movs	r3, #128	; 0x80
20000494:	025b      	lsls	r3, r3, #9
20000496:	4013      	ands	r3, r2
20000498:	d0f9      	beq.n	2000048e <delay_250ns+0x1e>
    *STK_CTRL = 0;
2000049a:	4b03      	ldr	r3, [pc, #12]	; (200004a8 <delay_250ns+0x38>)
2000049c:	2200      	movs	r2, #0
2000049e:	601a      	str	r2, [r3, #0]
}
200004a0:	46c0      	nop			; (mov r8, r8)
200004a2:	46bd      	mov	sp, r7
200004a4:	bd80      	pop	{r7, pc}
200004a6:	46c0      	nop			; (mov r8, r8)
200004a8:	e000e010 	and	lr, r0, r0, lsl r0
200004ac:	e000e014 	and	lr, r0, r4, lsl r0
200004b0:	e000e018 	and	lr, r0, r8, lsl r0

200004b4 <delay_500ns>:

static void delay_500ns(void) {
200004b4:	b580      	push	{r7, lr}
200004b6:	af00      	add	r7, sp, #0
    delay_250ns();
200004b8:	f7ff ffda 	bl	20000470 <delay_250ns>
    delay_250ns();
200004bc:	f7ff ffd8 	bl	20000470 <delay_250ns>
}
200004c0:	46c0      	nop			; (mov r8, r8)
200004c2:	46bd      	mov	sp, r7
200004c4:	bd80      	pop	{r7, pc}

200004c6 <delay_mikro>:

void delay_mikro(unsigned int us) {
200004c6:	b580      	push	{r7, lr}
200004c8:	b082      	sub	sp, #8
200004ca:	af00      	add	r7, sp, #0
200004cc:	6078      	str	r0, [r7, #4]
    #ifdef SIMULATOR
        if (us > 500) {
200004ce:	687a      	ldr	r2, [r7, #4]
200004d0:	23fa      	movs	r3, #250	; 0xfa
200004d2:	005b      	lsls	r3, r3, #1
200004d4:	429a      	cmp	r2, r3
200004d6:	d90d      	bls.n	200004f4 <delay_mikro+0x2e>
            us = 1;
200004d8:	2301      	movs	r3, #1
200004da:	607b      	str	r3, [r7, #4]
        }
    #endif
    while (us > 0) {
200004dc:	e00a      	b.n	200004f4 <delay_mikro+0x2e>
        delay_250ns();
200004de:	f7ff ffc7 	bl	20000470 <delay_250ns>
        delay_250ns();
200004e2:	f7ff ffc5 	bl	20000470 <delay_250ns>
        delay_250ns();
200004e6:	f7ff ffc3 	bl	20000470 <delay_250ns>
        delay_250ns();
200004ea:	f7ff ffc1 	bl	20000470 <delay_250ns>
        us--;
200004ee:	687b      	ldr	r3, [r7, #4]
200004f0:	3b01      	subs	r3, #1
200004f2:	607b      	str	r3, [r7, #4]
    while (us > 0) {
200004f4:	687b      	ldr	r3, [r7, #4]
200004f6:	2b00      	cmp	r3, #0
200004f8:	d1f1      	bne.n	200004de <delay_mikro+0x18>
    }
}
200004fa:	46c0      	nop			; (mov r8, r8)
200004fc:	46c0      	nop			; (mov r8, r8)
200004fe:	46bd      	mov	sp, r7
20000500:	b002      	add	sp, #8
20000502:	bd80      	pop	{r7, pc}

20000504 <delay_milli>:

void delay_milli(unsigned int ms) {
20000504:	b580      	push	{r7, lr}
20000506:	b082      	sub	sp, #8
20000508:	af00      	add	r7, sp, #0
2000050a:	6078      	str	r0, [r7, #4]
    #ifdef SIMULATOR
        ms = 1;
2000050c:	2301      	movs	r3, #1
2000050e:	607b      	str	r3, [r7, #4]
    #endif
    while (ms > 0) {
20000510:	e007      	b.n	20000522 <delay_milli+0x1e>
        delay_mikro(1000);
20000512:	23fa      	movs	r3, #250	; 0xfa
20000514:	009b      	lsls	r3, r3, #2
20000516:	0018      	movs	r0, r3
20000518:	f7ff ffd5 	bl	200004c6 <delay_mikro>
        ms--;
2000051c:	687b      	ldr	r3, [r7, #4]
2000051e:	3b01      	subs	r3, #1
20000520:	607b      	str	r3, [r7, #4]
    while (ms > 0) {
20000522:	687b      	ldr	r3, [r7, #4]
20000524:	2b00      	cmp	r3, #0
20000526:	d1f4      	bne.n	20000512 <delay_milli+0xe>
    }
}
20000528:	46c0      	nop			; (mov r8, r8)
2000052a:	46c0      	nop			; (mov r8, r8)
2000052c:	46bd      	mov	sp, r7
2000052e:	b002      	add	sp, #8
20000530:	bd80      	pop	{r7, pc}

20000532 <graphic_ctrl_bit_set>:


typedef unsigned char uint8_t;

static void graphic_ctrl_bit_set(uint8_t x) {
20000532:	b580      	push	{r7, lr}
20000534:	b084      	sub	sp, #16
20000536:	af00      	add	r7, sp, #0
20000538:	0002      	movs	r2, r0
2000053a:	1dfb      	adds	r3, r7, #7
2000053c:	701a      	strb	r2, [r3, #0]
    uint8_t c;
    c = *portOdrLow;
2000053e:	4a10      	ldr	r2, [pc, #64]	; (20000580 <graphic_ctrl_bit_set+0x4e>)
20000540:	200f      	movs	r0, #15
20000542:	183b      	adds	r3, r7, r0
20000544:	7812      	ldrb	r2, [r2, #0]
20000546:	701a      	strb	r2, [r3, #0]
    c &= ~B_SELECT;
20000548:	183b      	adds	r3, r7, r0
2000054a:	183a      	adds	r2, r7, r0
2000054c:	7812      	ldrb	r2, [r2, #0]
2000054e:	2104      	movs	r1, #4
20000550:	438a      	bics	r2, r1
20000552:	701a      	strb	r2, [r3, #0]
    c |= (~B_SELECT & x);
20000554:	1dfb      	adds	r3, r7, #7
20000556:	781b      	ldrb	r3, [r3, #0]
20000558:	b25b      	sxtb	r3, r3
2000055a:	2204      	movs	r2, #4
2000055c:	4393      	bics	r3, r2
2000055e:	b25a      	sxtb	r2, r3
20000560:	183b      	adds	r3, r7, r0
20000562:	781b      	ldrb	r3, [r3, #0]
20000564:	b25b      	sxtb	r3, r3
20000566:	4313      	orrs	r3, r2
20000568:	b25a      	sxtb	r2, r3
2000056a:	183b      	adds	r3, r7, r0
2000056c:	701a      	strb	r2, [r3, #0]
    *portOdrLow = c;
2000056e:	4a04      	ldr	r2, [pc, #16]	; (20000580 <graphic_ctrl_bit_set+0x4e>)
20000570:	183b      	adds	r3, r7, r0
20000572:	781b      	ldrb	r3, [r3, #0]
20000574:	7013      	strb	r3, [r2, #0]
}
20000576:	46c0      	nop			; (mov r8, r8)
20000578:	46bd      	mov	sp, r7
2000057a:	b004      	add	sp, #16
2000057c:	bd80      	pop	{r7, pc}
2000057e:	46c0      	nop			; (mov r8, r8)
20000580:	40021014 	andmi	r1, r2, r4, lsl r0

20000584 <graphic_ctrl_bit_clear>:

static void graphic_ctrl_bit_clear(uint8_t x) {
20000584:	b580      	push	{r7, lr}
20000586:	b084      	sub	sp, #16
20000588:	af00      	add	r7, sp, #0
2000058a:	0002      	movs	r2, r0
2000058c:	1dfb      	adds	r3, r7, #7
2000058e:	701a      	strb	r2, [r3, #0]
    uint8_t c;
    c = *portOdrLow;
20000590:	4a0f      	ldr	r2, [pc, #60]	; (200005d0 <graphic_ctrl_bit_clear+0x4c>)
20000592:	200f      	movs	r0, #15
20000594:	183b      	adds	r3, r7, r0
20000596:	7812      	ldrb	r2, [r2, #0]
20000598:	701a      	strb	r2, [r3, #0]
    c &= ~B_SELECT;
2000059a:	183b      	adds	r3, r7, r0
2000059c:	183a      	adds	r2, r7, r0
2000059e:	7812      	ldrb	r2, [r2, #0]
200005a0:	2104      	movs	r1, #4
200005a2:	438a      	bics	r2, r1
200005a4:	701a      	strb	r2, [r3, #0]
    c &= ~x;
200005a6:	1dfb      	adds	r3, r7, #7
200005a8:	781b      	ldrb	r3, [r3, #0]
200005aa:	b25b      	sxtb	r3, r3
200005ac:	43db      	mvns	r3, r3
200005ae:	b25b      	sxtb	r3, r3
200005b0:	183a      	adds	r2, r7, r0
200005b2:	7812      	ldrb	r2, [r2, #0]
200005b4:	b252      	sxtb	r2, r2
200005b6:	4013      	ands	r3, r2
200005b8:	b25a      	sxtb	r2, r3
200005ba:	183b      	adds	r3, r7, r0
200005bc:	701a      	strb	r2, [r3, #0]
    *portOdrLow = c;
200005be:	4a04      	ldr	r2, [pc, #16]	; (200005d0 <graphic_ctrl_bit_clear+0x4c>)
200005c0:	183b      	adds	r3, r7, r0
200005c2:	781b      	ldrb	r3, [r3, #0]
200005c4:	7013      	strb	r3, [r2, #0]
}
200005c6:	46c0      	nop			; (mov r8, r8)
200005c8:	46bd      	mov	sp, r7
200005ca:	b004      	add	sp, #16
200005cc:	bd80      	pop	{r7, pc}
200005ce:	46c0      	nop			; (mov r8, r8)
200005d0:	40021014 	andmi	r1, r2, r4, lsl r0

200005d4 <select_controller>:

static void select_controller(uint8_t controller) {
200005d4:	b580      	push	{r7, lr}
200005d6:	b084      	sub	sp, #16
200005d8:	af00      	add	r7, sp, #0
200005da:	0002      	movs	r2, r0
200005dc:	1dfb      	adds	r3, r7, #7
200005de:	701a      	strb	r2, [r3, #0]
    uint8_t mask = (B_CS1 | B_CS2);
200005e0:	200f      	movs	r0, #15
200005e2:	183b      	adds	r3, r7, r0
200005e4:	2218      	movs	r2, #24
200005e6:	701a      	strb	r2, [r3, #0]
    controller &= mask;
200005e8:	1dfb      	adds	r3, r7, #7
200005ea:	1dfa      	adds	r2, r7, #7
200005ec:	1839      	adds	r1, r7, r0
200005ee:	7812      	ldrb	r2, [r2, #0]
200005f0:	7809      	ldrb	r1, [r1, #0]
200005f2:	400a      	ands	r2, r1
200005f4:	701a      	strb	r2, [r3, #0]
    
    uint8_t c;
    c = *portOdrLow;
200005f6:	4a10      	ldr	r2, [pc, #64]	; (20000638 <select_controller+0x64>)
200005f8:	210e      	movs	r1, #14
200005fa:	187b      	adds	r3, r7, r1
200005fc:	7812      	ldrb	r2, [r2, #0]
200005fe:	701a      	strb	r2, [r3, #0]
    c &= ~mask;     //Set CS1 and CS2 to 0
20000600:	183b      	adds	r3, r7, r0
20000602:	781b      	ldrb	r3, [r3, #0]
20000604:	b25b      	sxtb	r3, r3
20000606:	43db      	mvns	r3, r3
20000608:	b25b      	sxtb	r3, r3
2000060a:	187a      	adds	r2, r7, r1
2000060c:	7812      	ldrb	r2, [r2, #0]
2000060e:	b252      	sxtb	r2, r2
20000610:	4013      	ands	r3, r2
20000612:	b25a      	sxtb	r2, r3
20000614:	187b      	adds	r3, r7, r1
20000616:	701a      	strb	r2, [r3, #0]
    c |= controller;//OR in CS1 and CS2 from controller
20000618:	187b      	adds	r3, r7, r1
2000061a:	0008      	movs	r0, r1
2000061c:	1879      	adds	r1, r7, r1
2000061e:	1dfa      	adds	r2, r7, #7
20000620:	7809      	ldrb	r1, [r1, #0]
20000622:	7812      	ldrb	r2, [r2, #0]
20000624:	430a      	orrs	r2, r1
20000626:	701a      	strb	r2, [r3, #0]
    *portOdrLow = c;
20000628:	4a03      	ldr	r2, [pc, #12]	; (20000638 <select_controller+0x64>)
2000062a:	183b      	adds	r3, r7, r0
2000062c:	781b      	ldrb	r3, [r3, #0]
2000062e:	7013      	strb	r3, [r2, #0]
}
20000630:	46c0      	nop			; (mov r8, r8)
20000632:	46bd      	mov	sp, r7
20000634:	b004      	add	sp, #16
20000636:	bd80      	pop	{r7, pc}
20000638:	40021014 	andmi	r1, r2, r4, lsl r0

2000063c <graphic_wait_ready>:

static void graphic_wait_ready(void) {
2000063c:	b580      	push	{r7, lr}
2000063e:	b082      	sub	sp, #8
20000640:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_clear(B_E);
20000642:	2040      	movs	r0, #64	; 0x40
20000644:	f7ff ff9e 	bl	20000584 <graphic_ctrl_bit_clear>
    *portModer = 0x00005555;
20000648:	4b14      	ldr	r3, [pc, #80]	; (2000069c <graphic_wait_ready+0x60>)
2000064a:	4a15      	ldr	r2, [pc, #84]	; (200006a0 <graphic_wait_ready+0x64>)
2000064c:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_RS);
2000064e:	2001      	movs	r0, #1
20000650:	f7ff ff98 	bl	20000584 <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_set(B_RW);
20000654:	2002      	movs	r0, #2
20000656:	f7ff ff6c 	bl	20000532 <graphic_ctrl_bit_set>
    delay_500ns();
2000065a:	f7ff ff2b 	bl	200004b4 <delay_500ns>
    
    while(1) {
        graphic_ctrl_bit_set(B_E);
2000065e:	2040      	movs	r0, #64	; 0x40
20000660:	f7ff ff67 	bl	20000532 <graphic_ctrl_bit_set>
        delay_500ns();
20000664:	f7ff ff26 	bl	200004b4 <delay_500ns>
        graphic_ctrl_bit_clear(B_E);
20000668:	2040      	movs	r0, #64	; 0x40
2000066a:	f7ff ff8b 	bl	20000584 <graphic_ctrl_bit_clear>
        delay_500ns();
2000066e:	f7ff ff21 	bl	200004b4 <delay_500ns>
        uint8_t busy = *portIdrHigh;
20000672:	4a0c      	ldr	r2, [pc, #48]	; (200006a4 <graphic_wait_ready+0x68>)
20000674:	1dfb      	adds	r3, r7, #7
20000676:	7812      	ldrb	r2, [r2, #0]
20000678:	701a      	strb	r2, [r3, #0]
        busy &= LCD_BUSY;
2000067a:	1dfb      	adds	r3, r7, #7
2000067c:	1dfa      	adds	r2, r7, #7
2000067e:	7812      	ldrb	r2, [r2, #0]
20000680:	217f      	movs	r1, #127	; 0x7f
20000682:	438a      	bics	r2, r1
20000684:	701a      	strb	r2, [r3, #0]
        if (~busy) {
            break;
20000686:	46c0      	nop			; (mov r8, r8)
        }
    }
    graphic_ctrl_bit_set(B_E);
20000688:	2040      	movs	r0, #64	; 0x40
2000068a:	f7ff ff52 	bl	20000532 <graphic_ctrl_bit_set>
    *portModer = 0x55555555;
2000068e:	4b03      	ldr	r3, [pc, #12]	; (2000069c <graphic_wait_ready+0x60>)
20000690:	4a05      	ldr	r2, [pc, #20]	; (200006a8 <graphic_wait_ready+0x6c>)
20000692:	601a      	str	r2, [r3, #0]
}
20000694:	46c0      	nop			; (mov r8, r8)
20000696:	46bd      	mov	sp, r7
20000698:	b002      	add	sp, #8
2000069a:	bd80      	pop	{r7, pc}
2000069c:	40021000 	andmi	r1, r2, r0
200006a0:	00005555 	andeq	r5, r0, r5, asr r5
200006a4:	40021011 	andmi	r1, r2, r1, lsl r0
200006a8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200006ac <graphic_read>:

static uint8_t graphic_read(uint8_t controller) {
200006ac:	b580      	push	{r7, lr}
200006ae:	b084      	sub	sp, #16
200006b0:	af00      	add	r7, sp, #0
200006b2:	0002      	movs	r2, r0
200006b4:	1dfb      	adds	r3, r7, #7
200006b6:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
200006b8:	2040      	movs	r0, #64	; 0x40
200006ba:	f7ff ff63 	bl	20000584 <graphic_ctrl_bit_clear>
    *portModer = 0x00005555;
200006be:	4b1b      	ldr	r3, [pc, #108]	; (2000072c <graphic_read+0x80>)
200006c0:	4a1b      	ldr	r2, [pc, #108]	; (20000730 <graphic_read+0x84>)
200006c2:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_set(B_RS);
200006c4:	2001      	movs	r0, #1
200006c6:	f7ff ff34 	bl	20000532 <graphic_ctrl_bit_set>
    graphic_ctrl_bit_set(B_RW);
200006ca:	2002      	movs	r0, #2
200006cc:	f7ff ff31 	bl	20000532 <graphic_ctrl_bit_set>
    select_controller(controller);
200006d0:	1dfb      	adds	r3, r7, #7
200006d2:	781b      	ldrb	r3, [r3, #0]
200006d4:	0018      	movs	r0, r3
200006d6:	f7ff ff7d 	bl	200005d4 <select_controller>
    delay_500ns();
200006da:	f7ff feeb 	bl	200004b4 <delay_500ns>
    graphic_ctrl_bit_set(B_E);
200006de:	2040      	movs	r0, #64	; 0x40
200006e0:	f7ff ff27 	bl	20000532 <graphic_ctrl_bit_set>
    delay_500ns();
200006e4:	f7ff fee6 	bl	200004b4 <delay_500ns>
    uint8_t rv = *portIdrHigh;
200006e8:	4a12      	ldr	r2, [pc, #72]	; (20000734 <graphic_read+0x88>)
200006ea:	230f      	movs	r3, #15
200006ec:	18fb      	adds	r3, r7, r3
200006ee:	7812      	ldrb	r2, [r2, #0]
200006f0:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
200006f2:	2040      	movs	r0, #64	; 0x40
200006f4:	f7ff ff46 	bl	20000584 <graphic_ctrl_bit_clear>
    *portModer = 0x55555555;
200006f8:	4b0c      	ldr	r3, [pc, #48]	; (2000072c <graphic_read+0x80>)
200006fa:	4a0f      	ldr	r2, [pc, #60]	; (20000738 <graphic_read+0x8c>)
200006fc:	601a      	str	r2, [r3, #0]
    if (controller == B_CS1 || controller == B_CS2) {
200006fe:	1dfb      	adds	r3, r7, #7
20000700:	781b      	ldrb	r3, [r3, #0]
20000702:	2b08      	cmp	r3, #8
20000704:	d003      	beq.n	2000070e <graphic_read+0x62>
20000706:	1dfb      	adds	r3, r7, #7
20000708:	781b      	ldrb	r3, [r3, #0]
2000070a:	2b10      	cmp	r3, #16
2000070c:	d106      	bne.n	2000071c <graphic_read+0x70>
        select_controller(controller);
2000070e:	1dfb      	adds	r3, r7, #7
20000710:	781b      	ldrb	r3, [r3, #0]
20000712:	0018      	movs	r0, r3
20000714:	f7ff ff5e 	bl	200005d4 <select_controller>
        graphic_wait_ready();
20000718:	f7ff ff90 	bl	2000063c <graphic_wait_ready>
    }
    return rv;
2000071c:	230f      	movs	r3, #15
2000071e:	18fb      	adds	r3, r7, r3
20000720:	781b      	ldrb	r3, [r3, #0]
}
20000722:	0018      	movs	r0, r3
20000724:	46bd      	mov	sp, r7
20000726:	b004      	add	sp, #16
20000728:	bd80      	pop	{r7, pc}
2000072a:	46c0      	nop			; (mov r8, r8)
2000072c:	40021000 	andmi	r1, r2, r0
20000730:	00005555 	andeq	r5, r0, r5, asr r5
20000734:	40021011 	andmi	r1, r2, r1, lsl r0
20000738:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000073c <graphic_write>:

static void graphic_write(uint8_t value, uint8_t controller) {
2000073c:	b580      	push	{r7, lr}
2000073e:	b082      	sub	sp, #8
20000740:	af00      	add	r7, sp, #0
20000742:	0002      	movs	r2, r0
20000744:	1dfb      	adds	r3, r7, #7
20000746:	701a      	strb	r2, [r3, #0]
20000748:	1dbb      	adds	r3, r7, #6
2000074a:	1c0a      	adds	r2, r1, #0
2000074c:	701a      	strb	r2, [r3, #0]
    *portOdrHigh = value;
2000074e:	4a17      	ldr	r2, [pc, #92]	; (200007ac <graphic_write+0x70>)
20000750:	1dfb      	adds	r3, r7, #7
20000752:	781b      	ldrb	r3, [r3, #0]
20000754:	7013      	strb	r3, [r2, #0]
    select_controller(controller);
20000756:	1dbb      	adds	r3, r7, #6
20000758:	781b      	ldrb	r3, [r3, #0]
2000075a:	0018      	movs	r0, r3
2000075c:	f7ff ff3a 	bl	200005d4 <select_controller>
    delay_500ns();
20000760:	f7ff fea8 	bl	200004b4 <delay_500ns>
    graphic_ctrl_bit_set(B_E);
20000764:	2040      	movs	r0, #64	; 0x40
20000766:	f7ff fee4 	bl	20000532 <graphic_ctrl_bit_set>
    delay_500ns();
2000076a:	f7ff fea3 	bl	200004b4 <delay_500ns>
    graphic_ctrl_bit_clear(B_E);
2000076e:	2040      	movs	r0, #64	; 0x40
20000770:	f7ff ff08 	bl	20000584 <graphic_ctrl_bit_clear>
    
    if (controller == B_CS1 || controller == B_CS2) {
20000774:	1dbb      	adds	r3, r7, #6
20000776:	781b      	ldrb	r3, [r3, #0]
20000778:	2b08      	cmp	r3, #8
2000077a:	d003      	beq.n	20000784 <graphic_write+0x48>
2000077c:	1dbb      	adds	r3, r7, #6
2000077e:	781b      	ldrb	r3, [r3, #0]
20000780:	2b10      	cmp	r3, #16
20000782:	d106      	bne.n	20000792 <graphic_write+0x56>
        select_controller(controller);
20000784:	1dbb      	adds	r3, r7, #6
20000786:	781b      	ldrb	r3, [r3, #0]
20000788:	0018      	movs	r0, r3
2000078a:	f7ff ff23 	bl	200005d4 <select_controller>
        graphic_wait_ready();
2000078e:	f7ff ff55 	bl	2000063c <graphic_wait_ready>
    }
    
    *portOdrHigh = 0;
20000792:	4b06      	ldr	r3, [pc, #24]	; (200007ac <graphic_write+0x70>)
20000794:	2200      	movs	r2, #0
20000796:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_set(B_E);
20000798:	2040      	movs	r0, #64	; 0x40
2000079a:	f7ff feca 	bl	20000532 <graphic_ctrl_bit_set>
    select_controller(0);
2000079e:	2000      	movs	r0, #0
200007a0:	f7ff ff18 	bl	200005d4 <select_controller>
}
200007a4:	46c0      	nop			; (mov r8, r8)
200007a6:	46bd      	mov	sp, r7
200007a8:	b002      	add	sp, #8
200007aa:	bd80      	pop	{r7, pc}
200007ac:	40021015 	andmi	r1, r2, r5, lsl r0

200007b0 <graphic_write_command>:

static void graphic_write_command(uint8_t command, uint8_t controller) {
200007b0:	b580      	push	{r7, lr}
200007b2:	b082      	sub	sp, #8
200007b4:	af00      	add	r7, sp, #0
200007b6:	0002      	movs	r2, r0
200007b8:	1dfb      	adds	r3, r7, #7
200007ba:	701a      	strb	r2, [r3, #0]
200007bc:	1dbb      	adds	r3, r7, #6
200007be:	1c0a      	adds	r2, r1, #0
200007c0:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
200007c2:	2040      	movs	r0, #64	; 0x40
200007c4:	f7ff fede 	bl	20000584 <graphic_ctrl_bit_clear>
    select_controller(controller);
200007c8:	1dbb      	adds	r3, r7, #6
200007ca:	781b      	ldrb	r3, [r3, #0]
200007cc:	0018      	movs	r0, r3
200007ce:	f7ff ff01 	bl	200005d4 <select_controller>
    graphic_ctrl_bit_clear(B_RS);
200007d2:	2001      	movs	r0, #1
200007d4:	f7ff fed6 	bl	20000584 <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_clear(B_RW);
200007d8:	2002      	movs	r0, #2
200007da:	f7ff fed3 	bl	20000584 <graphic_ctrl_bit_clear>
    graphic_write(command, controller);
200007de:	1dbb      	adds	r3, r7, #6
200007e0:	781a      	ldrb	r2, [r3, #0]
200007e2:	1dfb      	adds	r3, r7, #7
200007e4:	781b      	ldrb	r3, [r3, #0]
200007e6:	0011      	movs	r1, r2
200007e8:	0018      	movs	r0, r3
200007ea:	f7ff ffa7 	bl	2000073c <graphic_write>
}
200007ee:	46c0      	nop			; (mov r8, r8)
200007f0:	46bd      	mov	sp, r7
200007f2:	b002      	add	sp, #8
200007f4:	bd80      	pop	{r7, pc}

200007f6 <graphic_write_data>:

static void graphic_write_data(uint8_t data, uint8_t controller) {
200007f6:	b580      	push	{r7, lr}
200007f8:	b082      	sub	sp, #8
200007fa:	af00      	add	r7, sp, #0
200007fc:	0002      	movs	r2, r0
200007fe:	1dfb      	adds	r3, r7, #7
20000800:	701a      	strb	r2, [r3, #0]
20000802:	1dbb      	adds	r3, r7, #6
20000804:	1c0a      	adds	r2, r1, #0
20000806:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20000808:	2040      	movs	r0, #64	; 0x40
2000080a:	f7ff febb 	bl	20000584 <graphic_ctrl_bit_clear>
    select_controller(controller);
2000080e:	1dbb      	adds	r3, r7, #6
20000810:	781b      	ldrb	r3, [r3, #0]
20000812:	0018      	movs	r0, r3
20000814:	f7ff fede 	bl	200005d4 <select_controller>
    graphic_ctrl_bit_set(B_RS);
20000818:	2001      	movs	r0, #1
2000081a:	f7ff fe8a 	bl	20000532 <graphic_ctrl_bit_set>
    graphic_ctrl_bit_clear(B_RW);
2000081e:	2002      	movs	r0, #2
20000820:	f7ff feb0 	bl	20000584 <graphic_ctrl_bit_clear>
    graphic_write(data, controller);
20000824:	1dbb      	adds	r3, r7, #6
20000826:	781a      	ldrb	r2, [r3, #0]
20000828:	1dfb      	adds	r3, r7, #7
2000082a:	781b      	ldrb	r3, [r3, #0]
2000082c:	0011      	movs	r1, r2
2000082e:	0018      	movs	r0, r3
20000830:	f7ff ff84 	bl	2000073c <graphic_write>
}
20000834:	46c0      	nop			; (mov r8, r8)
20000836:	46bd      	mov	sp, r7
20000838:	b002      	add	sp, #8
2000083a:	bd80      	pop	{r7, pc}

2000083c <graphic_read_data>:

static uint8_t graphic_read_data(uint8_t controller) {
2000083c:	b580      	push	{r7, lr}
2000083e:	b082      	sub	sp, #8
20000840:	af00      	add	r7, sp, #0
20000842:	0002      	movs	r2, r0
20000844:	1dfb      	adds	r3, r7, #7
20000846:	701a      	strb	r2, [r3, #0]
    graphic_read(controller);
20000848:	1dfb      	adds	r3, r7, #7
2000084a:	781b      	ldrb	r3, [r3, #0]
2000084c:	0018      	movs	r0, r3
2000084e:	f7ff ff2d 	bl	200006ac <graphic_read>
    return graphic_read(controller);
20000852:	1dfb      	adds	r3, r7, #7
20000854:	781b      	ldrb	r3, [r3, #0]
20000856:	0018      	movs	r0, r3
20000858:	f7ff ff28 	bl	200006ac <graphic_read>
2000085c:	0003      	movs	r3, r0
}
2000085e:	0018      	movs	r0, r3
20000860:	46bd      	mov	sp, r7
20000862:	b002      	add	sp, #8
20000864:	bd80      	pop	{r7, pc}

20000866 <graphic_initialize>:

static void graphic_initialize() {
20000866:	b580      	push	{r7, lr}
20000868:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_set(B_E);
2000086a:	2040      	movs	r0, #64	; 0x40
2000086c:	f7ff fe61 	bl	20000532 <graphic_ctrl_bit_set>
    delay_mikro(10);
20000870:	200a      	movs	r0, #10
20000872:	f7ff fe28 	bl	200004c6 <delay_mikro>
    graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
20000876:	2078      	movs	r0, #120	; 0x78
20000878:	f7ff fe84 	bl	20000584 <graphic_ctrl_bit_clear>
    delay_milli(30);
2000087c:	201e      	movs	r0, #30
2000087e:	f7ff fe41 	bl	20000504 <delay_milli>
    graphic_ctrl_bit_set(B_RST);
20000882:	2020      	movs	r0, #32
20000884:	f7ff fe55 	bl	20000532 <graphic_ctrl_bit_set>
    
    graphic_write_command(LCD_OFF,          B_CS1 | B_CS2);
20000888:	2118      	movs	r1, #24
2000088a:	203e      	movs	r0, #62	; 0x3e
2000088c:	f7ff ff90 	bl	200007b0 <graphic_write_command>
    graphic_write_command(LCD_ON,           B_CS1 | B_CS2);
20000890:	2118      	movs	r1, #24
20000892:	203f      	movs	r0, #63	; 0x3f
20000894:	f7ff ff8c 	bl	200007b0 <graphic_write_command>
    graphic_write_command(LCD_DISP_START,   B_CS1 | B_CS2);
20000898:	2118      	movs	r1, #24
2000089a:	20c0      	movs	r0, #192	; 0xc0
2000089c:	f7ff ff88 	bl	200007b0 <graphic_write_command>
    graphic_write_command(LCD_SET_ADD,      B_CS1 | B_CS2);
200008a0:	2118      	movs	r1, #24
200008a2:	2040      	movs	r0, #64	; 0x40
200008a4:	f7ff ff84 	bl	200007b0 <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE,     B_CS1 | B_CS2);
200008a8:	2118      	movs	r1, #24
200008aa:	20b8      	movs	r0, #184	; 0xb8
200008ac:	f7ff ff80 	bl	200007b0 <graphic_write_command>
    
    select_controller(0);
200008b0:	2000      	movs	r0, #0
200008b2:	f7ff fe8f 	bl	200005d4 <select_controller>
}
200008b6:	46c0      	nop			; (mov r8, r8)
200008b8:	46bd      	mov	sp, r7
200008ba:	bd80      	pop	{r7, pc}

200008bc <graphic_clear_screen>:

static void graphic_clear_screen() {
200008bc:	b580      	push	{r7, lr}
200008be:	b082      	sub	sp, #8
200008c0:	af00      	add	r7, sp, #0
    for (uint8_t page = 0; page < 8; page++) {
200008c2:	1dfb      	adds	r3, r7, #7
200008c4:	2200      	movs	r2, #0
200008c6:	701a      	strb	r2, [r3, #0]
200008c8:	e023      	b.n	20000912 <graphic_clear_screen+0x56>
        graphic_write_command(LCD_SET_PAGE | page,  B_CS1 | B_CS2);
200008ca:	1dfb      	adds	r3, r7, #7
200008cc:	781b      	ldrb	r3, [r3, #0]
200008ce:	2248      	movs	r2, #72	; 0x48
200008d0:	4252      	negs	r2, r2
200008d2:	4313      	orrs	r3, r2
200008d4:	b2db      	uxtb	r3, r3
200008d6:	2118      	movs	r1, #24
200008d8:	0018      	movs	r0, r3
200008da:	f7ff ff69 	bl	200007b0 <graphic_write_command>
        graphic_write_command(LCD_SET_ADD | 0,      B_CS1 | B_CS2);
200008de:	2118      	movs	r1, #24
200008e0:	2040      	movs	r0, #64	; 0x40
200008e2:	f7ff ff65 	bl	200007b0 <graphic_write_command>
        for (uint8_t add = 0; add < 64; add++) {
200008e6:	1dbb      	adds	r3, r7, #6
200008e8:	2200      	movs	r2, #0
200008ea:	701a      	strb	r2, [r3, #0]
200008ec:	e008      	b.n	20000900 <graphic_clear_screen+0x44>
            graphic_write_data(0, B_CS1 | B_CS2);
200008ee:	2118      	movs	r1, #24
200008f0:	2000      	movs	r0, #0
200008f2:	f7ff ff80 	bl	200007f6 <graphic_write_data>
        for (uint8_t add = 0; add < 64; add++) {
200008f6:	1dbb      	adds	r3, r7, #6
200008f8:	781a      	ldrb	r2, [r3, #0]
200008fa:	1dbb      	adds	r3, r7, #6
200008fc:	3201      	adds	r2, #1
200008fe:	701a      	strb	r2, [r3, #0]
20000900:	1dbb      	adds	r3, r7, #6
20000902:	781b      	ldrb	r3, [r3, #0]
20000904:	2b3f      	cmp	r3, #63	; 0x3f
20000906:	d9f2      	bls.n	200008ee <graphic_clear_screen+0x32>
    for (uint8_t page = 0; page < 8; page++) {
20000908:	1dfb      	adds	r3, r7, #7
2000090a:	781a      	ldrb	r2, [r3, #0]
2000090c:	1dfb      	adds	r3, r7, #7
2000090e:	3201      	adds	r2, #1
20000910:	701a      	strb	r2, [r3, #0]
20000912:	1dfb      	adds	r3, r7, #7
20000914:	781b      	ldrb	r3, [r3, #0]
20000916:	2b07      	cmp	r3, #7
20000918:	d9d7      	bls.n	200008ca <graphic_clear_screen+0xe>
        }
    }
}
2000091a:	46c0      	nop			; (mov r8, r8)
2000091c:	46c0      	nop			; (mov r8, r8)
2000091e:	46bd      	mov	sp, r7
20000920:	b002      	add	sp, #8
20000922:	bd80      	pop	{r7, pc}

20000924 <old_pixel>:



static uint8_t buffer[8][128];

void old_pixel(uint8_t x, uint8_t y, uint8_t set) {
20000924:	b5f0      	push	{r4, r5, r6, r7, lr}
20000926:	b085      	sub	sp, #20
20000928:	af00      	add	r7, sp, #0
2000092a:	0004      	movs	r4, r0
2000092c:	0008      	movs	r0, r1
2000092e:	0011      	movs	r1, r2
20000930:	1dfb      	adds	r3, r7, #7
20000932:	1c22      	adds	r2, r4, #0
20000934:	701a      	strb	r2, [r3, #0]
20000936:	1dbb      	adds	r3, r7, #6
20000938:	1c02      	adds	r2, r0, #0
2000093a:	701a      	strb	r2, [r3, #0]
2000093c:	1d7b      	adds	r3, r7, #5
2000093e:	1c0a      	adds	r2, r1, #0
20000940:	701a      	strb	r2, [r3, #0]
    x++;
20000942:	1dfb      	adds	r3, r7, #7
20000944:	781a      	ldrb	r2, [r3, #0]
20000946:	1dfb      	adds	r3, r7, #7
20000948:	3201      	adds	r2, #1
2000094a:	701a      	strb	r2, [r3, #0]
    y++;
2000094c:	1dbb      	adds	r3, r7, #6
2000094e:	781a      	ldrb	r2, [r3, #0]
20000950:	1dbb      	adds	r3, r7, #6
20000952:	3201      	adds	r2, #1
20000954:	701a      	strb	r2, [r3, #0]
	if (x > 128 || y > 64) {
20000956:	1dfb      	adds	r3, r7, #7
20000958:	781b      	ldrb	r3, [r3, #0]
2000095a:	2b80      	cmp	r3, #128	; 0x80
2000095c:	d900      	bls.n	20000960 <old_pixel+0x3c>
2000095e:	e093      	b.n	20000a88 <old_pixel+0x164>
20000960:	1dbb      	adds	r3, r7, #6
20000962:	781b      	ldrb	r3, [r3, #0]
20000964:	2b40      	cmp	r3, #64	; 0x40
20000966:	d900      	bls.n	2000096a <old_pixel+0x46>
20000968:	e08e      	b.n	20000a88 <old_pixel+0x164>
		return;
	}
	
	uint8_t mask, realX, controller;
	uint8_t	index = (y - 1) / 8;
2000096a:	1dbb      	adds	r3, r7, #6
2000096c:	781b      	ldrb	r3, [r3, #0]
2000096e:	3b01      	subs	r3, #1
20000970:	2b00      	cmp	r3, #0
20000972:	da00      	bge.n	20000976 <old_pixel+0x52>
20000974:	3307      	adds	r3, #7
20000976:	10db      	asrs	r3, r3, #3
20000978:	001a      	movs	r2, r3
2000097a:	230c      	movs	r3, #12
2000097c:	18fb      	adds	r3, r7, r3
2000097e:	701a      	strb	r2, [r3, #0]
	
	mask = 1 << ((y - 1) % 8);
20000980:	1dbb      	adds	r3, r7, #6
20000982:	781b      	ldrb	r3, [r3, #0]
20000984:	3b01      	subs	r3, #1
20000986:	4a42      	ldr	r2, [pc, #264]	; (20000a90 <old_pixel+0x16c>)
20000988:	4013      	ands	r3, r2
2000098a:	d504      	bpl.n	20000996 <old_pixel+0x72>
2000098c:	3b01      	subs	r3, #1
2000098e:	2208      	movs	r2, #8
20000990:	4252      	negs	r2, r2
20000992:	4313      	orrs	r3, r2
20000994:	3301      	adds	r3, #1
20000996:	001a      	movs	r2, r3
20000998:	2301      	movs	r3, #1
2000099a:	4093      	lsls	r3, r2
2000099c:	001a      	movs	r2, r3
2000099e:	210f      	movs	r1, #15
200009a0:	187b      	adds	r3, r7, r1
200009a2:	701a      	strb	r2, [r3, #0]
	if (set == 0) {
200009a4:	1d7b      	adds	r3, r7, #5
200009a6:	781b      	ldrb	r3, [r3, #0]
200009a8:	2b00      	cmp	r3, #0
200009aa:	d104      	bne.n	200009b6 <old_pixel+0x92>
		mask = ~mask;
200009ac:	187b      	adds	r3, r7, r1
200009ae:	187a      	adds	r2, r7, r1
200009b0:	7812      	ldrb	r2, [r2, #0]
200009b2:	43d2      	mvns	r2, r2
200009b4:	701a      	strb	r2, [r3, #0]
	}
	
	if (x > 64) {
200009b6:	1dfb      	adds	r3, r7, #7
200009b8:	781b      	ldrb	r3, [r3, #0]
200009ba:	2b40      	cmp	r3, #64	; 0x40
200009bc:	d90a      	bls.n	200009d4 <old_pixel+0xb0>
		controller = B_CS2;
200009be:	230d      	movs	r3, #13
200009c0:	18fb      	adds	r3, r7, r3
200009c2:	2210      	movs	r2, #16
200009c4:	701a      	strb	r2, [r3, #0]
		realX = x - 65;
200009c6:	230e      	movs	r3, #14
200009c8:	18fb      	adds	r3, r7, r3
200009ca:	1dfa      	adds	r2, r7, #7
200009cc:	7812      	ldrb	r2, [r2, #0]
200009ce:	3a41      	subs	r2, #65	; 0x41
200009d0:	701a      	strb	r2, [r3, #0]
200009d2:	e009      	b.n	200009e8 <old_pixel+0xc4>
	} else {
		controller = B_CS1;
200009d4:	230d      	movs	r3, #13
200009d6:	18fb      	adds	r3, r7, r3
200009d8:	2208      	movs	r2, #8
200009da:	701a      	strb	r2, [r3, #0]
		realX = x - 1;
200009dc:	230e      	movs	r3, #14
200009de:	18fb      	adds	r3, r7, r3
200009e0:	1dfa      	adds	r2, r7, #7
200009e2:	7812      	ldrb	r2, [r2, #0]
200009e4:	3a01      	subs	r2, #1
200009e6:	701a      	strb	r2, [r3, #0]
	}
	
	graphic_write_command(LCD_SET_ADD | realX, controller);
200009e8:	260e      	movs	r6, #14
200009ea:	19bb      	adds	r3, r7, r6
200009ec:	781b      	ldrb	r3, [r3, #0]
200009ee:	2240      	movs	r2, #64	; 0x40
200009f0:	4313      	orrs	r3, r2
200009f2:	b2da      	uxtb	r2, r3
200009f4:	250d      	movs	r5, #13
200009f6:	197b      	adds	r3, r7, r5
200009f8:	781b      	ldrb	r3, [r3, #0]
200009fa:	0019      	movs	r1, r3
200009fc:	0010      	movs	r0, r2
200009fe:	f7ff fed7 	bl	200007b0 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller);
20000a02:	230c      	movs	r3, #12
20000a04:	18fb      	adds	r3, r7, r3
20000a06:	781b      	ldrb	r3, [r3, #0]
20000a08:	2248      	movs	r2, #72	; 0x48
20000a0a:	4252      	negs	r2, r2
20000a0c:	4313      	orrs	r3, r2
20000a0e:	b2da      	uxtb	r2, r3
20000a10:	197b      	adds	r3, r7, r5
20000a12:	781b      	ldrb	r3, [r3, #0]
20000a14:	0019      	movs	r1, r3
20000a16:	0010      	movs	r0, r2
20000a18:	f7ff feca 	bl	200007b0 <graphic_write_command>
	
	uint8_t c = graphic_read_data(controller);
20000a1c:	230b      	movs	r3, #11
20000a1e:	18fc      	adds	r4, r7, r3
20000a20:	197b      	adds	r3, r7, r5
20000a22:	781b      	ldrb	r3, [r3, #0]
20000a24:	0018      	movs	r0, r3
20000a26:	f7ff ff09 	bl	2000083c <graphic_read_data>
20000a2a:	0003      	movs	r3, r0
20000a2c:	7023      	strb	r3, [r4, #0]
	graphic_write_command(LCD_SET_ADD | realX, controller);
20000a2e:	19bb      	adds	r3, r7, r6
20000a30:	781b      	ldrb	r3, [r3, #0]
20000a32:	2240      	movs	r2, #64	; 0x40
20000a34:	4313      	orrs	r3, r2
20000a36:	b2da      	uxtb	r2, r3
20000a38:	197b      	adds	r3, r7, r5
20000a3a:	781b      	ldrb	r3, [r3, #0]
20000a3c:	0019      	movs	r1, r3
20000a3e:	0010      	movs	r0, r2
20000a40:	f7ff feb6 	bl	200007b0 <graphic_write_command>
	
	if (set) {
20000a44:	1d7b      	adds	r3, r7, #5
20000a46:	781b      	ldrb	r3, [r3, #0]
20000a48:	2b00      	cmp	r3, #0
20000a4a:	d009      	beq.n	20000a60 <old_pixel+0x13c>
		mask = mask | c;
20000a4c:	210f      	movs	r1, #15
20000a4e:	187b      	adds	r3, r7, r1
20000a50:	1879      	adds	r1, r7, r1
20000a52:	220b      	movs	r2, #11
20000a54:	18ba      	adds	r2, r7, r2
20000a56:	7809      	ldrb	r1, [r1, #0]
20000a58:	7812      	ldrb	r2, [r2, #0]
20000a5a:	430a      	orrs	r2, r1
20000a5c:	701a      	strb	r2, [r3, #0]
20000a5e:	e008      	b.n	20000a72 <old_pixel+0x14e>
	} else {
		mask = mask & c;
20000a60:	220f      	movs	r2, #15
20000a62:	18bb      	adds	r3, r7, r2
20000a64:	18ba      	adds	r2, r7, r2
20000a66:	210b      	movs	r1, #11
20000a68:	1879      	adds	r1, r7, r1
20000a6a:	7812      	ldrb	r2, [r2, #0]
20000a6c:	7809      	ldrb	r1, [r1, #0]
20000a6e:	400a      	ands	r2, r1
20000a70:	701a      	strb	r2, [r3, #0]
	}
	
	graphic_write_data(mask, controller);
20000a72:	230d      	movs	r3, #13
20000a74:	18fb      	adds	r3, r7, r3
20000a76:	781a      	ldrb	r2, [r3, #0]
20000a78:	230f      	movs	r3, #15
20000a7a:	18fb      	adds	r3, r7, r3
20000a7c:	781b      	ldrb	r3, [r3, #0]
20000a7e:	0011      	movs	r1, r2
20000a80:	0018      	movs	r0, r3
20000a82:	f7ff feb8 	bl	200007f6 <graphic_write_data>
20000a86:	e000      	b.n	20000a8a <old_pixel+0x166>
		return;
20000a88:	46c0      	nop			; (mov r8, r8)
}
20000a8a:	46bd      	mov	sp, r7
20000a8c:	b005      	add	sp, #20
20000a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
20000a90:	80000007 	andhi	r0, r0, r7

20000a94 <pixel>:

void pixel(uint8_t x, uint8_t y, uint8_t set) {
20000a94:	b5b0      	push	{r4, r5, r7, lr}
20000a96:	b084      	sub	sp, #16
20000a98:	af00      	add	r7, sp, #0
20000a9a:	0004      	movs	r4, r0
20000a9c:	0008      	movs	r0, r1
20000a9e:	0011      	movs	r1, r2
20000aa0:	1dfb      	adds	r3, r7, #7
20000aa2:	1c22      	adds	r2, r4, #0
20000aa4:	701a      	strb	r2, [r3, #0]
20000aa6:	1dbb      	adds	r3, r7, #6
20000aa8:	1c02      	adds	r2, r0, #0
20000aaa:	701a      	strb	r2, [r3, #0]
20000aac:	1d7b      	adds	r3, r7, #5
20000aae:	1c0a      	adds	r2, r1, #0
20000ab0:	701a      	strb	r2, [r3, #0]
	if (x>127 || y>63) return;
20000ab2:	1dfb      	adds	r3, r7, #7
20000ab4:	781b      	ldrb	r3, [r3, #0]
20000ab6:	b25b      	sxtb	r3, r3
20000ab8:	2b00      	cmp	r3, #0
20000aba:	db46      	blt.n	20000b4a <pixel+0xb6>
20000abc:	1dbb      	adds	r3, r7, #6
20000abe:	781b      	ldrb	r3, [r3, #0]
20000ac0:	2b3f      	cmp	r3, #63	; 0x3f
20000ac2:	d842      	bhi.n	20000b4a <pixel+0xb6>
	
    uint8_t mask = 1 << (y % 8);
20000ac4:	1dbb      	adds	r3, r7, #6
20000ac6:	781b      	ldrb	r3, [r3, #0]
20000ac8:	2207      	movs	r2, #7
20000aca:	4013      	ands	r3, r2
20000acc:	2201      	movs	r2, #1
20000ace:	409a      	lsls	r2, r3
20000ad0:	250f      	movs	r5, #15
20000ad2:	197b      	adds	r3, r7, r5
20000ad4:	701a      	strb	r2, [r3, #0]
	
	if (set) {
20000ad6:	1d7b      	adds	r3, r7, #5
20000ad8:	781b      	ldrb	r3, [r3, #0]
20000ada:	2b00      	cmp	r3, #0
20000adc:	d017      	beq.n	20000b0e <pixel+0x7a>
		buffer[y/8][x] |= mask;
20000ade:	1dbb      	adds	r3, r7, #6
20000ae0:	781b      	ldrb	r3, [r3, #0]
20000ae2:	08db      	lsrs	r3, r3, #3
20000ae4:	b2d8      	uxtb	r0, r3
20000ae6:	0002      	movs	r2, r0
20000ae8:	1dfb      	adds	r3, r7, #7
20000aea:	781b      	ldrb	r3, [r3, #0]
20000aec:	4919      	ldr	r1, [pc, #100]	; (20000b54 <pixel+0xc0>)
20000aee:	01d2      	lsls	r2, r2, #7
20000af0:	188a      	adds	r2, r1, r2
20000af2:	5cd1      	ldrb	r1, [r2, r3]
20000af4:	0004      	movs	r4, r0
20000af6:	1dfb      	adds	r3, r7, #7
20000af8:	781b      	ldrb	r3, [r3, #0]
20000afa:	197a      	adds	r2, r7, r5
20000afc:	7812      	ldrb	r2, [r2, #0]
20000afe:	430a      	orrs	r2, r1
20000b00:	b2d0      	uxtb	r0, r2
20000b02:	4914      	ldr	r1, [pc, #80]	; (20000b54 <pixel+0xc0>)
20000b04:	01e2      	lsls	r2, r4, #7
20000b06:	188a      	adds	r2, r1, r2
20000b08:	1c01      	adds	r1, r0, #0
20000b0a:	54d1      	strb	r1, [r2, r3]
20000b0c:	e01e      	b.n	20000b4c <pixel+0xb8>
	} else {
		buffer[y/8][x] &= ~mask;
20000b0e:	1dbb      	adds	r3, r7, #6
20000b10:	781b      	ldrb	r3, [r3, #0]
20000b12:	08db      	lsrs	r3, r3, #3
20000b14:	b2d8      	uxtb	r0, r3
20000b16:	0002      	movs	r2, r0
20000b18:	1dfb      	adds	r3, r7, #7
20000b1a:	781b      	ldrb	r3, [r3, #0]
20000b1c:	490d      	ldr	r1, [pc, #52]	; (20000b54 <pixel+0xc0>)
20000b1e:	01d2      	lsls	r2, r2, #7
20000b20:	188a      	adds	r2, r1, r2
20000b22:	5cd3      	ldrb	r3, [r2, r3]
20000b24:	b25b      	sxtb	r3, r3
20000b26:	220f      	movs	r2, #15
20000b28:	18ba      	adds	r2, r7, r2
20000b2a:	7812      	ldrb	r2, [r2, #0]
20000b2c:	b252      	sxtb	r2, r2
20000b2e:	43d2      	mvns	r2, r2
20000b30:	b252      	sxtb	r2, r2
20000b32:	4013      	ands	r3, r2
20000b34:	b259      	sxtb	r1, r3
20000b36:	0002      	movs	r2, r0
20000b38:	1dfb      	adds	r3, r7, #7
20000b3a:	781b      	ldrb	r3, [r3, #0]
20000b3c:	b2c8      	uxtb	r0, r1
20000b3e:	4905      	ldr	r1, [pc, #20]	; (20000b54 <pixel+0xc0>)
20000b40:	01d2      	lsls	r2, r2, #7
20000b42:	188a      	adds	r2, r1, r2
20000b44:	1c01      	adds	r1, r0, #0
20000b46:	54d1      	strb	r1, [r2, r3]
20000b48:	e000      	b.n	20000b4c <pixel+0xb8>
	if (x>127 || y>63) return;
20000b4a:	46c0      	nop			; (mov r8, r8)
	}
}
20000b4c:	46bd      	mov	sp, r7
20000b4e:	b004      	add	sp, #16
20000b50:	bdb0      	pop	{r4, r5, r7, pc}
20000b52:	46c0      	nop			; (mov r8, r8)
20000b54:	20002310 	andcs	r2, r0, r0, lsl r3

20000b58 <clear_buffer>:

void clear_buffer() {
20000b58:	b580      	push	{r7, lr}
20000b5a:	b082      	sub	sp, #8
20000b5c:	af00      	add	r7, sp, #0
	for (uint8_t y = 0; y<8; y++) {
20000b5e:	1dfb      	adds	r3, r7, #7
20000b60:	2200      	movs	r2, #0
20000b62:	701a      	strb	r2, [r3, #0]
20000b64:	e01b      	b.n	20000b9e <clear_buffer+0x46>
		for (uint8_t x = 0; x<128; x++) {
20000b66:	1dbb      	adds	r3, r7, #6
20000b68:	2200      	movs	r2, #0
20000b6a:	701a      	strb	r2, [r3, #0]
20000b6c:	e00d      	b.n	20000b8a <clear_buffer+0x32>
			buffer[y][x] = 0;
20000b6e:	1dfb      	adds	r3, r7, #7
20000b70:	781a      	ldrb	r2, [r3, #0]
20000b72:	1dbb      	adds	r3, r7, #6
20000b74:	781b      	ldrb	r3, [r3, #0]
20000b76:	490e      	ldr	r1, [pc, #56]	; (20000bb0 <clear_buffer+0x58>)
20000b78:	01d2      	lsls	r2, r2, #7
20000b7a:	188a      	adds	r2, r1, r2
20000b7c:	2100      	movs	r1, #0
20000b7e:	54d1      	strb	r1, [r2, r3]
		for (uint8_t x = 0; x<128; x++) {
20000b80:	1dbb      	adds	r3, r7, #6
20000b82:	781a      	ldrb	r2, [r3, #0]
20000b84:	1dbb      	adds	r3, r7, #6
20000b86:	3201      	adds	r2, #1
20000b88:	701a      	strb	r2, [r3, #0]
20000b8a:	1dbb      	adds	r3, r7, #6
20000b8c:	781b      	ldrb	r3, [r3, #0]
20000b8e:	b25b      	sxtb	r3, r3
20000b90:	2b00      	cmp	r3, #0
20000b92:	daec      	bge.n	20000b6e <clear_buffer+0x16>
	for (uint8_t y = 0; y<8; y++) {
20000b94:	1dfb      	adds	r3, r7, #7
20000b96:	781a      	ldrb	r2, [r3, #0]
20000b98:	1dfb      	adds	r3, r7, #7
20000b9a:	3201      	adds	r2, #1
20000b9c:	701a      	strb	r2, [r3, #0]
20000b9e:	1dfb      	adds	r3, r7, #7
20000ba0:	781b      	ldrb	r3, [r3, #0]
20000ba2:	2b07      	cmp	r3, #7
20000ba4:	d9df      	bls.n	20000b66 <clear_buffer+0xe>
		}
	}
}
20000ba6:	46c0      	nop			; (mov r8, r8)
20000ba8:	46c0      	nop			; (mov r8, r8)
20000baa:	46bd      	mov	sp, r7
20000bac:	b002      	add	sp, #8
20000bae:	bd80      	pop	{r7, pc}
20000bb0:	20002310 	andcs	r2, r0, r0, lsl r3

20000bb4 <draw_buffer>:

void draw_buffer() {
20000bb4:	b580      	push	{r7, lr}
20000bb6:	b082      	sub	sp, #8
20000bb8:	af00      	add	r7, sp, #0
	for (uint8_t y = 0; y<8; y++) {
20000bba:	1dfb      	adds	r3, r7, #7
20000bbc:	2200      	movs	r2, #0
20000bbe:	701a      	strb	r2, [r3, #0]
20000bc0:	e038      	b.n	20000c34 <draw_buffer+0x80>
		for (uint8_t x = 0; x<64; x++) {
20000bc2:	1dbb      	adds	r3, r7, #6
20000bc4:	2200      	movs	r2, #0
20000bc6:	701a      	strb	r2, [r3, #0]
20000bc8:	e02b      	b.n	20000c22 <draw_buffer+0x6e>
			graphic_write_command(LCD_SET_ADD | x, B_CS1);
20000bca:	1dbb      	adds	r3, r7, #6
20000bcc:	781b      	ldrb	r3, [r3, #0]
20000bce:	2240      	movs	r2, #64	; 0x40
20000bd0:	4313      	orrs	r3, r2
20000bd2:	b2db      	uxtb	r3, r3
20000bd4:	2108      	movs	r1, #8
20000bd6:	0018      	movs	r0, r3
20000bd8:	f7ff fdea 	bl	200007b0 <graphic_write_command>
			graphic_write_command(LCD_SET_PAGE | y, B_CS1);
20000bdc:	1dfb      	adds	r3, r7, #7
20000bde:	781b      	ldrb	r3, [r3, #0]
20000be0:	2248      	movs	r2, #72	; 0x48
20000be2:	4252      	negs	r2, r2
20000be4:	4313      	orrs	r3, r2
20000be6:	b2db      	uxtb	r3, r3
20000be8:	2108      	movs	r1, #8
20000bea:	0018      	movs	r0, r3
20000bec:	f7ff fde0 	bl	200007b0 <graphic_write_command>
			graphic_write_data(buffer[y][x], B_CS1);
20000bf0:	1dfb      	adds	r3, r7, #7
20000bf2:	781a      	ldrb	r2, [r3, #0]
20000bf4:	1dbb      	adds	r3, r7, #6
20000bf6:	781b      	ldrb	r3, [r3, #0]
20000bf8:	4936      	ldr	r1, [pc, #216]	; (20000cd4 <draw_buffer+0x120>)
20000bfa:	01d2      	lsls	r2, r2, #7
20000bfc:	188a      	adds	r2, r1, r2
20000bfe:	5cd3      	ldrb	r3, [r2, r3]
20000c00:	2108      	movs	r1, #8
20000c02:	0018      	movs	r0, r3
20000c04:	f7ff fdf7 	bl	200007f6 <graphic_write_data>
			
			graphic_write_command(LCD_ON,           B_CS1 | B_CS2);
20000c08:	2118      	movs	r1, #24
20000c0a:	203f      	movs	r0, #63	; 0x3f
20000c0c:	f7ff fdd0 	bl	200007b0 <graphic_write_command>
			graphic_write_command(LCD_DISP_START,   B_CS1 | B_CS2);
20000c10:	2118      	movs	r1, #24
20000c12:	20c0      	movs	r0, #192	; 0xc0
20000c14:	f7ff fdcc 	bl	200007b0 <graphic_write_command>
		for (uint8_t x = 0; x<64; x++) {
20000c18:	1dbb      	adds	r3, r7, #6
20000c1a:	781a      	ldrb	r2, [r3, #0]
20000c1c:	1dbb      	adds	r3, r7, #6
20000c1e:	3201      	adds	r2, #1
20000c20:	701a      	strb	r2, [r3, #0]
20000c22:	1dbb      	adds	r3, r7, #6
20000c24:	781b      	ldrb	r3, [r3, #0]
20000c26:	2b3f      	cmp	r3, #63	; 0x3f
20000c28:	d9cf      	bls.n	20000bca <draw_buffer+0x16>
	for (uint8_t y = 0; y<8; y++) {
20000c2a:	1dfb      	adds	r3, r7, #7
20000c2c:	781a      	ldrb	r2, [r3, #0]
20000c2e:	1dfb      	adds	r3, r7, #7
20000c30:	3201      	adds	r2, #1
20000c32:	701a      	strb	r2, [r3, #0]
20000c34:	1dfb      	adds	r3, r7, #7
20000c36:	781b      	ldrb	r3, [r3, #0]
20000c38:	2b07      	cmp	r3, #7
20000c3a:	d9c2      	bls.n	20000bc2 <draw_buffer+0xe>
		}
	}
	for (uint8_t y = 0; y<8; y++) {
20000c3c:	1d7b      	adds	r3, r7, #5
20000c3e:	2200      	movs	r2, #0
20000c40:	701a      	strb	r2, [r3, #0]
20000c42:	e03d      	b.n	20000cc0 <draw_buffer+0x10c>
		for (uint8_t x = 64; x<128; x++) {
20000c44:	1d3b      	adds	r3, r7, #4
20000c46:	2240      	movs	r2, #64	; 0x40
20000c48:	701a      	strb	r2, [r3, #0]
20000c4a:	e02f      	b.n	20000cac <draw_buffer+0xf8>
			graphic_write_command(LCD_SET_ADD | x-64, B_CS2);
20000c4c:	1d3b      	adds	r3, r7, #4
20000c4e:	781b      	ldrb	r3, [r3, #0]
20000c50:	3b40      	subs	r3, #64	; 0x40
20000c52:	b2db      	uxtb	r3, r3
20000c54:	b25b      	sxtb	r3, r3
20000c56:	2240      	movs	r2, #64	; 0x40
20000c58:	4313      	orrs	r3, r2
20000c5a:	b25b      	sxtb	r3, r3
20000c5c:	b2db      	uxtb	r3, r3
20000c5e:	2110      	movs	r1, #16
20000c60:	0018      	movs	r0, r3
20000c62:	f7ff fda5 	bl	200007b0 <graphic_write_command>
			graphic_write_command(LCD_SET_PAGE | y, B_CS2);
20000c66:	1d7b      	adds	r3, r7, #5
20000c68:	781b      	ldrb	r3, [r3, #0]
20000c6a:	2248      	movs	r2, #72	; 0x48
20000c6c:	4252      	negs	r2, r2
20000c6e:	4313      	orrs	r3, r2
20000c70:	b2db      	uxtb	r3, r3
20000c72:	2110      	movs	r1, #16
20000c74:	0018      	movs	r0, r3
20000c76:	f7ff fd9b 	bl	200007b0 <graphic_write_command>
			graphic_write_data(buffer[y][x], B_CS2);
20000c7a:	1d7b      	adds	r3, r7, #5
20000c7c:	781a      	ldrb	r2, [r3, #0]
20000c7e:	1d3b      	adds	r3, r7, #4
20000c80:	781b      	ldrb	r3, [r3, #0]
20000c82:	4914      	ldr	r1, [pc, #80]	; (20000cd4 <draw_buffer+0x120>)
20000c84:	01d2      	lsls	r2, r2, #7
20000c86:	188a      	adds	r2, r1, r2
20000c88:	5cd3      	ldrb	r3, [r2, r3]
20000c8a:	2110      	movs	r1, #16
20000c8c:	0018      	movs	r0, r3
20000c8e:	f7ff fdb2 	bl	200007f6 <graphic_write_data>
			
			graphic_write_command(LCD_ON,           B_CS1 | B_CS2);
20000c92:	2118      	movs	r1, #24
20000c94:	203f      	movs	r0, #63	; 0x3f
20000c96:	f7ff fd8b 	bl	200007b0 <graphic_write_command>
			graphic_write_command(LCD_DISP_START,   B_CS1 | B_CS2);
20000c9a:	2118      	movs	r1, #24
20000c9c:	20c0      	movs	r0, #192	; 0xc0
20000c9e:	f7ff fd87 	bl	200007b0 <graphic_write_command>
		for (uint8_t x = 64; x<128; x++) {
20000ca2:	1d3b      	adds	r3, r7, #4
20000ca4:	781a      	ldrb	r2, [r3, #0]
20000ca6:	1d3b      	adds	r3, r7, #4
20000ca8:	3201      	adds	r2, #1
20000caa:	701a      	strb	r2, [r3, #0]
20000cac:	1d3b      	adds	r3, r7, #4
20000cae:	781b      	ldrb	r3, [r3, #0]
20000cb0:	b25b      	sxtb	r3, r3
20000cb2:	2b00      	cmp	r3, #0
20000cb4:	daca      	bge.n	20000c4c <draw_buffer+0x98>
	for (uint8_t y = 0; y<8; y++) {
20000cb6:	1d7b      	adds	r3, r7, #5
20000cb8:	781a      	ldrb	r2, [r3, #0]
20000cba:	1d7b      	adds	r3, r7, #5
20000cbc:	3201      	adds	r2, #1
20000cbe:	701a      	strb	r2, [r3, #0]
20000cc0:	1d7b      	adds	r3, r7, #5
20000cc2:	781b      	ldrb	r3, [r3, #0]
20000cc4:	2b07      	cmp	r3, #7
20000cc6:	d9bd      	bls.n	20000c44 <draw_buffer+0x90>
		}
	}
}
20000cc8:	46c0      	nop			; (mov r8, r8)
20000cca:	46c0      	nop			; (mov r8, r8)
20000ccc:	46bd      	mov	sp, r7
20000cce:	b002      	add	sp, #8
20000cd0:	bd80      	pop	{r7, pc}
20000cd2:	46c0      	nop			; (mov r8, r8)
20000cd4:	20002310 	andcs	r2, r0, r0, lsl r3

20000cd8 <init>:


void init() {
20000cd8:	b580      	push	{r7, lr}
20000cda:	af00      	add	r7, sp, #0
	#ifdef USBDM
	*((unsigned long *) 0x40023830) = 0x18;
	__asm volatile( " LDR R0,=0x08000209\n BLX R0 \n");
	#endif
    *portModer = 0x55555555; // Set E0-15 to output
20000cdc:	4b1e      	ldr	r3, [pc, #120]	; (20000d58 <init+0x80>)
20000cde:	4a1f      	ldr	r2, [pc, #124]	; (20000d5c <init+0x84>)
20000ce0:	601a      	str	r2, [r3, #0]
	
	*((unsigned long *) 0x40023830) = 0x18;
20000ce2:	4b1f      	ldr	r3, [pc, #124]	; (20000d60 <init+0x88>)
20000ce4:	2218      	movs	r2, #24
20000ce6:	601a      	str	r2, [r3, #0]
    // GPIO_D 8-15 ska bli keypad
    // Set MODER
    *GPIO_D_MODER &= 0x0000FFFF;
20000ce8:	4b1e      	ldr	r3, [pc, #120]	; (20000d64 <init+0x8c>)
20000cea:	681a      	ldr	r2, [r3, #0]
20000cec:	4b1d      	ldr	r3, [pc, #116]	; (20000d64 <init+0x8c>)
20000cee:	0412      	lsls	r2, r2, #16
20000cf0:	0c12      	lsrs	r2, r2, #16
20000cf2:	601a      	str	r2, [r3, #0]
    *GPIO_D_MODER |= 0x55000000;
20000cf4:	4b1b      	ldr	r3, [pc, #108]	; (20000d64 <init+0x8c>)
20000cf6:	681a      	ldr	r2, [r3, #0]
20000cf8:	4b1a      	ldr	r3, [pc, #104]	; (20000d64 <init+0x8c>)
20000cfa:	21aa      	movs	r1, #170	; 0xaa
20000cfc:	05c9      	lsls	r1, r1, #23
20000cfe:	430a      	orrs	r2, r1
20000d00:	601a      	str	r2, [r3, #0]
    // Set OTYPER
    *GPIO_D_OTYPER &= 0xFFFF00FF;
20000d02:	4b19      	ldr	r3, [pc, #100]	; (20000d68 <init+0x90>)
20000d04:	681a      	ldr	r2, [r3, #0]
20000d06:	4b18      	ldr	r3, [pc, #96]	; (20000d68 <init+0x90>)
20000d08:	4918      	ldr	r1, [pc, #96]	; (20000d6c <init+0x94>)
20000d0a:	400a      	ands	r2, r1
20000d0c:	601a      	str	r2, [r3, #0]
    *GPIO_D_OTYPER |= 0x00000F00;
20000d0e:	4b16      	ldr	r3, [pc, #88]	; (20000d68 <init+0x90>)
20000d10:	681a      	ldr	r2, [r3, #0]
20000d12:	4b15      	ldr	r3, [pc, #84]	; (20000d68 <init+0x90>)
20000d14:	21f0      	movs	r1, #240	; 0xf0
20000d16:	0109      	lsls	r1, r1, #4
20000d18:	430a      	orrs	r2, r1
20000d1a:	601a      	str	r2, [r3, #0]
    
    // Set PUPDR
    *GPIO_D_PUPDR &= 0x0000FFFF;
20000d1c:	4b14      	ldr	r3, [pc, #80]	; (20000d70 <init+0x98>)
20000d1e:	681a      	ldr	r2, [r3, #0]
20000d20:	4b13      	ldr	r3, [pc, #76]	; (20000d70 <init+0x98>)
20000d22:	0412      	lsls	r2, r2, #16
20000d24:	0c12      	lsrs	r2, r2, #16
20000d26:	601a      	str	r2, [r3, #0]
    *GPIO_D_PUPDR |= 0xFFAA0000;
20000d28:	4b11      	ldr	r3, [pc, #68]	; (20000d70 <init+0x98>)
20000d2a:	681a      	ldr	r2, [r3, #0]
20000d2c:	4b10      	ldr	r3, [pc, #64]	; (20000d70 <init+0x98>)
20000d2e:	4911      	ldr	r1, [pc, #68]	; (20000d74 <init+0x9c>)
20000d30:	430a      	orrs	r2, r1
20000d32:	601a      	str	r2, [r3, #0]
    
    // GPIO_D 0-7 ska bli 7seg
    // Set MODER
    *GPIO_D_MODER &= 0xFFFF0000;
20000d34:	4b0b      	ldr	r3, [pc, #44]	; (20000d64 <init+0x8c>)
20000d36:	681a      	ldr	r2, [r3, #0]
20000d38:	4b0a      	ldr	r3, [pc, #40]	; (20000d64 <init+0x8c>)
20000d3a:	0c12      	lsrs	r2, r2, #16
20000d3c:	0412      	lsls	r2, r2, #16
20000d3e:	601a      	str	r2, [r3, #0]
    *GPIO_D_MODER |= 0x00005555;
20000d40:	4b08      	ldr	r3, [pc, #32]	; (20000d64 <init+0x8c>)
20000d42:	681a      	ldr	r2, [r3, #0]
20000d44:	4b07      	ldr	r3, [pc, #28]	; (20000d64 <init+0x8c>)
20000d46:	490c      	ldr	r1, [pc, #48]	; (20000d78 <init+0xa0>)
20000d48:	430a      	orrs	r2, r1
20000d4a:	601a      	str	r2, [r3, #0]
	
	
    graphic_initialize();
20000d4c:	f7ff fd8b 	bl	20000866 <graphic_initialize>
}
20000d50:	46c0      	nop			; (mov r8, r8)
20000d52:	46bd      	mov	sp, r7
20000d54:	bd80      	pop	{r7, pc}
20000d56:	46c0      	nop			; (mov r8, r8)
20000d58:	40021000 	andmi	r1, r2, r0
20000d5c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000d60:	40023830 	andmi	r3, r2, r0, lsr r8
20000d64:	40020c00 	andmi	r0, r2, r0, lsl #24
20000d68:	40020c04 	andmi	r0, r2, r4, lsl #24
20000d6c:	ffff00ff 			; <UNDEFINED> instruction: 0xffff00ff
20000d70:	40020c0c 	andmi	r0, r2, ip, lsl #24
20000d74:	ffaa0000 			; <UNDEFINED> instruction: 0xffaa0000
20000d78:	00005555 	andeq	r5, r0, r5, asr r5

20000d7c <keyb>:


unsigned char keyb(void) {
20000d7c:	b590      	push	{r4, r7, lr}
20000d7e:	b087      	sub	sp, #28
20000d80:	af00      	add	r7, sp, #0
    unsigned char keys[] = {1, 2, 3,10,
20000d82:	003b      	movs	r3, r7
20000d84:	4a3f      	ldr	r2, [pc, #252]	; (20000e84 <keyb+0x108>)
20000d86:	ca13      	ldmia	r2!, {r0, r1, r4}
20000d88:	c313      	stmia	r3!, {r0, r1, r4}
20000d8a:	6812      	ldr	r2, [r2, #0]
20000d8c:	601a      	str	r2, [r3, #0]
                            4, 5, 6,11,
                            7, 8, 9,12,
                            14,0,15,13};
    char index = 0xFF;
20000d8e:	2317      	movs	r3, #23
20000d90:	18fb      	adds	r3, r7, r3
20000d92:	22ff      	movs	r2, #255	; 0xff
20000d94:	701a      	strb	r2, [r3, #0]
    char base = 0x10;
20000d96:	2314      	movs	r3, #20
20000d98:	18fb      	adds	r3, r7, r3
20000d9a:	2210      	movs	r2, #16
20000d9c:	701a      	strb	r2, [r3, #0]
    for (char row = 0; row<5; row++) {
20000d9e:	2316      	movs	r3, #22
20000da0:	18fb      	adds	r3, r7, r3
20000da2:	2200      	movs	r2, #0
20000da4:	701a      	strb	r2, [r3, #0]
20000da6:	e054      	b.n	20000e52 <keyb+0xd6>
        char outVal = base << row;
20000da8:	2314      	movs	r3, #20
20000daa:	18fb      	adds	r3, r7, r3
20000dac:	781a      	ldrb	r2, [r3, #0]
20000dae:	2316      	movs	r3, #22
20000db0:	18fb      	adds	r3, r7, r3
20000db2:	781b      	ldrb	r3, [r3, #0]
20000db4:	409a      	lsls	r2, r3
20000db6:	2113      	movs	r1, #19
20000db8:	187b      	adds	r3, r7, r1
20000dba:	701a      	strb	r2, [r3, #0]
        *KB_OUT = outVal;
20000dbc:	4a32      	ldr	r2, [pc, #200]	; (20000e88 <keyb+0x10c>)
20000dbe:	187b      	adds	r3, r7, r1
20000dc0:	781b      	ldrb	r3, [r3, #0]
20000dc2:	7013      	strb	r3, [r2, #0]
        char inVal = *KB_IN & 0x0F;
20000dc4:	4b31      	ldr	r3, [pc, #196]	; (20000e8c <keyb+0x110>)
20000dc6:	781b      	ldrb	r3, [r3, #0]
20000dc8:	b2da      	uxtb	r2, r3
20000dca:	2012      	movs	r0, #18
20000dcc:	183b      	adds	r3, r7, r0
20000dce:	210f      	movs	r1, #15
20000dd0:	400a      	ands	r2, r1
20000dd2:	701a      	strb	r2, [r3, #0]
        if (inVal != 0) {
20000dd4:	183b      	adds	r3, r7, r0
20000dd6:	781b      	ldrb	r3, [r3, #0]
20000dd8:	2b00      	cmp	r3, #0
20000dda:	d034      	beq.n	20000e46 <keyb+0xca>
            char col;
            if (inVal & 0x01) col = 0;
20000ddc:	183b      	adds	r3, r7, r0
20000dde:	781b      	ldrb	r3, [r3, #0]
20000de0:	2201      	movs	r2, #1
20000de2:	4013      	ands	r3, r2
20000de4:	d003      	beq.n	20000dee <keyb+0x72>
20000de6:	2315      	movs	r3, #21
20000de8:	18fb      	adds	r3, r7, r3
20000dea:	2200      	movs	r2, #0
20000dec:	701a      	strb	r2, [r3, #0]
            if (inVal & 0x02) col = 1;
20000dee:	2312      	movs	r3, #18
20000df0:	18fb      	adds	r3, r7, r3
20000df2:	781b      	ldrb	r3, [r3, #0]
20000df4:	2202      	movs	r2, #2
20000df6:	4013      	ands	r3, r2
20000df8:	d003      	beq.n	20000e02 <keyb+0x86>
20000dfa:	2315      	movs	r3, #21
20000dfc:	18fb      	adds	r3, r7, r3
20000dfe:	2201      	movs	r2, #1
20000e00:	701a      	strb	r2, [r3, #0]
            if (inVal & 0x04) col = 2;
20000e02:	2312      	movs	r3, #18
20000e04:	18fb      	adds	r3, r7, r3
20000e06:	781b      	ldrb	r3, [r3, #0]
20000e08:	2204      	movs	r2, #4
20000e0a:	4013      	ands	r3, r2
20000e0c:	d003      	beq.n	20000e16 <keyb+0x9a>
20000e0e:	2315      	movs	r3, #21
20000e10:	18fb      	adds	r3, r7, r3
20000e12:	2202      	movs	r2, #2
20000e14:	701a      	strb	r2, [r3, #0]
            if (inVal & 0x08) col = 3;
20000e16:	2312      	movs	r3, #18
20000e18:	18fb      	adds	r3, r7, r3
20000e1a:	781b      	ldrb	r3, [r3, #0]
20000e1c:	2208      	movs	r2, #8
20000e1e:	4013      	ands	r3, r2
20000e20:	d003      	beq.n	20000e2a <keyb+0xae>
20000e22:	2315      	movs	r3, #21
20000e24:	18fb      	adds	r3, r7, r3
20000e26:	2203      	movs	r2, #3
20000e28:	701a      	strb	r2, [r3, #0]
            
            index = row*4+col-4;
20000e2a:	2316      	movs	r3, #22
20000e2c:	18fb      	adds	r3, r7, r3
20000e2e:	781b      	ldrb	r3, [r3, #0]
20000e30:	009b      	lsls	r3, r3, #2
20000e32:	b2da      	uxtb	r2, r3
20000e34:	2315      	movs	r3, #21
20000e36:	18fb      	adds	r3, r7, r3
20000e38:	781b      	ldrb	r3, [r3, #0]
20000e3a:	18d3      	adds	r3, r2, r3
20000e3c:	b2da      	uxtb	r2, r3
20000e3e:	2317      	movs	r3, #23
20000e40:	18fb      	adds	r3, r7, r3
20000e42:	3a04      	subs	r2, #4
20000e44:	701a      	strb	r2, [r3, #0]
    for (char row = 0; row<5; row++) {
20000e46:	2116      	movs	r1, #22
20000e48:	187b      	adds	r3, r7, r1
20000e4a:	781a      	ldrb	r2, [r3, #0]
20000e4c:	187b      	adds	r3, r7, r1
20000e4e:	3201      	adds	r2, #1
20000e50:	701a      	strb	r2, [r3, #0]
20000e52:	2316      	movs	r3, #22
20000e54:	18fb      	adds	r3, r7, r3
20000e56:	781b      	ldrb	r3, [r3, #0]
20000e58:	2b04      	cmp	r3, #4
20000e5a:	d9a5      	bls.n	20000da8 <keyb+0x2c>
        }
    }
    *KB_OUT = 0;
20000e5c:	4b0a      	ldr	r3, [pc, #40]	; (20000e88 <keyb+0x10c>)
20000e5e:	2200      	movs	r2, #0
20000e60:	701a      	strb	r2, [r3, #0]
    if (index == 0xFF) {
20000e62:	2317      	movs	r3, #23
20000e64:	18fb      	adds	r3, r7, r3
20000e66:	781b      	ldrb	r3, [r3, #0]
20000e68:	2bff      	cmp	r3, #255	; 0xff
20000e6a:	d101      	bne.n	20000e70 <keyb+0xf4>
        return 0xFF;
20000e6c:	23ff      	movs	r3, #255	; 0xff
20000e6e:	e004      	b.n	20000e7a <keyb+0xfe>
    } else {
        return keys[index];
20000e70:	2317      	movs	r3, #23
20000e72:	18fb      	adds	r3, r7, r3
20000e74:	781b      	ldrb	r3, [r3, #0]
20000e76:	003a      	movs	r2, r7
20000e78:	5cd3      	ldrb	r3, [r2, r3]
    }
}
20000e7a:	0018      	movs	r0, r3
20000e7c:	46bd      	mov	sp, r7
20000e7e:	b007      	add	sp, #28
20000e80:	bd90      	pop	{r4, r7, pc}
20000e82:	46c0      	nop			; (mov r8, r8)
20000e84:	2000272c 	andcs	r2, r0, ip, lsr #14
20000e88:	40020c15 	andmi	r0, r2, r5, lsl ip
20000e8c:	40020c11 	andmi	r0, r2, r1, lsl ip

20000e90 <out7seg>:


void out7seg(unsigned char c) {
20000e90:	b5f0      	push	{r4, r5, r6, r7, lr}
20000e92:	b089      	sub	sp, #36	; 0x24
20000e94:	af00      	add	r7, sp, #0
20000e96:	0002      	movs	r2, r0
20000e98:	1dfb      	adds	r3, r7, #7
20000e9a:	701a      	strb	r2, [r3, #0]
    char out = 0;
20000e9c:	211f      	movs	r1, #31
20000e9e:	187b      	adds	r3, r7, r1
20000ea0:	2200      	movs	r2, #0
20000ea2:	701a      	strb	r2, [r3, #0]
    if (c<16) {
20000ea4:	1dfb      	adds	r3, r7, #7
20000ea6:	781b      	ldrb	r3, [r3, #0]
20000ea8:	2b0f      	cmp	r3, #15
20000eaa:	d80c      	bhi.n	20000ec6 <out7seg+0x36>
        char segCodes[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71};
20000eac:	200c      	movs	r0, #12
20000eae:	183b      	adds	r3, r7, r0
20000eb0:	4a09      	ldr	r2, [pc, #36]	; (20000ed8 <out7seg+0x48>)
20000eb2:	ca70      	ldmia	r2!, {r4, r5, r6}
20000eb4:	c370      	stmia	r3!, {r4, r5, r6}
20000eb6:	6812      	ldr	r2, [r2, #0]
20000eb8:	601a      	str	r2, [r3, #0]
        out = segCodes[c];
20000eba:	1dfb      	adds	r3, r7, #7
20000ebc:	781a      	ldrb	r2, [r3, #0]
20000ebe:	187b      	adds	r3, r7, r1
20000ec0:	1839      	adds	r1, r7, r0
20000ec2:	5c8a      	ldrb	r2, [r1, r2]
20000ec4:	701a      	strb	r2, [r3, #0]
    }
    *SEG_OUT = out;
20000ec6:	4a05      	ldr	r2, [pc, #20]	; (20000edc <out7seg+0x4c>)
20000ec8:	231f      	movs	r3, #31
20000eca:	18fb      	adds	r3, r7, r3
20000ecc:	781b      	ldrb	r3, [r3, #0]
20000ece:	7013      	strb	r3, [r2, #0]
}
20000ed0:	46c0      	nop			; (mov r8, r8)
20000ed2:	46bd      	mov	sp, r7
20000ed4:	b009      	add	sp, #36	; 0x24
20000ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
20000ed8:	2000273c 	andcs	r2, r0, ip, lsr r7
20000edc:	40020c14 	andmi	r0, r2, r4, lsl ip

20000ee0 <__aeabi_dmul>:
20000ee0:	e92d4070 	push	{r4, r5, r6, lr}
20000ee4:	e3a0c0ff 	mov	ip, #255	; 0xff
20000ee8:	e38ccc07 	orr	ip, ip, #1792	; 0x700
20000eec:	e01c4a21 	ands	r4, ip, r1, lsr #20
20000ef0:	101c5a23 	andsne	r5, ip, r3, lsr #20
20000ef4:	1134000c 	teqne	r4, ip
20000ef8:	1135000c 	teqne	r5, ip
20000efc:	0b000075 	bleq	200010d8 <__aeabi_dmul+0x1f8>
20000f00:	e0844005 	add	r4, r4, r5
20000f04:	e0216003 	eor	r6, r1, r3
20000f08:	e1c11a8c 	bic	r1, r1, ip, lsl #21
20000f0c:	e1c33a8c 	bic	r3, r3, ip, lsl #21
20000f10:	e1905601 	orrs	r5, r0, r1, lsl #12
20000f14:	11925603 	orrsne	r5, r2, r3, lsl #12
20000f18:	e3811601 	orr	r1, r1, #1048576	; 0x100000
20000f1c:	e3833601 	orr	r3, r3, #1048576	; 0x100000
20000f20:	0a00001d 	beq	20000f9c <__aeabi_dmul+0xbc>
20000f24:	e08ec290 	umull	ip, lr, r0, r2
20000f28:	e3a05000 	mov	r5, #0
20000f2c:	e0a5e291 	umlal	lr, r5, r1, r2
20000f30:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
20000f34:	e0a5e390 	umlal	lr, r5, r0, r3
20000f38:	e3a06000 	mov	r6, #0
20000f3c:	e0a65391 	umlal	r5, r6, r1, r3
20000f40:	e33c0000 	teq	ip, #0
20000f44:	138ee001 	orrne	lr, lr, #1
20000f48:	e24440ff 	sub	r4, r4, #255	; 0xff
20000f4c:	e3560c02 	cmp	r6, #512	; 0x200
20000f50:	e2c44c03 	sbc	r4, r4, #768	; 0x300
20000f54:	2a000002 	bcs	20000f64 <__aeabi_dmul+0x84>
20000f58:	e1b0e08e 	lsls	lr, lr, #1
20000f5c:	e0b55005 	adcs	r5, r5, r5
20000f60:	e0a66006 	adc	r6, r6, r6
20000f64:	e1821586 	orr	r1, r2, r6, lsl #11
20000f68:	e1811aa5 	orr	r1, r1, r5, lsr #21
20000f6c:	e1a00585 	lsl	r0, r5, #11
20000f70:	e1800aae 	orr	r0, r0, lr, lsr #21
20000f74:	e1a0e58e 	lsl	lr, lr, #11
20000f78:	e254c0fd 	subs	ip, r4, #253	; 0xfd
20000f7c:	835c0c07 	cmphi	ip, #1792	; 0x700
20000f80:	8a000011 	bhi	20000fcc <__aeabi_dmul+0xec>
20000f84:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
20000f88:	01b0e0a0 	lsrseq	lr, r0, #1
20000f8c:	e2b00000 	adcs	r0, r0, #0
20000f90:	e0a11a04 	adc	r1, r1, r4, lsl #20
20000f94:	e8bd4070 	pop	{r4, r5, r6, lr}
20000f98:	e12fff1e 	bx	lr
20000f9c:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
20000fa0:	e1861001 	orr	r1, r6, r1
20000fa4:	e1800002 	orr	r0, r0, r2
20000fa8:	e0211003 	eor	r1, r1, r3
20000fac:	e05440ac 	subs	r4, r4, ip, lsr #1
20000fb0:	c074500c 	rsbsgt	r5, r4, ip
20000fb4:	c1811a04 	orrgt	r1, r1, r4, lsl #20
20000fb8:	c8bd4070 	popgt	{r4, r5, r6, lr}
20000fbc:	c12fff1e 	bxgt	lr
20000fc0:	e3811601 	orr	r1, r1, #1048576	; 0x100000
20000fc4:	e3a0e000 	mov	lr, #0
20000fc8:	e2544001 	subs	r4, r4, #1
20000fcc:	ca00005d 	bgt	20001148 <__aeabi_dmul+0x268>
20000fd0:	e3740036 	cmn	r4, #54	; 0x36
20000fd4:	d3a00000 	movle	r0, #0
20000fd8:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
20000fdc:	d8bd4070 	pople	{r4, r5, r6, lr}
20000fe0:	d12fff1e 	bxle	lr
20000fe4:	e2644000 	rsb	r4, r4, #0
20000fe8:	e2544020 	subs	r4, r4, #32
20000fec:	aa00001a 	bge	2000105c <__aeabi_dmul+0x17c>
20000ff0:	e294400c 	adds	r4, r4, #12
20000ff4:	ca00000c 	bgt	2000102c <__aeabi_dmul+0x14c>
20000ff8:	e2844014 	add	r4, r4, #20
20000ffc:	e2645020 	rsb	r5, r4, #32
20001000:	e1a03510 	lsl	r3, r0, r5
20001004:	e1a00430 	lsr	r0, r0, r4
20001008:	e1800511 	orr	r0, r0, r1, lsl r5
2000100c:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
20001010:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
20001014:	e0900fa3 	adds	r0, r0, r3, lsr #31
20001018:	e0a21431 	adc	r1, r2, r1, lsr r4
2000101c:	e19ee083 	orrs	lr, lr, r3, lsl #1
20001020:	01c00fa3 	biceq	r0, r0, r3, lsr #31
20001024:	e8bd4070 	pop	{r4, r5, r6, lr}
20001028:	e12fff1e 	bx	lr
2000102c:	e264400c 	rsb	r4, r4, #12
20001030:	e2645020 	rsb	r5, r4, #32
20001034:	e1a03410 	lsl	r3, r0, r4
20001038:	e1a00530 	lsr	r0, r0, r5
2000103c:	e1800411 	orr	r0, r0, r1, lsl r4
20001040:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
20001044:	e0900fa3 	adds	r0, r0, r3, lsr #31
20001048:	e2a11000 	adc	r1, r1, #0
2000104c:	e19ee083 	orrs	lr, lr, r3, lsl #1
20001050:	01c00fa3 	biceq	r0, r0, r3, lsr #31
20001054:	e8bd4070 	pop	{r4, r5, r6, lr}
20001058:	e12fff1e 	bx	lr
2000105c:	e2645020 	rsb	r5, r4, #32
20001060:	e18ee510 	orr	lr, lr, r0, lsl r5
20001064:	e1a03430 	lsr	r3, r0, r4
20001068:	e1833511 	orr	r3, r3, r1, lsl r5
2000106c:	e1a00431 	lsr	r0, r1, r4
20001070:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
20001074:	e1c00431 	bic	r0, r0, r1, lsr r4
20001078:	e0800fa3 	add	r0, r0, r3, lsr #31
2000107c:	e19ee083 	orrs	lr, lr, r3, lsl #1
20001080:	01c00fa3 	biceq	r0, r0, r3, lsr #31
20001084:	e8bd4070 	pop	{r4, r5, r6, lr}
20001088:	e12fff1e 	bx	lr
2000108c:	e3340000 	teq	r4, #0
20001090:	1a000008 	bne	200010b8 <__aeabi_dmul+0x1d8>
20001094:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
20001098:	e1b00080 	lsls	r0, r0, #1
2000109c:	e0a11001 	adc	r1, r1, r1
200010a0:	e3110601 	tst	r1, #1048576	; 0x100000
200010a4:	02444001 	subeq	r4, r4, #1
200010a8:	0afffffa 	beq	20001098 <__aeabi_dmul+0x1b8>
200010ac:	e1811006 	orr	r1, r1, r6
200010b0:	e3350000 	teq	r5, #0
200010b4:	112fff1e 	bxne	lr
200010b8:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
200010bc:	e1b02082 	lsls	r2, r2, #1
200010c0:	e0a33003 	adc	r3, r3, r3
200010c4:	e3130601 	tst	r3, #1048576	; 0x100000
200010c8:	02455001 	subeq	r5, r5, #1
200010cc:	0afffffa 	beq	200010bc <__aeabi_dmul+0x1dc>
200010d0:	e1833006 	orr	r3, r3, r6
200010d4:	e12fff1e 	bx	lr
200010d8:	e134000c 	teq	r4, ip
200010dc:	e00c5a23 	and	r5, ip, r3, lsr #20
200010e0:	1135000c 	teqne	r5, ip
200010e4:	0a000007 	beq	20001108 <__aeabi_dmul+0x228>
200010e8:	e1906081 	orrs	r6, r0, r1, lsl #1
200010ec:	11926083 	orrsne	r6, r2, r3, lsl #1
200010f0:	1affffe5 	bne	2000108c <__aeabi_dmul+0x1ac>
200010f4:	e0211003 	eor	r1, r1, r3
200010f8:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
200010fc:	e3a00000 	mov	r0, #0
20001100:	e8bd4070 	pop	{r4, r5, r6, lr}
20001104:	e12fff1e 	bx	lr
20001108:	e1906081 	orrs	r6, r0, r1, lsl #1
2000110c:	01a00002 	moveq	r0, r2
20001110:	01a01003 	moveq	r1, r3
20001114:	11926083 	orrsne	r6, r2, r3, lsl #1
20001118:	0a000010 	beq	20001160 <__aeabi_dmul+0x280>
2000111c:	e134000c 	teq	r4, ip
20001120:	1a000001 	bne	2000112c <__aeabi_dmul+0x24c>
20001124:	e1906601 	orrs	r6, r0, r1, lsl #12
20001128:	1a00000c 	bne	20001160 <__aeabi_dmul+0x280>
2000112c:	e135000c 	teq	r5, ip
20001130:	1a000003 	bne	20001144 <__aeabi_dmul+0x264>
20001134:	e1926603 	orrs	r6, r2, r3, lsl #12
20001138:	11a00002 	movne	r0, r2
2000113c:	11a01003 	movne	r1, r3
20001140:	1a000006 	bne	20001160 <__aeabi_dmul+0x280>
20001144:	e0211003 	eor	r1, r1, r3
20001148:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
2000114c:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
20001150:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
20001154:	e3a00000 	mov	r0, #0
20001158:	e8bd4070 	pop	{r4, r5, r6, lr}
2000115c:	e12fff1e 	bx	lr
20001160:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
20001164:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
20001168:	e8bd4070 	pop	{r4, r5, r6, lr}
2000116c:	e12fff1e 	bx	lr
20001170:	e3a0c0ff 	mov	ip, #255	; 0xff
20001174:	e01c2ba0 	ands	r2, ip, r0, lsr #23
20001178:	101c3ba1 	andsne	r3, ip, r1, lsr #23
2000117c:	1132000c 	teqne	r2, ip
20001180:	1133000c 	teqne	r3, ip
20001184:	0a00003e 	beq	20001284 <__aeabi_dmul+0x3a4>
20001188:	e0822003 	add	r2, r2, r3
2000118c:	e020c001 	eor	ip, r0, r1
20001190:	e1b00480 	lsls	r0, r0, #9
20001194:	11b01481 	lslsne	r1, r1, #9
20001198:	0a000010 	beq	200011e0 <__aeabi_dmul+0x300>
2000119c:	e3a03302 	mov	r3, #134217728	; 0x8000000
200011a0:	e18302a0 	orr	r0, r3, r0, lsr #5
200011a4:	e18312a1 	orr	r1, r3, r1, lsr #5
200011a8:	e0813190 	umull	r3, r1, r0, r1
200011ac:	e20c0102 	and	r0, ip, #-2147483648	; 0x80000000
200011b0:	e3510502 	cmp	r1, #8388608	; 0x800000
200011b4:	31a01081 	lslcc	r1, r1, #1
200011b8:	31811fa3 	orrcc	r1, r1, r3, lsr #31
200011bc:	31a03083 	lslcc	r3, r3, #1
200011c0:	e1800001 	orr	r0, r0, r1
200011c4:	e2c2207f 	sbc	r2, r2, #127	; 0x7f
200011c8:	e35200fd 	cmp	r2, #253	; 0xfd
200011cc:	8a00000f 	bhi	20001210 <__aeabi_dmul+0x330>
200011d0:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
200011d4:	e0a00b82 	adc	r0, r0, r2, lsl #23
200011d8:	03c00001 	biceq	r0, r0, #1
200011dc:	e12fff1e 	bx	lr
200011e0:	e3300000 	teq	r0, #0
200011e4:	e20cc102 	and	ip, ip, #-2147483648	; 0x80000000
200011e8:	01a01481 	lsleq	r1, r1, #9
200011ec:	e18c04a0 	orr	r0, ip, r0, lsr #9
200011f0:	e18004a1 	orr	r0, r0, r1, lsr #9
200011f4:	e252207f 	subs	r2, r2, #127	; 0x7f
200011f8:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
200011fc:	c1800b82 	orrgt	r0, r0, r2, lsl #23
20001200:	c12fff1e 	bxgt	lr
20001204:	e3800502 	orr	r0, r0, #8388608	; 0x800000
20001208:	e3a03000 	mov	r3, #0
2000120c:	e2522001 	subs	r2, r2, #1
20001210:	ca000035 	bgt	200012ec <__aeabi_dmul+0x40c>
20001214:	e3720019 	cmn	r2, #25
20001218:	d2000102 	andle	r0, r0, #-2147483648	; 0x80000000
2000121c:	d12fff1e 	bxle	lr
20001220:	e2622000 	rsb	r2, r2, #0
20001224:	e1b01080 	lsls	r1, r0, #1
20001228:	e1a01231 	lsr	r1, r1, r2
2000122c:	e2622020 	rsb	r2, r2, #32
20001230:	e1a0c210 	lsl	ip, r0, r2
20001234:	e1b00061 	rrxs	r0, r1
20001238:	e2a00000 	adc	r0, r0, #0
2000123c:	e193308c 	orrs	r3, r3, ip, lsl #1
20001240:	01c00fac 	biceq	r0, r0, ip, lsr #31
20001244:	e12fff1e 	bx	lr
20001248:	e3320000 	teq	r2, #0
2000124c:	e200c102 	and	ip, r0, #-2147483648	; 0x80000000
20001250:	01a00080 	lsleq	r0, r0, #1
20001254:	03100502 	tsteq	r0, #8388608	; 0x800000
20001258:	02422001 	subeq	r2, r2, #1
2000125c:	0afffffb 	beq	20001250 <__aeabi_dmul+0x370>
20001260:	e180000c 	orr	r0, r0, ip
20001264:	e3330000 	teq	r3, #0
20001268:	e201c102 	and	ip, r1, #-2147483648	; 0x80000000
2000126c:	01a01081 	lsleq	r1, r1, #1
20001270:	03110502 	tsteq	r1, #8388608	; 0x800000
20001274:	02433001 	subeq	r3, r3, #1
20001278:	0afffffb 	beq	2000126c <__aeabi_dmul+0x38c>
2000127c:	e181100c 	orr	r1, r1, ip
20001280:	eaffffc0 	b	20001188 <__aeabi_dmul+0x2a8>
20001284:	e00c3ba1 	and	r3, ip, r1, lsr #23
20001288:	e132000c 	teq	r2, ip
2000128c:	1133000c 	teqne	r3, ip
20001290:	0a000005 	beq	200012ac <__aeabi_dmul+0x3cc>
20001294:	e3d0c102 	bics	ip, r0, #-2147483648	; 0x80000000
20001298:	13d1c102 	bicsne	ip, r1, #-2147483648	; 0x80000000
2000129c:	1affffe9 	bne	20001248 <__aeabi_dmul+0x368>
200012a0:	e0200001 	eor	r0, r0, r1
200012a4:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
200012a8:	e12fff1e 	bx	lr
200012ac:	e3300000 	teq	r0, #0
200012b0:	13300102 	teqne	r0, #-2147483648	; 0x80000000
200012b4:	01a00001 	moveq	r0, r1
200012b8:	13310000 	teqne	r1, #0
200012bc:	13310102 	teqne	r1, #-2147483648	; 0x80000000
200012c0:	0a00000d 	beq	200012fc <__aeabi_dmul+0x41c>
200012c4:	e132000c 	teq	r2, ip
200012c8:	1a000001 	bne	200012d4 <__aeabi_dmul+0x3f4>
200012cc:	e1b02480 	lsls	r2, r0, #9
200012d0:	1a000009 	bne	200012fc <__aeabi_dmul+0x41c>
200012d4:	e133000c 	teq	r3, ip
200012d8:	1a000002 	bne	200012e8 <__aeabi_dmul+0x408>
200012dc:	e1b03481 	lsls	r3, r1, #9
200012e0:	11a00001 	movne	r0, r1
200012e4:	1a000004 	bne	200012fc <__aeabi_dmul+0x41c>
200012e8:	e0200001 	eor	r0, r0, r1
200012ec:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
200012f0:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
200012f4:	e3800502 	orr	r0, r0, #8388608	; 0x800000
200012f8:	e12fff1e 	bx	lr
200012fc:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
20001300:	e3800503 	orr	r0, r0, #12582912	; 0xc00000
20001304:	e12fff1e 	bx	lr

20001308 <__aeabi_drsub>:
20001308:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
2000130c:	ea000000 	b	20001314 <__adddf3>

20001310 <__aeabi_dsub>:
20001310:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

20001314 <__adddf3>:
20001314:	e92d4030 	push	{r4, r5, lr}
20001318:	e1a04081 	lsl	r4, r1, #1
2000131c:	e1a05083 	lsl	r5, r3, #1
20001320:	e1340005 	teq	r4, r5
20001324:	01300002 	teqeq	r0, r2
20001328:	1194c000 	orrsne	ip, r4, r0
2000132c:	1195c002 	orrsne	ip, r5, r2
20001330:	11f0cac4 	mvnsne	ip, r4, asr #21
20001334:	11f0cac5 	mvnsne	ip, r5, asr #21
20001338:	0a00008c 	beq	20001570 <__adddf3+0x25c>
2000133c:	e1a04aa4 	lsr	r4, r4, #21
20001340:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
20001344:	b2655000 	rsblt	r5, r5, #0
20001348:	da000006 	ble	20001368 <__adddf3+0x54>
2000134c:	e0844005 	add	r4, r4, r5
20001350:	e0202002 	eor	r2, r0, r2
20001354:	e0213003 	eor	r3, r1, r3
20001358:	e0220000 	eor	r0, r2, r0
2000135c:	e0231001 	eor	r1, r3, r1
20001360:	e0202002 	eor	r2, r0, r2
20001364:	e0213003 	eor	r3, r1, r3
20001368:	e3550036 	cmp	r5, #54	; 0x36
2000136c:	88bd4030 	pophi	{r4, r5, lr}
20001370:	812fff1e 	bxhi	lr
20001374:	e3110102 	tst	r1, #-2147483648	; 0x80000000
20001378:	e1a01601 	lsl	r1, r1, #12
2000137c:	e3a0c601 	mov	ip, #1048576	; 0x100000
20001380:	e18c1621 	orr	r1, ip, r1, lsr #12
20001384:	0a000001 	beq	20001390 <__adddf3+0x7c>
20001388:	e2700000 	rsbs	r0, r0, #0
2000138c:	e2e11000 	rsc	r1, r1, #0
20001390:	e3130102 	tst	r3, #-2147483648	; 0x80000000
20001394:	e1a03603 	lsl	r3, r3, #12
20001398:	e18c3623 	orr	r3, ip, r3, lsr #12
2000139c:	0a000001 	beq	200013a8 <__adddf3+0x94>
200013a0:	e2722000 	rsbs	r2, r2, #0
200013a4:	e2e33000 	rsc	r3, r3, #0
200013a8:	e1340005 	teq	r4, r5
200013ac:	0a000069 	beq	20001558 <__adddf3+0x244>
200013b0:	e2444001 	sub	r4, r4, #1
200013b4:	e275e020 	rsbs	lr, r5, #32
200013b8:	ba000005 	blt	200013d4 <__adddf3+0xc0>
200013bc:	e1a0ce12 	lsl	ip, r2, lr
200013c0:	e0900532 	adds	r0, r0, r2, lsr r5
200013c4:	e2a11000 	adc	r1, r1, #0
200013c8:	e0900e13 	adds	r0, r0, r3, lsl lr
200013cc:	e0b11553 	adcs	r1, r1, r3, asr r5
200013d0:	ea000006 	b	200013f0 <__adddf3+0xdc>
200013d4:	e2455020 	sub	r5, r5, #32
200013d8:	e28ee020 	add	lr, lr, #32
200013dc:	e3520001 	cmp	r2, #1
200013e0:	e1a0ce13 	lsl	ip, r3, lr
200013e4:	238cc002 	orrcs	ip, ip, #2
200013e8:	e0900553 	adds	r0, r0, r3, asr r5
200013ec:	e0b11fc3 	adcs	r1, r1, r3, asr #31
200013f0:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
200013f4:	5a000002 	bpl	20001404 <__adddf3+0xf0>
200013f8:	e27cc000 	rsbs	ip, ip, #0
200013fc:	e2f00000 	rscs	r0, r0, #0
20001400:	e2e11000 	rsc	r1, r1, #0
20001404:	e3510601 	cmp	r1, #1048576	; 0x100000
20001408:	3a00000f 	bcc	2000144c <__adddf3+0x138>
2000140c:	e3510602 	cmp	r1, #2097152	; 0x200000
20001410:	3a000006 	bcc	20001430 <__adddf3+0x11c>
20001414:	e1b010a1 	lsrs	r1, r1, #1
20001418:	e1b00060 	rrxs	r0, r0
2000141c:	e1a0c06c 	rrx	ip, ip
20001420:	e2844001 	add	r4, r4, #1
20001424:	e1a02a84 	lsl	r2, r4, #21
20001428:	e3720501 	cmn	r2, #4194304	; 0x400000
2000142c:	2a00006b 	bcs	200015e0 <__adddf3+0x2cc>
20001430:	e35c0102 	cmp	ip, #-2147483648	; 0x80000000
20001434:	01b0c0a0 	lsrseq	ip, r0, #1
20001438:	e2b00000 	adcs	r0, r0, #0
2000143c:	e0a11a04 	adc	r1, r1, r4, lsl #20
20001440:	e1811005 	orr	r1, r1, r5
20001444:	e8bd4030 	pop	{r4, r5, lr}
20001448:	e12fff1e 	bx	lr
2000144c:	e1b0c08c 	lsls	ip, ip, #1
20001450:	e0b00000 	adcs	r0, r0, r0
20001454:	e0a11001 	adc	r1, r1, r1
20001458:	e2544001 	subs	r4, r4, #1
2000145c:	23510601 	cmpcs	r1, #1048576	; 0x100000
20001460:	2afffff2 	bcs	20001430 <__adddf3+0x11c>
20001464:	e3310000 	teq	r1, #0
20001468:	13a03014 	movne	r3, #20
2000146c:	03a03034 	moveq	r3, #52	; 0x34
20001470:	01a01000 	moveq	r1, r0
20001474:	03a00000 	moveq	r0, #0
20001478:	e1a02001 	mov	r2, r1
2000147c:	e3520801 	cmp	r2, #65536	; 0x10000
20001480:	21a02822 	lsrcs	r2, r2, #16
20001484:	22433010 	subcs	r3, r3, #16
20001488:	e3520c01 	cmp	r2, #256	; 0x100
2000148c:	21a02422 	lsrcs	r2, r2, #8
20001490:	22433008 	subcs	r3, r3, #8
20001494:	e3520010 	cmp	r2, #16
20001498:	21a02222 	lsrcs	r2, r2, #4
2000149c:	22433004 	subcs	r3, r3, #4
200014a0:	e3520004 	cmp	r2, #4
200014a4:	22433002 	subcs	r3, r3, #2
200014a8:	304330a2 	subcc	r3, r3, r2, lsr #1
200014ac:	e04331a2 	sub	r3, r3, r2, lsr #3
200014b0:	e2532020 	subs	r2, r3, #32
200014b4:	aa000007 	bge	200014d8 <__adddf3+0x1c4>
200014b8:	e292200c 	adds	r2, r2, #12
200014bc:	da000004 	ble	200014d4 <__adddf3+0x1c0>
200014c0:	e282c014 	add	ip, r2, #20
200014c4:	e262200c 	rsb	r2, r2, #12
200014c8:	e1a00c11 	lsl	r0, r1, ip
200014cc:	e1a01231 	lsr	r1, r1, r2
200014d0:	ea000004 	b	200014e8 <__adddf3+0x1d4>
200014d4:	e2822014 	add	r2, r2, #20
200014d8:	d262c020 	rsble	ip, r2, #32
200014dc:	e1a01211 	lsl	r1, r1, r2
200014e0:	d1811c30 	orrle	r1, r1, r0, lsr ip
200014e4:	d1a00210 	lslle	r0, r0, r2
200014e8:	e0544003 	subs	r4, r4, r3
200014ec:	a0811a04 	addge	r1, r1, r4, lsl #20
200014f0:	a1811005 	orrge	r1, r1, r5
200014f4:	a8bd4030 	popge	{r4, r5, lr}
200014f8:	a12fff1e 	bxge	lr
200014fc:	e1e04004 	mvn	r4, r4
20001500:	e254401f 	subs	r4, r4, #31
20001504:	aa00000f 	bge	20001548 <__adddf3+0x234>
20001508:	e294400c 	adds	r4, r4, #12
2000150c:	ca000006 	bgt	2000152c <__adddf3+0x218>
20001510:	e2844014 	add	r4, r4, #20
20001514:	e2642020 	rsb	r2, r4, #32
20001518:	e1a00430 	lsr	r0, r0, r4
2000151c:	e1800211 	orr	r0, r0, r1, lsl r2
20001520:	e1851431 	orr	r1, r5, r1, lsr r4
20001524:	e8bd4030 	pop	{r4, r5, lr}
20001528:	e12fff1e 	bx	lr
2000152c:	e264400c 	rsb	r4, r4, #12
20001530:	e2642020 	rsb	r2, r4, #32
20001534:	e1a00230 	lsr	r0, r0, r2
20001538:	e1800411 	orr	r0, r0, r1, lsl r4
2000153c:	e1a01005 	mov	r1, r5
20001540:	e8bd4030 	pop	{r4, r5, lr}
20001544:	e12fff1e 	bx	lr
20001548:	e1a00431 	lsr	r0, r1, r4
2000154c:	e1a01005 	mov	r1, r5
20001550:	e8bd4030 	pop	{r4, r5, lr}
20001554:	e12fff1e 	bx	lr
20001558:	e3340000 	teq	r4, #0
2000155c:	e2233601 	eor	r3, r3, #1048576	; 0x100000
20001560:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
20001564:	02844001 	addeq	r4, r4, #1
20001568:	12455001 	subne	r5, r5, #1
2000156c:	eaffff8f 	b	200013b0 <__adddf3+0x9c>
20001570:	e1f0cac4 	mvns	ip, r4, asr #21
20001574:	11f0cac5 	mvnsne	ip, r5, asr #21
20001578:	0a00001d 	beq	200015f4 <__adddf3+0x2e0>
2000157c:	e1340005 	teq	r4, r5
20001580:	01300002 	teqeq	r0, r2
20001584:	0a000004 	beq	2000159c <__adddf3+0x288>
20001588:	e194c000 	orrs	ip, r4, r0
2000158c:	01a01003 	moveq	r1, r3
20001590:	01a00002 	moveq	r0, r2
20001594:	e8bd4030 	pop	{r4, r5, lr}
20001598:	e12fff1e 	bx	lr
2000159c:	e1310003 	teq	r1, r3
200015a0:	13a01000 	movne	r1, #0
200015a4:	13a00000 	movne	r0, #0
200015a8:	18bd4030 	popne	{r4, r5, lr}
200015ac:	112fff1e 	bxne	lr
200015b0:	e1b0caa4 	lsrs	ip, r4, #21
200015b4:	1a000004 	bne	200015cc <__adddf3+0x2b8>
200015b8:	e1b00080 	lsls	r0, r0, #1
200015bc:	e0b11001 	adcs	r1, r1, r1
200015c0:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
200015c4:	e8bd4030 	pop	{r4, r5, lr}
200015c8:	e12fff1e 	bx	lr
200015cc:	e2944501 	adds	r4, r4, #4194304	; 0x400000
200015d0:	32811601 	addcc	r1, r1, #1048576	; 0x100000
200015d4:	38bd4030 	popcc	{r4, r5, lr}
200015d8:	312fff1e 	bxcc	lr
200015dc:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
200015e0:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
200015e4:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
200015e8:	e3a00000 	mov	r0, #0
200015ec:	e8bd4030 	pop	{r4, r5, lr}
200015f0:	e12fff1e 	bx	lr
200015f4:	e1f0cac4 	mvns	ip, r4, asr #21
200015f8:	11a01003 	movne	r1, r3
200015fc:	11a00002 	movne	r0, r2
20001600:	01f0cac5 	mvnseq	ip, r5, asr #21
20001604:	11a03001 	movne	r3, r1
20001608:	11a02000 	movne	r2, r0
2000160c:	e1904601 	orrs	r4, r0, r1, lsl #12
20001610:	01925603 	orrseq	r5, r2, r3, lsl #12
20001614:	01310003 	teqeq	r1, r3
20001618:	13811702 	orrne	r1, r1, #524288	; 0x80000
2000161c:	e8bd4030 	pop	{r4, r5, lr}
20001620:	e12fff1e 	bx	lr

20001624 <__aeabi_ui2d>:
20001624:	e3300000 	teq	r0, #0
20001628:	03a01000 	moveq	r1, #0
2000162c:	012fff1e 	bxeq	lr
20001630:	e92d4030 	push	{r4, r5, lr}
20001634:	e3a04b01 	mov	r4, #1024	; 0x400
20001638:	e2844032 	add	r4, r4, #50	; 0x32
2000163c:	e3a05000 	mov	r5, #0
20001640:	e3a01000 	mov	r1, #0
20001644:	eaffff86 	b	20001464 <__adddf3+0x150>

20001648 <__aeabi_i2d>:
20001648:	e3300000 	teq	r0, #0
2000164c:	03a01000 	moveq	r1, #0
20001650:	012fff1e 	bxeq	lr
20001654:	e92d4030 	push	{r4, r5, lr}
20001658:	e3a04b01 	mov	r4, #1024	; 0x400
2000165c:	e2844032 	add	r4, r4, #50	; 0x32
20001660:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
20001664:	42600000 	rsbmi	r0, r0, #0
20001668:	e3a01000 	mov	r1, #0
2000166c:	eaffff7c 	b	20001464 <__adddf3+0x150>

20001670 <__aeabi_f2d>:
20001670:	e1b02080 	lsls	r2, r0, #1
20001674:	e1a011c2 	asr	r1, r2, #3
20001678:	e1a01061 	rrx	r1, r1
2000167c:	e1a00e02 	lsl	r0, r2, #28
20001680:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
20001684:	133304ff 	teqne	r3, #-16777216	; 0xff000000
20001688:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
2000168c:	112fff1e 	bxne	lr
20001690:	e3d224ff 	bics	r2, r2, #-16777216	; 0xff000000
20001694:	012fff1e 	bxeq	lr
20001698:	e33304ff 	teq	r3, #-16777216	; 0xff000000
2000169c:	03811702 	orreq	r1, r1, #524288	; 0x80000
200016a0:	012fff1e 	bxeq	lr
200016a4:	e92d4030 	push	{r4, r5, lr}
200016a8:	e3a04d0e 	mov	r4, #896	; 0x380
200016ac:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
200016b0:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
200016b4:	eaffff6a 	b	20001464 <__adddf3+0x150>

200016b8 <__aeabi_ul2d>:
200016b8:	e1902001 	orrs	r2, r0, r1
200016bc:	012fff1e 	bxeq	lr
200016c0:	e92d4030 	push	{r4, r5, lr}
200016c4:	e3a05000 	mov	r5, #0
200016c8:	ea000006 	b	200016e8 <__aeabi_l2d+0x1c>

200016cc <__aeabi_l2d>:
200016cc:	e1902001 	orrs	r2, r0, r1
200016d0:	012fff1e 	bxeq	lr
200016d4:	e92d4030 	push	{r4, r5, lr}
200016d8:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
200016dc:	5a000001 	bpl	200016e8 <__aeabi_l2d+0x1c>
200016e0:	e2700000 	rsbs	r0, r0, #0
200016e4:	e2e11000 	rsc	r1, r1, #0
200016e8:	e3a04b01 	mov	r4, #1024	; 0x400
200016ec:	e2844032 	add	r4, r4, #50	; 0x32
200016f0:	e1b0cb21 	lsrs	ip, r1, #22
200016f4:	0affff42 	beq	20001404 <__adddf3+0xf0>
200016f8:	e3a02003 	mov	r2, #3
200016fc:	e1b0c1ac 	lsrs	ip, ip, #3
20001700:	12822003 	addne	r2, r2, #3
20001704:	e1b0c1ac 	lsrs	ip, ip, #3
20001708:	12822003 	addne	r2, r2, #3
2000170c:	e08221ac 	add	r2, r2, ip, lsr #3
20001710:	e2623020 	rsb	r3, r2, #32
20001714:	e1a0c310 	lsl	ip, r0, r3
20001718:	e1a00230 	lsr	r0, r0, r2
2000171c:	e1800311 	orr	r0, r0, r1, lsl r3
20001720:	e1a01231 	lsr	r1, r1, r2
20001724:	e0844002 	add	r4, r4, r2
20001728:	eaffff35 	b	20001404 <__adddf3+0xf0>

2000172c <__aeabi_d2f>:
2000172c:	e1a02081 	lsl	r2, r1, #1
20001730:	e2523207 	subs	r3, r2, #1879048192	; 0x70000000
20001734:	2253c602 	subscs	ip, r3, #2097152	; 0x200000
20001738:	227cc57f 	rsbscs	ip, ip, #532676608	; 0x1fc00000
2000173c:	9a000006 	bls	2000175c <__aeabi_d2f+0x30>
20001740:	e201c102 	and	ip, r1, #-2147483648	; 0x80000000
20001744:	e1a02180 	lsl	r2, r0, #3
20001748:	e18c0ea0 	orr	r0, ip, r0, lsr #29
2000174c:	e3520102 	cmp	r2, #-2147483648	; 0x80000000
20001750:	e0a00103 	adc	r0, r0, r3, lsl #2
20001754:	03c00001 	biceq	r0, r0, #1
20001758:	e12fff1e 	bx	lr
2000175c:	e3110101 	tst	r1, #1073741824	; 0x40000000
20001760:	1a00000f 	bne	200017a4 <__aeabi_d2f+0x78>
20001764:	e293262e 	adds	r2, r3, #48234496	; 0x2e00000
20001768:	b2010102 	andlt	r0, r1, #-2147483648	; 0x80000000
2000176c:	b12fff1e 	bxlt	lr
20001770:	e3811601 	orr	r1, r1, #1048576	; 0x100000
20001774:	e1a02aa2 	lsr	r2, r2, #21
20001778:	e2622018 	rsb	r2, r2, #24
2000177c:	e262c020 	rsb	ip, r2, #32
20001780:	e1b03c10 	lsls	r3, r0, ip
20001784:	e1a00230 	lsr	r0, r0, r2
20001788:	13800001 	orrne	r0, r0, #1
2000178c:	e1a03581 	lsl	r3, r1, #11
20001790:	e1a035a3 	lsr	r3, r3, #11
20001794:	e1800c13 	orr	r0, r0, r3, lsl ip
20001798:	e1a03233 	lsr	r3, r3, r2
2000179c:	e1a03083 	lsl	r3, r3, #1
200017a0:	eaffffe6 	b	20001740 <__aeabi_d2f+0x14>
200017a4:	e1f03ac2 	mvns	r3, r2, asr #21
200017a8:	1a000003 	bne	200017bc <__aeabi_d2f+0x90>
200017ac:	e1903601 	orrs	r3, r0, r1, lsl #12
200017b0:	13a0047f 	movne	r0, #2130706432	; 0x7f000000
200017b4:	13800503 	orrne	r0, r0, #12582912	; 0xc00000
200017b8:	112fff1e 	bxne	lr
200017bc:	e2010102 	and	r0, r1, #-2147483648	; 0x80000000
200017c0:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
200017c4:	e3800502 	orr	r0, r0, #8388608	; 0x800000
200017c8:	e12fff1e 	bx	lr

200017cc <__aeabi_frsub>:
200017cc:	e2200102 	eor	r0, r0, #-2147483648	; 0x80000000
200017d0:	ea000000 	b	200017d8 <__addsf3>

200017d4 <__aeabi_fsub>:
200017d4:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000

200017d8 <__addsf3>:
200017d8:	e1b02080 	lsls	r2, r0, #1
200017dc:	11b03081 	lslsne	r3, r1, #1
200017e0:	11320003 	teqne	r2, r3
200017e4:	11f0cc42 	mvnsne	ip, r2, asr #24
200017e8:	11f0cc43 	mvnsne	ip, r3, asr #24
200017ec:	0a000047 	beq	20001910 <__addsf3+0x138>
200017f0:	e1a02c22 	lsr	r2, r2, #24
200017f4:	e0723c23 	rsbs	r3, r2, r3, lsr #24
200017f8:	c0822003 	addgt	r2, r2, r3
200017fc:	c0201001 	eorgt	r1, r0, r1
20001800:	c0210000 	eorgt	r0, r1, r0
20001804:	c0201001 	eorgt	r1, r0, r1
20001808:	b2633000 	rsblt	r3, r3, #0
2000180c:	e3530019 	cmp	r3, #25
20001810:	812fff1e 	bxhi	lr
20001814:	e3100102 	tst	r0, #-2147483648	; 0x80000000
20001818:	e3800502 	orr	r0, r0, #8388608	; 0x800000
2000181c:	e3c004ff 	bic	r0, r0, #-16777216	; 0xff000000
20001820:	12600000 	rsbne	r0, r0, #0
20001824:	e3110102 	tst	r1, #-2147483648	; 0x80000000
20001828:	e3811502 	orr	r1, r1, #8388608	; 0x800000
2000182c:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
20001830:	12611000 	rsbne	r1, r1, #0
20001834:	e1320003 	teq	r2, r3
20001838:	0a00002e 	beq	200018f8 <__addsf3+0x120>
2000183c:	e2422001 	sub	r2, r2, #1
20001840:	e0900351 	adds	r0, r0, r1, asr r3
20001844:	e2633020 	rsb	r3, r3, #32
20001848:	e1a01311 	lsl	r1, r1, r3
2000184c:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
20001850:	5a000001 	bpl	2000185c <__addsf3+0x84>
20001854:	e2711000 	rsbs	r1, r1, #0
20001858:	e2e00000 	rsc	r0, r0, #0
2000185c:	e3500502 	cmp	r0, #8388608	; 0x800000
20001860:	3a00000b 	bcc	20001894 <__addsf3+0xbc>
20001864:	e3500401 	cmp	r0, #16777216	; 0x1000000
20001868:	3a000004 	bcc	20001880 <__addsf3+0xa8>
2000186c:	e1b000a0 	lsrs	r0, r0, #1
20001870:	e1a01061 	rrx	r1, r1
20001874:	e2822001 	add	r2, r2, #1
20001878:	e35200fe 	cmp	r2, #254	; 0xfe
2000187c:	2a000038 	bcs	20001964 <__addsf3+0x18c>
20001880:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
20001884:	e0a00b82 	adc	r0, r0, r2, lsl #23
20001888:	03c00001 	biceq	r0, r0, #1
2000188c:	e1800003 	orr	r0, r0, r3
20001890:	e12fff1e 	bx	lr
20001894:	e1b01081 	lsls	r1, r1, #1
20001898:	e0a00000 	adc	r0, r0, r0
2000189c:	e2522001 	subs	r2, r2, #1
200018a0:	23500502 	cmpcs	r0, #8388608	; 0x800000
200018a4:	2afffff5 	bcs	20001880 <__addsf3+0xa8>
200018a8:	e1b0c620 	lsrs	ip, r0, #12
200018ac:	01a00600 	lsleq	r0, r0, #12
200018b0:	0242200c 	subeq	r2, r2, #12
200018b4:	e31008ff 	tst	r0, #16711680	; 0xff0000
200018b8:	01a00400 	lsleq	r0, r0, #8
200018bc:	02422008 	subeq	r2, r2, #8
200018c0:	e310060f 	tst	r0, #15728640	; 0xf00000
200018c4:	01a00200 	lsleq	r0, r0, #4
200018c8:	02422004 	subeq	r2, r2, #4
200018cc:	e3100503 	tst	r0, #12582912	; 0xc00000
200018d0:	01a00100 	lsleq	r0, r0, #2
200018d4:	02422002 	subeq	r2, r2, #2
200018d8:	e3500502 	cmp	r0, #8388608	; 0x800000
200018dc:	31a00080 	lslcc	r0, r0, #1
200018e0:	e2d22000 	sbcs	r2, r2, #0
200018e4:	a0800b82 	addge	r0, r0, r2, lsl #23
200018e8:	b2622000 	rsblt	r2, r2, #0
200018ec:	a1800003 	orrge	r0, r0, r3
200018f0:	b1830230 	orrlt	r0, r3, r0, lsr r2
200018f4:	e12fff1e 	bx	lr
200018f8:	e3320000 	teq	r2, #0
200018fc:	e2211502 	eor	r1, r1, #8388608	; 0x800000
20001900:	02200502 	eoreq	r0, r0, #8388608	; 0x800000
20001904:	02822001 	addeq	r2, r2, #1
20001908:	12433001 	subne	r3, r3, #1
2000190c:	eaffffca 	b	2000183c <__addsf3+0x64>
20001910:	e1a03081 	lsl	r3, r1, #1
20001914:	e1f0cc42 	mvns	ip, r2, asr #24
20001918:	11f0cc43 	mvnsne	ip, r3, asr #24
2000191c:	0a000013 	beq	20001970 <__addsf3+0x198>
20001920:	e1320003 	teq	r2, r3
20001924:	0a000002 	beq	20001934 <__addsf3+0x15c>
20001928:	e3320000 	teq	r2, #0
2000192c:	01a00001 	moveq	r0, r1
20001930:	e12fff1e 	bx	lr
20001934:	e1300001 	teq	r0, r1
20001938:	13a00000 	movne	r0, #0
2000193c:	112fff1e 	bxne	lr
20001940:	e31204ff 	tst	r2, #-16777216	; 0xff000000
20001944:	1a000002 	bne	20001954 <__addsf3+0x17c>
20001948:	e1b00080 	lsls	r0, r0, #1
2000194c:	23800102 	orrcs	r0, r0, #-2147483648	; 0x80000000
20001950:	e12fff1e 	bx	lr
20001954:	e2922402 	adds	r2, r2, #33554432	; 0x2000000
20001958:	32800502 	addcc	r0, r0, #8388608	; 0x800000
2000195c:	312fff1e 	bxcc	lr
20001960:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
20001964:	e383047f 	orr	r0, r3, #2130706432	; 0x7f000000
20001968:	e3800502 	orr	r0, r0, #8388608	; 0x800000
2000196c:	e12fff1e 	bx	lr
20001970:	e1f02c42 	mvns	r2, r2, asr #24
20001974:	11a00001 	movne	r0, r1
20001978:	01f03c43 	mvnseq	r3, r3, asr #24
2000197c:	11a01000 	movne	r1, r0
20001980:	e1b02480 	lsls	r2, r0, #9
20001984:	01b03481 	lslseq	r3, r1, #9
20001988:	01300001 	teqeq	r0, r1
2000198c:	13800501 	orrne	r0, r0, #4194304	; 0x400000
20001990:	e12fff1e 	bx	lr

20001994 <__aeabi_ui2f>:
20001994:	e3a03000 	mov	r3, #0
20001998:	ea000001 	b	200019a4 <__aeabi_i2f+0x8>

2000199c <__aeabi_i2f>:
2000199c:	e2103102 	ands	r3, r0, #-2147483648	; 0x80000000
200019a0:	42600000 	rsbmi	r0, r0, #0
200019a4:	e1b0c000 	movs	ip, r0
200019a8:	012fff1e 	bxeq	lr
200019ac:	e383344b 	orr	r3, r3, #1258291200	; 0x4b000000
200019b0:	e1a01000 	mov	r1, r0
200019b4:	e3a00000 	mov	r0, #0
200019b8:	ea00000f 	b	200019fc <__aeabi_l2f+0x30>

200019bc <__aeabi_ul2f>:
200019bc:	e1902001 	orrs	r2, r0, r1
200019c0:	012fff1e 	bxeq	lr
200019c4:	e3a03000 	mov	r3, #0
200019c8:	ea000005 	b	200019e4 <__aeabi_l2f+0x18>

200019cc <__aeabi_l2f>:
200019cc:	e1902001 	orrs	r2, r0, r1
200019d0:	012fff1e 	bxeq	lr
200019d4:	e2113102 	ands	r3, r1, #-2147483648	; 0x80000000
200019d8:	5a000001 	bpl	200019e4 <__aeabi_l2f+0x18>
200019dc:	e2700000 	rsbs	r0, r0, #0
200019e0:	e2e11000 	rsc	r1, r1, #0
200019e4:	e1b0c001 	movs	ip, r1
200019e8:	01a0c000 	moveq	ip, r0
200019ec:	01a01000 	moveq	r1, r0
200019f0:	03a00000 	moveq	r0, #0
200019f4:	e383345b 	orr	r3, r3, #1526726656	; 0x5b000000
200019f8:	02433201 	subeq	r3, r3, #268435456	; 0x10000000
200019fc:	e2433502 	sub	r3, r3, #8388608	; 0x800000
20001a00:	e3a02017 	mov	r2, #23
20001a04:	e35c0801 	cmp	ip, #65536	; 0x10000
20001a08:	21a0c82c 	lsrcs	ip, ip, #16
20001a0c:	22422010 	subcs	r2, r2, #16
20001a10:	e35c0c01 	cmp	ip, #256	; 0x100
20001a14:	21a0c42c 	lsrcs	ip, ip, #8
20001a18:	22422008 	subcs	r2, r2, #8
20001a1c:	e35c0010 	cmp	ip, #16
20001a20:	21a0c22c 	lsrcs	ip, ip, #4
20001a24:	22422004 	subcs	r2, r2, #4
20001a28:	e35c0004 	cmp	ip, #4
20001a2c:	22422002 	subcs	r2, r2, #2
20001a30:	304220ac 	subcc	r2, r2, ip, lsr #1
20001a34:	e05221ac 	subs	r2, r2, ip, lsr #3
20001a38:	e0433b82 	sub	r3, r3, r2, lsl #23
20001a3c:	ba000006 	blt	20001a5c <__aeabi_l2f+0x90>
20001a40:	e0833211 	add	r3, r3, r1, lsl r2
20001a44:	e1a0c210 	lsl	ip, r0, r2
20001a48:	e2622020 	rsb	r2, r2, #32
20001a4c:	e35c0102 	cmp	ip, #-2147483648	; 0x80000000
20001a50:	e0a30230 	adc	r0, r3, r0, lsr r2
20001a54:	03c00001 	biceq	r0, r0, #1
20001a58:	e12fff1e 	bx	lr
20001a5c:	e2822020 	add	r2, r2, #32
20001a60:	e1a0c211 	lsl	ip, r1, r2
20001a64:	e2622020 	rsb	r2, r2, #32
20001a68:	e190008c 	orrs	r0, r0, ip, lsl #1
20001a6c:	e0a30231 	adc	r0, r3, r1, lsr r2
20001a70:	01c00fac 	biceq	r0, r0, ip, lsr #31
20001a74:	e12fff1e 	bx	lr

20001a78 <__aeabi_fmul>:
20001a78:	e3a0c0ff 	mov	ip, #255	; 0xff
20001a7c:	e01c2ba0 	ands	r2, ip, r0, lsr #23
20001a80:	101c3ba1 	andsne	r3, ip, r1, lsr #23
20001a84:	1132000c 	teqne	r2, ip
20001a88:	1133000c 	teqne	r3, ip
20001a8c:	0a00003e 	beq	20001b8c <__aeabi_fmul+0x114>
20001a90:	e0822003 	add	r2, r2, r3
20001a94:	e020c001 	eor	ip, r0, r1
20001a98:	e1b00480 	lsls	r0, r0, #9
20001a9c:	11b01481 	lslsne	r1, r1, #9
20001aa0:	0a000010 	beq	20001ae8 <__aeabi_fmul+0x70>
20001aa4:	e3a03302 	mov	r3, #134217728	; 0x8000000
20001aa8:	e18302a0 	orr	r0, r3, r0, lsr #5
20001aac:	e18312a1 	orr	r1, r3, r1, lsr #5
20001ab0:	e0813190 	umull	r3, r1, r0, r1
20001ab4:	e20c0102 	and	r0, ip, #-2147483648	; 0x80000000
20001ab8:	e3510502 	cmp	r1, #8388608	; 0x800000
20001abc:	31a01081 	lslcc	r1, r1, #1
20001ac0:	31811fa3 	orrcc	r1, r1, r3, lsr #31
20001ac4:	31a03083 	lslcc	r3, r3, #1
20001ac8:	e1800001 	orr	r0, r0, r1
20001acc:	e2c2207f 	sbc	r2, r2, #127	; 0x7f
20001ad0:	e35200fd 	cmp	r2, #253	; 0xfd
20001ad4:	8a00000f 	bhi	20001b18 <__aeabi_fmul+0xa0>
20001ad8:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
20001adc:	e0a00b82 	adc	r0, r0, r2, lsl #23
20001ae0:	03c00001 	biceq	r0, r0, #1
20001ae4:	e12fff1e 	bx	lr
20001ae8:	e3300000 	teq	r0, #0
20001aec:	e20cc102 	and	ip, ip, #-2147483648	; 0x80000000
20001af0:	01a01481 	lsleq	r1, r1, #9
20001af4:	e18c04a0 	orr	r0, ip, r0, lsr #9
20001af8:	e18004a1 	orr	r0, r0, r1, lsr #9
20001afc:	e252207f 	subs	r2, r2, #127	; 0x7f
20001b00:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
20001b04:	c1800b82 	orrgt	r0, r0, r2, lsl #23
20001b08:	c12fff1e 	bxgt	lr
20001b0c:	e3800502 	orr	r0, r0, #8388608	; 0x800000
20001b10:	e3a03000 	mov	r3, #0
20001b14:	e2522001 	subs	r2, r2, #1
20001b18:	ca000035 	bgt	20001bf4 <__aeabi_fmul+0x17c>
20001b1c:	e3720019 	cmn	r2, #25
20001b20:	d2000102 	andle	r0, r0, #-2147483648	; 0x80000000
20001b24:	d12fff1e 	bxle	lr
20001b28:	e2622000 	rsb	r2, r2, #0
20001b2c:	e1b01080 	lsls	r1, r0, #1
20001b30:	e1a01231 	lsr	r1, r1, r2
20001b34:	e2622020 	rsb	r2, r2, #32
20001b38:	e1a0c210 	lsl	ip, r0, r2
20001b3c:	e1b00061 	rrxs	r0, r1
20001b40:	e2a00000 	adc	r0, r0, #0
20001b44:	e193308c 	orrs	r3, r3, ip, lsl #1
20001b48:	01c00fac 	biceq	r0, r0, ip, lsr #31
20001b4c:	e12fff1e 	bx	lr
20001b50:	e3320000 	teq	r2, #0
20001b54:	e200c102 	and	ip, r0, #-2147483648	; 0x80000000
20001b58:	01a00080 	lsleq	r0, r0, #1
20001b5c:	03100502 	tsteq	r0, #8388608	; 0x800000
20001b60:	02422001 	subeq	r2, r2, #1
20001b64:	0afffffb 	beq	20001b58 <__aeabi_fmul+0xe0>
20001b68:	e180000c 	orr	r0, r0, ip
20001b6c:	e3330000 	teq	r3, #0
20001b70:	e201c102 	and	ip, r1, #-2147483648	; 0x80000000
20001b74:	01a01081 	lsleq	r1, r1, #1
20001b78:	03110502 	tsteq	r1, #8388608	; 0x800000
20001b7c:	02433001 	subeq	r3, r3, #1
20001b80:	0afffffb 	beq	20001b74 <__aeabi_fmul+0xfc>
20001b84:	e181100c 	orr	r1, r1, ip
20001b88:	eaffffc0 	b	20001a90 <__aeabi_fmul+0x18>
20001b8c:	e00c3ba1 	and	r3, ip, r1, lsr #23
20001b90:	e132000c 	teq	r2, ip
20001b94:	1133000c 	teqne	r3, ip
20001b98:	0a000005 	beq	20001bb4 <__aeabi_fmul+0x13c>
20001b9c:	e3d0c102 	bics	ip, r0, #-2147483648	; 0x80000000
20001ba0:	13d1c102 	bicsne	ip, r1, #-2147483648	; 0x80000000
20001ba4:	1affffe9 	bne	20001b50 <__aeabi_fmul+0xd8>
20001ba8:	e0200001 	eor	r0, r0, r1
20001bac:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
20001bb0:	e12fff1e 	bx	lr
20001bb4:	e3300000 	teq	r0, #0
20001bb8:	13300102 	teqne	r0, #-2147483648	; 0x80000000
20001bbc:	01a00001 	moveq	r0, r1
20001bc0:	13310000 	teqne	r1, #0
20001bc4:	13310102 	teqne	r1, #-2147483648	; 0x80000000
20001bc8:	0a00000d 	beq	20001c04 <__aeabi_fmul+0x18c>
20001bcc:	e132000c 	teq	r2, ip
20001bd0:	1a000001 	bne	20001bdc <__aeabi_fmul+0x164>
20001bd4:	e1b02480 	lsls	r2, r0, #9
20001bd8:	1a000009 	bne	20001c04 <__aeabi_fmul+0x18c>
20001bdc:	e133000c 	teq	r3, ip
20001be0:	1a000002 	bne	20001bf0 <__aeabi_fmul+0x178>
20001be4:	e1b03481 	lsls	r3, r1, #9
20001be8:	11a00001 	movne	r0, r1
20001bec:	1a000004 	bne	20001c04 <__aeabi_fmul+0x18c>
20001bf0:	e0200001 	eor	r0, r0, r1
20001bf4:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
20001bf8:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
20001bfc:	e3800502 	orr	r0, r0, #8388608	; 0x800000
20001c00:	e12fff1e 	bx	lr
20001c04:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
20001c08:	e3800503 	orr	r0, r0, #12582912	; 0xc00000
20001c0c:	e12fff1e 	bx	lr

20001c10 <__aeabi_fdiv>:
20001c10:	e3a0c0ff 	mov	ip, #255	; 0xff
20001c14:	e01c2ba0 	ands	r2, ip, r0, lsr #23
20001c18:	101c3ba1 	andsne	r3, ip, r1, lsr #23
20001c1c:	1132000c 	teqne	r2, ip
20001c20:	1133000c 	teqne	r3, ip
20001c24:	0a00003a 	beq	20001d14 <__aeabi_fdiv+0x104>
20001c28:	e0422003 	sub	r2, r2, r3
20001c2c:	e020c001 	eor	ip, r0, r1
20001c30:	e1b01481 	lsls	r1, r1, #9
20001c34:	e1a00480 	lsl	r0, r0, #9
20001c38:	0a00001c 	beq	20001cb0 <__aeabi_fdiv+0xa0>
20001c3c:	e3a03201 	mov	r3, #268435456	; 0x10000000
20001c40:	e1831221 	orr	r1, r3, r1, lsr #4
20001c44:	e1833220 	orr	r3, r3, r0, lsr #4
20001c48:	e20c0102 	and	r0, ip, #-2147483648	; 0x80000000
20001c4c:	e1530001 	cmp	r3, r1
20001c50:	31a03083 	lslcc	r3, r3, #1
20001c54:	e2a2207d 	adc	r2, r2, #125	; 0x7d
20001c58:	e3a0c502 	mov	ip, #8388608	; 0x800000
20001c5c:	e1530001 	cmp	r3, r1
20001c60:	20433001 	subcs	r3, r3, r1
20001c64:	2180000c 	orrcs	r0, r0, ip
20001c68:	e15300a1 	cmp	r3, r1, lsr #1
20001c6c:	204330a1 	subcs	r3, r3, r1, lsr #1
20001c70:	218000ac 	orrcs	r0, r0, ip, lsr #1
20001c74:	e1530121 	cmp	r3, r1, lsr #2
20001c78:	20433121 	subcs	r3, r3, r1, lsr #2
20001c7c:	2180012c 	orrcs	r0, r0, ip, lsr #2
20001c80:	e15301a1 	cmp	r3, r1, lsr #3
20001c84:	204331a1 	subcs	r3, r3, r1, lsr #3
20001c88:	218001ac 	orrcs	r0, r0, ip, lsr #3
20001c8c:	e1b03203 	lsls	r3, r3, #4
20001c90:	11b0c22c 	lsrsne	ip, ip, #4
20001c94:	1afffff0 	bne	20001c5c <__aeabi_fdiv+0x4c>
20001c98:	e35200fd 	cmp	r2, #253	; 0xfd
20001c9c:	8affff9d 	bhi	20001b18 <__aeabi_fmul+0xa0>
20001ca0:	e1530001 	cmp	r3, r1
20001ca4:	e0a00b82 	adc	r0, r0, r2, lsl #23
20001ca8:	03c00001 	biceq	r0, r0, #1
20001cac:	e12fff1e 	bx	lr
20001cb0:	e20cc102 	and	ip, ip, #-2147483648	; 0x80000000
20001cb4:	e18c04a0 	orr	r0, ip, r0, lsr #9
20001cb8:	e292207f 	adds	r2, r2, #127	; 0x7f
20001cbc:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
20001cc0:	c1800b82 	orrgt	r0, r0, r2, lsl #23
20001cc4:	c12fff1e 	bxgt	lr
20001cc8:	e3800502 	orr	r0, r0, #8388608	; 0x800000
20001ccc:	e3a03000 	mov	r3, #0
20001cd0:	e2522001 	subs	r2, r2, #1
20001cd4:	eaffff8f 	b	20001b18 <__aeabi_fmul+0xa0>
20001cd8:	e3320000 	teq	r2, #0
20001cdc:	e200c102 	and	ip, r0, #-2147483648	; 0x80000000
20001ce0:	01a00080 	lsleq	r0, r0, #1
20001ce4:	03100502 	tsteq	r0, #8388608	; 0x800000
20001ce8:	02422001 	subeq	r2, r2, #1
20001cec:	0afffffb 	beq	20001ce0 <__aeabi_fdiv+0xd0>
20001cf0:	e180000c 	orr	r0, r0, ip
20001cf4:	e3330000 	teq	r3, #0
20001cf8:	e201c102 	and	ip, r1, #-2147483648	; 0x80000000
20001cfc:	01a01081 	lsleq	r1, r1, #1
20001d00:	03110502 	tsteq	r1, #8388608	; 0x800000
20001d04:	02433001 	subeq	r3, r3, #1
20001d08:	0afffffb 	beq	20001cfc <__aeabi_fdiv+0xec>
20001d0c:	e181100c 	orr	r1, r1, ip
20001d10:	eaffffc4 	b	20001c28 <__aeabi_fdiv+0x18>
20001d14:	e00c3ba1 	and	r3, ip, r1, lsr #23
20001d18:	e132000c 	teq	r2, ip
20001d1c:	1a000005 	bne	20001d38 <__aeabi_fdiv+0x128>
20001d20:	e1b02480 	lsls	r2, r0, #9
20001d24:	1affffb6 	bne	20001c04 <__aeabi_fmul+0x18c>
20001d28:	e133000c 	teq	r3, ip
20001d2c:	1affffaf 	bne	20001bf0 <__aeabi_fmul+0x178>
20001d30:	e1a00001 	mov	r0, r1
20001d34:	eaffffb2 	b	20001c04 <__aeabi_fmul+0x18c>
20001d38:	e133000c 	teq	r3, ip
20001d3c:	1a000003 	bne	20001d50 <__aeabi_fdiv+0x140>
20001d40:	e1b03481 	lsls	r3, r1, #9
20001d44:	0affff97 	beq	20001ba8 <__aeabi_fmul+0x130>
20001d48:	e1a00001 	mov	r0, r1
20001d4c:	eaffffac 	b	20001c04 <__aeabi_fmul+0x18c>
20001d50:	e3d0c102 	bics	ip, r0, #-2147483648	; 0x80000000
20001d54:	13d1c102 	bicsne	ip, r1, #-2147483648	; 0x80000000
20001d58:	1affffde 	bne	20001cd8 <__aeabi_fdiv+0xc8>
20001d5c:	e3d02102 	bics	r2, r0, #-2147483648	; 0x80000000
20001d60:	1affffa2 	bne	20001bf0 <__aeabi_fmul+0x178>
20001d64:	e3d13102 	bics	r3, r1, #-2147483648	; 0x80000000
20001d68:	1affff8e 	bne	20001ba8 <__aeabi_fmul+0x130>
20001d6c:	eaffffa4 	b	20001c04 <__aeabi_fmul+0x18c>

20001d70 <__gesf2>:
20001d70:	e3e0c000 	mvn	ip, #0
20001d74:	ea000002 	b	20001d84 <__cmpsf2+0x4>

20001d78 <__lesf2>:
20001d78:	e3a0c001 	mov	ip, #1
20001d7c:	ea000000 	b	20001d84 <__cmpsf2+0x4>

20001d80 <__cmpsf2>:
20001d80:	e3a0c001 	mov	ip, #1
20001d84:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
20001d88:	e1a02080 	lsl	r2, r0, #1
20001d8c:	e1a03081 	lsl	r3, r1, #1
20001d90:	e1f0cc42 	mvns	ip, r2, asr #24
20001d94:	11f0cc43 	mvnsne	ip, r3, asr #24
20001d98:	0a000007 	beq	20001dbc <__cmpsf2+0x3c>
20001d9c:	e28dd004 	add	sp, sp, #4
20001da0:	e192c0a3 	orrs	ip, r2, r3, lsr #1
20001da4:	11300001 	teqne	r0, r1
20001da8:	50520003 	subspl	r0, r2, r3
20001dac:	81a00fc1 	asrhi	r0, r1, #31
20001db0:	31e00fc1 	mvncc	r0, r1, asr #31
20001db4:	13800001 	orrne	r0, r0, #1
20001db8:	e12fff1e 	bx	lr
20001dbc:	e1f0cc42 	mvns	ip, r2, asr #24
20001dc0:	1a000001 	bne	20001dcc <__cmpsf2+0x4c>
20001dc4:	e1b0c480 	lsls	ip, r0, #9
20001dc8:	1a000003 	bne	20001ddc <__cmpsf2+0x5c>
20001dcc:	e1f0cc43 	mvns	ip, r3, asr #24
20001dd0:	1afffff1 	bne	20001d9c <__cmpsf2+0x1c>
20001dd4:	e1b0c481 	lsls	ip, r1, #9
20001dd8:	0affffef 	beq	20001d9c <__cmpsf2+0x1c>
20001ddc:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
20001de0:	e12fff1e 	bx	lr

20001de4 <__aeabi_cfrcmple>:
20001de4:	e1a0c000 	mov	ip, r0
20001de8:	e1a00001 	mov	r0, r1
20001dec:	e1a0100c 	mov	r1, ip
20001df0:	eaffffff 	b	20001df4 <__aeabi_cfcmpeq>

20001df4 <__aeabi_cfcmpeq>:
20001df4:	e92d400f 	push	{r0, r1, r2, r3, lr}
20001df8:	ebffffe0 	bl	20001d80 <__cmpsf2>
20001dfc:	e3500000 	cmp	r0, #0
20001e00:	43700000 	cmnmi	r0, #0
20001e04:	e8bd400f 	pop	{r0, r1, r2, r3, lr}
20001e08:	e12fff1e 	bx	lr

20001e0c <__aeabi_fcmpeq>:
20001e0c:	e52de008 	str	lr, [sp, #-8]!
20001e10:	ebfffff7 	bl	20001df4 <__aeabi_cfcmpeq>
20001e14:	03a00001 	moveq	r0, #1
20001e18:	13a00000 	movne	r0, #0
20001e1c:	e49de008 	ldr	lr, [sp], #8
20001e20:	e12fff1e 	bx	lr

20001e24 <__aeabi_fcmplt>:
20001e24:	e52de008 	str	lr, [sp, #-8]!
20001e28:	ebfffff1 	bl	20001df4 <__aeabi_cfcmpeq>
20001e2c:	33a00001 	movcc	r0, #1
20001e30:	23a00000 	movcs	r0, #0
20001e34:	e49de008 	ldr	lr, [sp], #8
20001e38:	e12fff1e 	bx	lr

20001e3c <__aeabi_fcmple>:
20001e3c:	e52de008 	str	lr, [sp, #-8]!
20001e40:	ebffffeb 	bl	20001df4 <__aeabi_cfcmpeq>
20001e44:	93a00001 	movls	r0, #1
20001e48:	83a00000 	movhi	r0, #0
20001e4c:	e49de008 	ldr	lr, [sp], #8
20001e50:	e12fff1e 	bx	lr

20001e54 <__aeabi_fcmpge>:
20001e54:	e52de008 	str	lr, [sp, #-8]!
20001e58:	ebffffe1 	bl	20001de4 <__aeabi_cfrcmple>
20001e5c:	93a00001 	movls	r0, #1
20001e60:	83a00000 	movhi	r0, #0
20001e64:	e49de008 	ldr	lr, [sp], #8
20001e68:	e12fff1e 	bx	lr

20001e6c <__aeabi_fcmpgt>:
20001e6c:	e52de008 	str	lr, [sp, #-8]!
20001e70:	ebffffdb 	bl	20001de4 <__aeabi_cfrcmple>
20001e74:	33a00001 	movcc	r0, #1
20001e78:	23a00000 	movcs	r0, #0
20001e7c:	e49de008 	ldr	lr, [sp], #8
20001e80:	e12fff1e 	bx	lr

20001e84 <__aeabi_f2uiz>:
20001e84:	e1b02080 	lsls	r2, r0, #1
20001e88:	2a000008 	bcs	20001eb0 <__aeabi_f2uiz+0x2c>
20001e8c:	e352047f 	cmp	r2, #2130706432	; 0x7f000000
20001e90:	3a000006 	bcc	20001eb0 <__aeabi_f2uiz+0x2c>
20001e94:	e3a0309e 	mov	r3, #158	; 0x9e
20001e98:	e0532c22 	subs	r2, r3, r2, lsr #24
20001e9c:	4a000005 	bmi	20001eb8 <__aeabi_f2uiz+0x34>
20001ea0:	e1a03400 	lsl	r3, r0, #8
20001ea4:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
20001ea8:	e1a00233 	lsr	r0, r3, r2
20001eac:	e12fff1e 	bx	lr
20001eb0:	e3a00000 	mov	r0, #0
20001eb4:	e12fff1e 	bx	lr
20001eb8:	e3720061 	cmn	r2, #97	; 0x61
20001ebc:	1a000001 	bne	20001ec8 <__aeabi_f2uiz+0x44>
20001ec0:	e1b02480 	lsls	r2, r0, #9
20001ec4:	1a000001 	bne	20001ed0 <__aeabi_f2uiz+0x4c>
20001ec8:	e3e00000 	mvn	r0, #0
20001ecc:	e12fff1e 	bx	lr
20001ed0:	e3a00000 	mov	r0, #0
20001ed4:	e12fff1e 	bx	lr

20001ed8 <buffer>:
	...

200022d8 <boids>:
	...

20002310 <buffer>:
	...
20002710:	41000000 	mrsmi	r0, (UNDEF: 0)
20002714:	41f80000 	mvnsmi	r0, r0
	...
20002720:	20000069 	andcs	r0, r0, r9, rrx
20002724:	200000a1 	andcs	r0, r0, r1, lsr #1
20002728:	200000e1 	andcs	r0, r0, r1, ror #1
2000272c:	0a030201 	beq	200c2f38 <buffer+0xc0c28>
20002730:	0b060504 	bleq	20183b48 <buffer+0x181838>
20002734:	0c090807 	stceq	8, cr0, [r9], {7}
20002738:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20002708 <buffer+0x3f8>
2000273c:	4f5b063f 	svcmi	0x005b063f
20002740:	077d6d66 	ldrbeq	r6, [sp, -r6, ror #26]!
20002744:	7c776f7f 	ldclvc	15, cr6, [r7], #-508	; 0xfffffe04
20002748:	71795e39 	cmnvc	r9, r9, lsr lr

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	000003db 	ldrdeq	r0, [r0], -fp
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	0000006f 	andeq	r0, r0, pc, rrx
  10:	0001020c 	andeq	r0, r1, ip, lsl #4
  14:	0001f000 	andeq	pc, r1, r0
	...
  24:	01720200 	cmneq	r2, r0, lsl #4
  28:	01020000 	mrseq	r0, (UNDEF: 2)
  2c:	00003117 	andeq	r3, r0, r7, lsl r1
  30:	08010300 	stmdaeq	r1, {r8, r9}
  34:	00000052 	andeq	r0, r0, r2, asr r0
  38:	00002504 	andeq	r2, r0, r4, lsl #10
  3c:	00004e00 	andeq	r4, r0, r0, lsl #28
  40:	004e0500 	subeq	r0, lr, r0, lsl #10
  44:	05070000 	streq	r0, [r7, #-0]
  48:	0000004e 	andeq	r0, r0, lr, asr #32
  4c:	0403007f 	streq	r0, [r3], #-127	; 0xffffff81
  50:	00016507 	andeq	r6, r1, r7, lsl #10
  54:	03c50600 	biceq	r0, r5, #0, 12
  58:	02020000 	andeq	r0, r2, #0
  5c:	00003810 	andeq	r3, r0, r0, lsl r8
  60:	d8030500 	stmdale	r3, {r8, sl}
  64:	0720001e 			; <UNDEFINED> instruction: 0x0720001e
  68:	000001b7 			; <UNDEFINED> instruction: 0x000001b7
  6c:	1014011c 	andsne	r0, r4, ip, lsl r1
  70:	000000cc 	andeq	r0, r0, ip, asr #1
  74:	01007808 	tsteq	r0, r8, lsl #16
  78:	00cc0815 	sbceq	r0, ip, r5, lsl r8
  7c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
  80:	15010079 	strne	r0, [r1, #-121]	; 0xffffff87
  84:	0000cc0b 	andeq	ip, r0, fp, lsl #24
  88:	c5090400 	strgt	r0, [r9, #-1024]	; 0xfffffc00
  8c:	01000001 	tsteq	r0, r1
  90:	00cc0816 	sbceq	r0, ip, r6, lsl r8
  94:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
  98:	00000232 	andeq	r0, r0, r2, lsr r2
  9c:	cc0e1601 	stcgt	6, cr1, [lr], {1}
  a0:	0c000000 	stceq	0, cr0, [r0], {-0}
  a4:	00006009 	andeq	r6, r0, r9
  a8:	0d180100 	ldfeqs	f0, [r8, #-0]
  ac:	000000e4 	andeq	r0, r0, r4, ror #1
  b0:	00480910 	subeq	r0, r8, r0, lsl r9
  b4:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
  b8:	0000e40d 	andeq	lr, r0, sp, lsl #8
  bc:	08091400 	stmdaeq	r9, {sl, ip}
  c0:	01000000 	mrseq	r0, (UNDEF: 0)
  c4:	00e40d1a 	rsceq	r0, r4, sl, lsl sp
  c8:	00180000 	andseq	r0, r8, r0
  cc:	32040403 	andcc	r0, r4, #50331648	; 0x3000000
  d0:	0a000000 	beq	d8 <startup-0x1fffff28>
  d4:	000000de 	ldrdeq	r0, [r0], -lr
  d8:	0000de0b 	andeq	sp, r0, fp, lsl #28
  dc:	040c0000 	streq	r0, [ip], #-0
  e0:	00000067 	andeq	r0, r0, r7, rrx
  e4:	00d3040c 	sbcseq	r0, r3, ip, lsl #8
  e8:	87020000 	strhi	r0, [r2, -r0]
  ec:	01000001 	tsteq	r0, r1
  f0:	0067031b 	rsbeq	r0, r7, fp, lsl r3
  f4:	86020000 	strhi	r0, [r2], -r0
  f8:	01000001 	tsteq	r0, r1
  fc:	00de0a1b 	sbcseq	r0, lr, fp, lsl sl
 100:	ea040000 	b	100108 <startup-0x1feffef8>
 104:	12000000 	andne	r0, r0, #0
 108:	05000001 	streq	r0, [r0, #-1]
 10c:	0000004e 	andeq	r0, r0, lr, asr #32
 110:	fc060001 	stc2	0, cr0, [r6], {1}
 114:	01000000 	mrseq	r0, (UNDEF: 0)
 118:	01020d24 	tsteq	r2, r4, lsr #26
 11c:	03050000 	movweq	r0, #20480	; 0x5000
 120:	200022d8 	ldrdcs	r2, [r0], -r8
 124:	00014e0d 	andeq	r4, r1, sp, lsl #28
 128:	06710100 	ldrbteq	r0, [r1], -r0, lsl #2
 12c:	200003dc 	ldrdcs	r0, [r0], -ip
 130:	00000094 	muleq	r0, r4, r0
 134:	019b9c01 	orrseq	r9, fp, r1, lsl #24
 138:	650e0000 	strvs	r0, [lr, #-0]
 13c:	01000000 	mrseq	r0, (UNDEF: 0)
 140:	019b0528 	orrseq	r0, fp, r8, lsr #10
 144:	014c0000 	mrseq	r0, (UNDEF: 76)
 148:	000f0000 	andeq	r0, pc, r0
 14c:	0003f810 	andeq	pc, r3, r0, lsl r8	; <UNPREDICTABLE>
 150:	00007220 	andeq	r7, r0, r0, lsr #4
 154:	01ca0e00 	biceq	r0, sl, r0, lsl #28
 158:	87010000 	strhi	r0, [r1, -r0]
 15c:	00019b03 	andeq	r9, r1, r3, lsl #22
 160:	00016700 	andeq	r6, r1, r0, lsl #14
 164:	11000f00 	tstne	r0, r0, lsl #30
 168:	200003f8 	strdcs	r0, [r0], -r8
 16c:	00000012 	andeq	r0, r0, r2, lsl r0
 170:	00000182 	andeq	r0, r0, r2, lsl #3
 174:	01006912 	tsteq	r0, r2, lsl r9
 178:	019b127e 	orrseq	r1, fp, lr, ror r2
 17c:	91020000 	mrsls	r0, (UNDEF: 2)
 180:	0a100074 	beq	400358 <startup-0x1fbffca8>
 184:	5a200004 	bpl	80019c <startup-0x1f7ffe64>
 188:	12000000 	andne	r0, r0, #0
 18c:	81010069 	tsthi	r1, r9, rrx
 190:	00019b12 	andeq	r9, r1, r2, lsl fp
 194:	70910200 	addsvc	r0, r1, r0, lsl #4
 198:	13000000 	movwne	r0, #0
 19c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 1a0:	7a140074 	bvc	500378 <startup-0x1faffc88>
 1a4:	01000001 	tsteq	r0, r1
 1a8:	03940661 	orrseq	r0, r4, #101711872	; 0x6100000
 1ac:	00482000 	subeq	r2, r8, r0
 1b0:	9c010000 	stcls	0, cr0, [r1], {-0}
 1b4:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 1b8:	00039a10 	andeq	r9, r3, r0, lsl sl
 1bc:	00002e20 	andeq	r2, r0, r0, lsr #28
 1c0:	00691200 	rsbeq	r1, r9, r0, lsl #4
 1c4:	9b0e6201 	blls	3989d0 <startup-0x1fc67630>
 1c8:	02000001 	andeq	r0, r0, #1
 1cc:	00006c91 	muleq	r0, r1, ip
 1d0:	0000080d 	andeq	r0, r0, sp, lsl #16
 1d4:	06300100 	ldrteq	r0, [r0], -r0, lsl #2
 1d8:	200000e0 	andcs	r0, r0, r0, ror #1
 1dc:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
 1e0:	031d9c01 	tsteq	sp, #256	; 0x100
 1e4:	60150000 	andsvs	r0, r5, r0
 1e8:	01000001 	tsteq	r0, r1
 1ec:	00f61630 	rscseq	r1, r6, r0, lsr r6
 1f0:	91030000 	mrsls	r0, (UNDEF: 3)
 1f4:	ab067fa4 	blge	1a008c <startup-0x1fe5ff74>
 1f8:	01000001 	tsteq	r0, r1
 1fc:	019b0931 	orrseq	r0, fp, r1, lsr r9
 200:	91020000 	mrsls	r0, (UNDEF: 2)
 204:	00eb066c 	rsceq	r0, fp, ip, ror #12
 208:	32010000 	andcc	r0, r1, #0
 20c:	0000cc0b 	andeq	ip, r0, fp, lsl #24
 210:	68910200 	ldmvs	r1, {r9}
 214:	00022a06 	andeq	r2, r2, r6, lsl #20
 218:	18320100 	ldmdane	r2!, {r8}
 21c:	000000cc 	andeq	r0, r0, ip, asr #1
 220:	06649102 	strbteq	r9, [r4], -r2, lsl #2
 224:	00000146 	andeq	r0, r0, r6, asr #2
 228:	cc0b3301 	stcgt	3, cr3, [fp], {1}
 22c:	02000000 	andeq	r0, r0, #0
 230:	8c066091 	stchi	0, cr6, [r6], {145}	; 0x91
 234:	01000001 	tsteq	r0, r1
 238:	00cc1833 	sbceq	r1, ip, r3, lsr r8
 23c:	91020000 	mrsls	r0, (UNDEF: 2)
 240:	01530650 	cmpeq	r3, r0, asr r6
 244:	34010000 	strcc	r0, [r1], #-0
 248:	0000cc0b 	andeq	ip, r0, fp, lsl #24
 24c:	5c910200 	lfmpl	f0, 4, [r1], {0}
 250:	00002506 	andeq	r2, r0, r6, lsl #10
 254:	1d340100 	ldfnes	f0, [r4, #-0]
 258:	000000cc 	andeq	r0, r0, ip, asr #1
 25c:	06589102 	ldrbeq	r9, [r8], -r2, lsl #2
 260:	000001bd 			; <UNDEFINED> instruction: 0x000001bd
 264:	cc0b4f01 	stcgt	15, cr4, [fp], {1}
 268:	02000000 	andeq	r0, r0, #0
 26c:	1d064c91 	stcne	12, cr4, [r6, #-580]	; 0xfffffdbc
 270:	01000000 	mrseq	r0, (UNDEF: 0)
 274:	00cc0b50 	sbceq	r0, ip, r0, asr fp
 278:	91020000 	mrsls	r0, (UNDEF: 2)
 27c:	00120648 	andseq	r0, r2, r8, asr #12
 280:	52010000 	andpl	r0, r1, #0
 284:	0000cc0b 	andeq	ip, r0, fp, lsl #24
 288:	44910200 	ldrmi	r0, [r1], #512	; 0x200
 28c:	00019406 	andeq	r9, r1, r6, lsl #8
 290:	0b530100 	bleq	14c0698 <startup-0x1eb3f968>
 294:	000000cc 	andeq	r0, r0, ip, asr #1
 298:	06409102 	strbeq	r9, [r0], -r2, lsl #2
 29c:	000001d6 	ldrdeq	r0, [r0], -r6
 2a0:	cc0b5601 	stcgt	6, cr5, [fp], {1}
 2a4:	03000000 	movweq	r0, #0
 2a8:	067fbc91 			; <UNDEFINED> instruction: 0x067fbc91
 2ac:	00000237 	andeq	r0, r0, r7, lsr r2
 2b0:	cc0b5701 	stcgt	7, cr5, [fp], {1}
 2b4:	03000000 	movweq	r0, #0
 2b8:	067fb891 			; <UNDEFINED> instruction: 0x067fb891
 2bc:	000001e4 	andeq	r0, r0, r4, ror #3
 2c0:	cc0b5901 			; <UNDEFINED> instruction: 0xcc0b5901
 2c4:	03000000 	movweq	r0, #0
 2c8:	067fb491 			; <UNDEFINED> instruction: 0x067fb491
 2cc:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
 2d0:	cc0b5a01 			; <UNDEFINED> instruction: 0xcc0b5a01
 2d4:	03000000 	movweq	r0, #0
 2d8:	107fb091 			; <UNDEFINED> instruction: 0x107fb091
 2dc:	20000104 	andcs	r0, r0, r4, lsl #2
 2e0:	000000e6 	andeq	r0, r0, r6, ror #1
 2e4:	01006912 	tsteq	r0, r2, lsl r9
 2e8:	019b0e36 	orrseq	r0, fp, r6, lsr lr
 2ec:	91020000 	mrsls	r0, (UNDEF: 2)
 2f0:	010a1054 	qaddeq	r1, r4, sl
 2f4:	00d42000 	sbcseq	r2, r4, r0
 2f8:	de060000 	cdple	0, 0, cr0, cr6, cr0, {0}
 2fc:	01000001 	tsteq	r0, r1
 300:	00f60f37 	rscseq	r0, r6, r7, lsr pc
 304:	91030000 	mrsls	r0, (UNDEF: 3)
 308:	f3067fac 	vpmax.f32	d7, d22, d28
 30c:	01000000 	mrseq	r0, (UNDEF: 0)
 310:	00cc0f38 	sbceq	r0, ip, r8, lsr pc
 314:	91030000 	mrsls	r0, (UNDEF: 3)
 318:	00007fa8 	andeq	r7, r0, r8, lsr #31
 31c:	00480d00 	subeq	r0, r8, r0, lsl #26
 320:	2b010000 	blcs	40328 <startup-0x1ffbfcd8>
 324:	0000a006 	andeq	sl, r0, r6
 328:	00004020 	andeq	r4, r0, r0, lsr #32
 32c:	439c0100 	orrsmi	r0, ip, #0, 2
 330:	15000003 	strne	r0, [r0, #-3]
 334:	00000160 	andeq	r0, r0, r0, ror #2
 338:	f6162b01 			; <UNDEFINED> instruction: 0xf6162b01
 33c:	02000000 	andeq	r0, r0, #0
 340:	0d007491 	cfstrseq	mvf7, [r0, #-580]	; 0xfffffdbc
 344:	00000060 	andeq	r0, r0, r0, rrx
 348:	68062601 	stmdavs	r6, {r0, r9, sl, sp}
 34c:	38200000 	stmdacc	r0!, {}	; <UNPREDICTABLE>
 350:	01000000 	mrseq	r0, (UNDEF: 0)
 354:	0003779c 	muleq	r3, ip, r7
 358:	01601500 	cmneq	r0, r0, lsl #10
 35c:	26010000 	strcs	r0, [r1], -r0
 360:	0000f611 	andeq	pc, r0, r1, lsl r6	; <UNPREDICTABLE>
 364:	6c910200 	lfmvs	f0, 4, [r1], {0}
 368:	00006516 	andeq	r6, r0, r6, lsl r5
 36c:	05280100 	streq	r0, [r8, #-256]!	; 0xffffff00
 370:	0000019b 	muleq	r0, fp, r1
 374:	1700000f 	strne	r0, [r0, -pc]
 378:	00000038 	andeq	r0, r0, r8, lsr r0
 37c:	cc071d01 	stcgt	13, cr1, [r7], {1}
 380:	10000000 	andne	r0, r0, r0
 384:	58200000 	stmdapl	r0!, {}	; <UNPREDICTABLE>
 388:	01000000 	mrseq	r0, (UNDEF: 0)
 38c:	0003cc9c 	muleq	r3, ip, ip
 390:	6e6f1800 	cdpvs	8, 6, cr1, cr15, cr0, {0}
 394:	1d010065 	stcne	0, cr0, [r1, #-404]	; 0xfffffe6c
 398:	0000f61d 	andeq	pc, r0, sp, lsl r6	; <UNPREDICTABLE>
 39c:	6c910200 	lfmvs	f0, 4, [r1], {0}
 3a0:	6f777418 	svcvs	0x00777418
 3a4:	281d0100 	ldmdacs	sp, {r8}
 3a8:	000000f6 	strdeq	r0, [r0], -r6
 3ac:	12689102 	rsbne	r9, r8, #-2147483648	; 0x80000000
 3b0:	01004478 	tsteq	r0, r8, ror r4
 3b4:	00cc0b1e 	sbceq	r0, ip, lr, lsl fp
 3b8:	91020000 	mrsls	r0, (UNDEF: 2)
 3bc:	44791274 	ldrbtmi	r1, [r9], #-628	; 0xfffffd8c
 3c0:	0b1f0100 	bleq	7c07c8 <startup-0x1f83f838>
 3c4:	000000cc 	andeq	r0, r0, ip, asr #1
 3c8:	00709102 	rsbseq	r9, r0, r2, lsl #2
 3cc:	00000019 	andeq	r0, r0, r9, lsl r0
 3d0:	06040100 	streq	r0, [r4], -r0, lsl #2
 3d4:	20000000 	andcs	r0, r0, r0
 3d8:	0000000c 	andeq	r0, r0, ip
 3dc:	d8009c01 	stmdale	r0, {r0, sl, fp, ip, pc}
 3e0:	04000005 	streq	r0, [r0], #-5
 3e4:	00018a00 	andeq	r8, r1, r0, lsl #20
 3e8:	6f010400 	svcvs	0x00010400
 3ec:	0c000000 	stceq	0, cr0, [r0], {-0}
 3f0:	00000335 	andeq	r0, r0, r5, lsr r3
 3f4:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 3f8:	20000470 	andcs	r0, r0, r0, ror r4
 3fc:	00000a70 	andeq	r0, r0, r0, ror sl
 400:	00000242 	andeq	r0, r0, r2, asr #4
 404:	00017202 	andeq	r7, r1, r2, lsl #4
 408:	17010200 	strne	r0, [r1, -r0, lsl #4]
 40c:	00000031 	andeq	r0, r0, r1, lsr r0
 410:	52080103 	andpl	r0, r8, #-1073741824	; 0xc0000000
 414:	04000000 	streq	r0, [r0], #-0
 418:	00000025 	andeq	r0, r0, r5, lsr #32
 41c:	0000004e 	andeq	r0, r0, lr, asr #32
 420:	00004e05 	andeq	r4, r0, r5, lsl #28
 424:	4e050700 	cdpmi	7, 0, cr0, cr5, cr0, {0}
 428:	7f000000 	svcvc	0x00000000
 42c:	07040300 	streq	r0, [r4, -r0, lsl #6]
 430:	00000165 	andeq	r0, r0, r5, ror #2
 434:	0003c506 	andeq	ip, r3, r6, lsl #10
 438:	10020200 	andne	r0, r2, r0, lsl #4
 43c:	00000038 	andeq	r0, r0, r8, lsr r0
 440:	23100305 	tstcs	r0, #335544320	; 0x14000000
 444:	1a072000 	bne	1c844c <startup-0x1fe37bb4>
 448:	01000003 	tsteq	r0, r3
 44c:	90060176 	andls	r0, r6, r6, ror r1
 450:	5020000e 	eorpl	r0, r0, lr
 454:	01000000 	mrseq	r0, (UNDEF: 0)
 458:	0000b79c 	muleq	r0, ip, r7
 45c:	00630800 	rsbeq	r0, r3, r0, lsl #16
 460:	1c017601 	stcne	6, cr7, [r1], {1}
 464:	00000031 	andeq	r0, r0, r1, lsr r0
 468:	094f9102 	stmdbeq	pc, {r1, r8, ip, pc}^	; <UNPREDICTABLE>
 46c:	0074756f 	rsbseq	r7, r4, pc, ror #10
 470:	0a017701 	beq	5e07c <startup-0x1ffa1f84>
 474:	000000b7 	strheq	r0, [r0], -r7
 478:	0a679102 	beq	19e4888 <startup-0x1e61b778>
 47c:	20000eac 	andcs	r0, r0, ip, lsr #29
 480:	0000001a 	andeq	r0, r0, sl, lsl r0
 484:	0002440b 	andeq	r4, r2, fp, lsl #8
 488:	01790100 	cmneq	r9, r0, lsl #2
 48c:	0000be0e 	andeq	fp, r0, lr, lsl #28
 490:	54910200 	ldrpl	r0, [r1], #512	; 0x200
 494:	01030000 	mrseq	r0, (UNDEF: 3)
 498:	00005b08 	andeq	r5, r0, r8, lsl #22
 49c:	00b70400 	adcseq	r0, r7, r0, lsl #8
 4a0:	00ce0000 	sbceq	r0, lr, r0
 4a4:	4e050000 	cdpmi	0, 0, cr0, cr5, cr0, {0}
 4a8:	0f000000 	svceq	0x00000000
 4ac:	03790c00 	cmneq	r9, #0, 24
 4b0:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
 4b4:	00310f01 	eorseq	r0, r1, r1, lsl #30
 4b8:	0d7c0000 	ldcleq	0, cr0, [ip, #-0]
 4bc:	01142000 	tsteq	r4, r0
 4c0:	9c010000 	stcls	0, cr0, [r1], {-0}
 4c4:	00000178 	andeq	r0, r0, r8, ror r1
 4c8:	0003ba0b 	andeq	fp, r3, fp, lsl #20
 4cc:	01590100 	cmpeq	r9, r0, lsl #2
 4d0:	00017813 	andeq	r7, r1, r3, lsl r8
 4d4:	58910200 	ldmpl	r1, {r9}
 4d8:	0003140b 	andeq	r1, r3, fp, lsl #8
 4dc:	015d0100 	cmpeq	sp, r0, lsl #2
 4e0:	0000b70a 	andeq	fp, r0, sl, lsl #14
 4e4:	6f910200 	svcvs	0x00910200
 4e8:	0002950b 	andeq	r9, r2, fp, lsl #10
 4ec:	015e0100 	cmpeq	lr, r0, lsl #2
 4f0:	0000b70a 	andeq	fp, r0, sl, lsl #14
 4f4:	6c910200 	lfmvs	f0, 4, [r1], {0}
 4f8:	000d9e0a 	andeq	r9, sp, sl, lsl #28
 4fc:	0000be20 	andeq	fp, r0, r0, lsr #28
 500:	6f720900 	svcvs	0x00720900
 504:	5f010077 	svcpl	0x00010077
 508:	00b70f01 	adcseq	r0, r7, r1, lsl #30
 50c:	91020000 	mrsls	r0, (UNDEF: 2)
 510:	0da80a6e 			; <UNDEFINED> instruction: 0x0da80a6e
 514:	009e2000 	addseq	r2, lr, r0
 518:	6a0b0000 	bvs	2c0520 <startup-0x1fd3fae0>
 51c:	01000002 	tsteq	r0, r2
 520:	b70e0160 	strlt	r0, [lr, -r0, ror #2]
 524:	02000000 	andeq	r0, r0, #0
 528:	090b6b91 	stmdbeq	fp, {r0, r4, r7, r8, r9, fp, sp, lr}
 52c:	01000003 	tsteq	r0, r3
 530:	b70e0162 	strlt	r0, [lr, -r2, ror #2]
 534:	02000000 	andeq	r0, r0, #0
 538:	dc0a6a91 			; <UNDEFINED> instruction: 0xdc0a6a91
 53c:	6a20000d 	bvs	800578 <startup-0x1f7ffa88>
 540:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 544:	006c6f63 	rsbeq	r6, ip, r3, ror #30
 548:	12016401 	andne	r6, r1, #16777216	; 0x1000000
 54c:	000000b7 	strheq	r0, [r0], -r7
 550:	006d9102 	rsbeq	r9, sp, r2, lsl #2
 554:	04000000 	streq	r0, [r0], #-0
 558:	00000031 	andeq	r0, r0, r1, lsr r0
 55c:	00000188 	andeq	r0, r0, r8, lsl #3
 560:	00004e05 	andeq	r4, r0, r5, lsl #28
 564:	0d000f00 	stceq	15, cr0, [r0, #-0]
 568:	00000265 	andeq	r0, r0, r5, ror #4
 56c:	06013a01 	streq	r3, [r1], -r1, lsl #20
 570:	20000cd8 	ldrdcs	r0, [r0], -r8
 574:	000000a4 	andeq	r0, r0, r4, lsr #1
 578:	a10e9c01 	tstge	lr, r1, lsl #24
 57c:	01000003 	tsteq	r0, r3
 580:	b4060122 	strlt	r0, [r6], #-290	; 0xfffffede
 584:	2420000b 	strtcs	r0, [r0], #-11
 588:	01000001 	tsteq	r0, r1
 58c:	0002179c 	muleq	r2, ip, r7
 590:	0bba0f00 	bleq	fee84198 <buffer+0xdee81e88>
 594:	00822000 	addeq	r2, r2, r0
 598:	01e60000 	mvneq	r0, r0
 59c:	79090000 	stmdbvc	r9, {}	; <UNPREDICTABLE>
 5a0:	01230100 			; <UNDEFINED> instruction: 0x01230100
 5a4:	0000250f 	andeq	r2, r0, pc, lsl #10
 5a8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 5ac:	000bc20a 	andeq	ip, fp, sl, lsl #4
 5b0:	00006820 	andeq	r6, r0, r0, lsr #16
 5b4:	00780900 	rsbseq	r0, r8, r0, lsl #18
 5b8:	10012401 	andne	r2, r1, r1, lsl #8
 5bc:	00000025 	andeq	r0, r0, r5, lsr #32
 5c0:	00769102 	rsbseq	r9, r6, r2, lsl #2
 5c4:	0c3c0a00 			; <UNDEFINED> instruction: 0x0c3c0a00
 5c8:	008c2000 	addeq	r2, ip, r0
 5cc:	79090000 	stmdbvc	r9, {}	; <UNPREDICTABLE>
 5d0:	012d0100 			; <UNDEFINED> instruction: 0x012d0100
 5d4:	0000250f 	andeq	r2, r0, pc, lsl #10
 5d8:	75910200 	ldrvc	r0, [r1, #512]	; 0x200
 5dc:	000c440a 	andeq	r4, ip, sl, lsl #8
 5e0:	00007220 	andeq	r7, r0, r0, lsr #4
 5e4:	00780900 	rsbseq	r0, r8, r0, lsl #18
 5e8:	10012e01 	andne	r2, r1, r1, lsl #28
 5ec:	00000025 	andeq	r0, r0, r5, lsr #32
 5f0:	00749102 	rsbseq	r9, r4, r2, lsl #2
 5f4:	bf100000 	svclt	0x00100000
 5f8:	01000003 	tsteq	r0, r3
 5fc:	5806011a 	stmdapl	r6, {r1, r3, r4, r8}
 600:	5c20000b 	stcpl	0, cr0, [r0], #-44	; 0xffffffd4
 604:	01000000 	mrseq	r0, (UNDEF: 0)
 608:	00025f9c 	muleq	r2, ip, pc	; <UNPREDICTABLE>
 60c:	0b5e0a00 	bleq	1782e14 <startup-0x1e87d1ec>
 610:	00482000 	subeq	r2, r8, r0
 614:	79090000 	stmdbvc	r9, {}	; <UNPREDICTABLE>
 618:	011b0100 	tsteq	fp, r0, lsl #2
 61c:	0000250f 	andeq	r2, r0, pc, lsl #10
 620:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 624:	000b660a 	andeq	r6, fp, sl, lsl #12
 628:	00002e20 	andeq	r2, r0, r0, lsr #28
 62c:	00780900 	rsbseq	r0, r8, r0, lsl #18
 630:	10011c01 	andne	r1, r1, r1, lsl #24
 634:	00000025 	andeq	r0, r0, r5, lsr #32
 638:	00769102 	rsbseq	r9, r6, r2, lsl #2
 63c:	69070000 	stmdbvs	r7, {}	; <UNPREDICTABLE>
 640:	01000000 	mrseq	r0, (UNDEF: 0)
 644:	9406010e 	strls	r0, [r6], #-270	; 0xfffffef2
 648:	c420000a 	strtgt	r0, [r0], #-10
 64c:	01000000 	mrseq	r0, (UNDEF: 0)
 650:	0002b39c 	muleq	r2, ip, r3
 654:	00780800 	rsbseq	r0, r8, r0, lsl #16
 658:	14010e01 	strne	r0, [r1], #-3585	; 0xfffff1ff
 65c:	00000025 	andeq	r0, r0, r5, lsr #32
 660:	08679102 	stmdaeq	r7!, {r1, r8, ip, pc}^
 664:	0e010079 	mcreq	0, 0, r0, cr1, cr9, {3}
 668:	00251f01 	eoreq	r1, r5, r1, lsl #30
 66c:	91020000 	mrsls	r0, (UNDEF: 2)
 670:	65730866 	ldrbvs	r0, [r3, #-2150]!	; 0xfffff79a
 674:	0e010074 	mcreq	0, 0, r0, cr1, cr4, {3}
 678:	00252a01 	eoreq	r2, r5, r1, lsl #20
 67c:	91020000 	mrsls	r0, (UNDEF: 2)
 680:	030f0b65 	movweq	r0, #64357	; 0xfb65
 684:	11010000 	mrsne	r0, (UNDEF: 1)
 688:	00250d01 	eoreq	r0, r5, r1, lsl #26
 68c:	91020000 	mrsls	r0, (UNDEF: 2)
 690:	6511006f 	ldrvs	r0, [r1, #-111]	; 0xffffff91
 694:	01000000 	mrseq	r0, (UNDEF: 0)
 698:	092406e8 	stmdbeq	r4!, {r3, r5, r6, r7, r9, sl}
 69c:	01702000 	cmneq	r0, r0
 6a0:	9c010000 	stcls	0, cr0, [r1], {-0}
 6a4:	0000033d 	andeq	r0, r0, sp, lsr r3
 6a8:	01007812 	tsteq	r0, r2, lsl r8
 6ac:	002518e8 	eoreq	r1, r5, r8, ror #17
 6b0:	91020000 	mrsls	r0, (UNDEF: 2)
 6b4:	0079125f 	rsbseq	r1, r9, pc, asr r2
 6b8:	2523e801 	strcs	lr, [r3, #-2049]!	; 0xfffff7ff
 6bc:	02000000 	andeq	r0, r0, #0
 6c0:	73125e91 	tstvc	r2, #2320	; 0x910
 6c4:	01007465 	tsteq	r0, r5, ror #8
 6c8:	00252ee8 	eoreq	r2, r5, r8, ror #29
 6cc:	91020000 	mrsls	r0, (UNDEF: 2)
 6d0:	030f065d 	movweq	r0, #63069	; 0xf65d
 6d4:	ef010000 	svc	0x00010000
 6d8:	0000250a 	andeq	r2, r0, sl, lsl #10
 6dc:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
 6e0:	00028306 	andeq	r8, r2, r6, lsl #6
 6e4:	10ef0100 	rscne	r0, pc, r0, lsl #2
 6e8:	00000025 	andeq	r0, r0, r5, lsr #32
 6ec:	06669102 	strbteq	r9, [r6], -r2, lsl #2
 6f0:	0000025a 	andeq	r0, r0, sl, asr r2
 6f4:	2517ef01 	ldrcs	lr, [r7, #-3841]	; 0xfffff0ff
 6f8:	02000000 	andeq	r0, r0, #0
 6fc:	14066591 	strne	r6, [r6], #-1425	; 0xfffffa6f
 700:	01000003 	tsteq	r0, r3
 704:	00250af0 	strdeq	r0, [r5], -r0	; <UNPREDICTABLE>
 708:	91020000 	mrsls	r0, (UNDEF: 2)
 70c:	00630964 	rsbeq	r0, r3, r4, ror #18
 710:	0a010201 	beq	40f1c <startup-0x1ffbf0e4>
 714:	00000025 	andeq	r0, r0, r5, lsr #32
 718:	00639102 	rsbeq	r9, r3, r2, lsl #2
 71c:	00038c13 	andeq	r8, r3, r3, lsl ip
 720:	0dda0100 	ldfeqe	f0, [sl]
 724:	200008bc 			; <UNDEFINED> instruction: 0x200008bc
 728:	00000068 	andeq	r0, r0, r8, rrx
 72c:	03869c01 	orreq	r9, r6, #256	; 0x100
 730:	c20a0000 	andgt	r0, sl, #0
 734:	58200008 	stmdapl	r0!, {r3}
 738:	06000000 	streq	r0, [r0], -r0
 73c:	0000023f 	andeq	r0, r0, pc, lsr r2
 740:	2512db01 	ldrcs	sp, [r2, #-2817]	; 0xfffff4ff
 744:	02000000 	andeq	r0, r0, #0
 748:	e60a7791 			; <UNDEFINED> instruction: 0xe60a7791
 74c:	22200008 	eorcs	r0, r0, #8
 750:	14000000 	strne	r0, [r0], #-0
 754:	00646461 	rsbeq	r6, r4, r1, ror #8
 758:	2516de01 	ldrcs	sp, [r6, #-3585]	; 0xfffff1ff
 75c:	02000000 	andeq	r0, r0, #0
 760:	00007691 	muleq	r0, r1, r6
 764:	02b21500 	adcseq	r1, r2, #0, 10
 768:	ca010000 	bgt	40770 <startup-0x1ffbf890>
 76c:	0008660d 	andeq	r6, r8, sp, lsl #12
 770:	00005620 	andeq	r5, r0, r0, lsr #12
 774:	169c0100 	ldrne	r0, [ip], r0, lsl #2
 778:	00000271 	andeq	r0, r0, r1, ror r2
 77c:	2510c501 	ldrcs	ip, [r0, #-1281]	; 0xfffffaff
 780:	3c000000 	stccc	0, cr0, [r0], {-0}
 784:	2a200008 	bcs	8007ac <startup-0x1f7ff854>
 788:	01000000 	mrseq	r0, (UNDEF: 0)
 78c:	0003c29c 	muleq	r3, ip, r2
 790:	025a1700 	subseq	r1, sl, #0, 14
 794:	c5010000 	strgt	r0, [r1, #-0]
 798:	0000252a 	andeq	r2, r0, sl, lsr #10
 79c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 7a0:	03221800 			; <UNDEFINED> instruction: 0x03221800
 7a4:	bd010000 	stclt	0, cr0, [r1, #-0]
 7a8:	0007f60d 	andeq	pc, r7, sp, lsl #12
 7ac:	00004620 	andeq	r4, r0, r0, lsr #12
 7b0:	f79c0100 			; <UNDEFINED> instruction: 0xf79c0100
 7b4:	17000003 	strne	r0, [r0, -r3]
 7b8:	0000027e 	andeq	r0, r0, lr, ror r2
 7bc:	2528bd01 	strcs	fp, [r8, #-3329]!	; 0xfffff2ff
 7c0:	02000000 	andeq	r0, r0, #0
 7c4:	5a177791 	bpl	5de610 <startup-0x1fa219f0>
 7c8:	01000002 	tsteq	r0, r2
 7cc:	002536bd 	strhteq	r3, [r5], -sp
 7d0:	91020000 	mrsls	r0, (UNDEF: 2)
 7d4:	cc180076 	ldcgt	0, cr0, [r8], {118}	; 0x76
 7d8:	01000003 	tsteq	r0, r3
 7dc:	07b00db5 			; <UNDEFINED> instruction: 0x07b00db5
 7e0:	00462000 	subeq	r2, r6, r0
 7e4:	9c010000 	stcls	0, cr0, [r1], {-0}
 7e8:	0000042c 	andeq	r0, r0, ip, lsr #8
 7ec:	0003da17 	andeq	sp, r3, r7, lsl sl
 7f0:	2bb50100 	blcs	fed40bf8 <buffer+0xded3e8e8>
 7f4:	00000025 	andeq	r0, r0, r5, lsr #32
 7f8:	17779102 	ldrbne	r9, [r7, -r2, lsl #2]!
 7fc:	0000025a 	andeq	r0, r0, sl, asr r2
 800:	253cb501 	ldrcs	fp, [ip, #-1281]!	; 0xfffffaff
 804:	02000000 	andeq	r0, r0, #0
 808:	18007691 	stmdane	r0, {r0, r4, r7, r9, sl, ip, sp, lr}
 80c:	0000037e 	andeq	r0, r0, lr, ror r3
 810:	3c0da301 	stccc	3, cr10, [sp], {1}
 814:	74200007 	strtvc	r0, [r0], #-7
 818:	01000000 	mrseq	r0, (UNDEF: 0)
 81c:	0004619c 	muleq	r4, ip, r1
 820:	024d1700 	subeq	r1, sp, #0, 14
 824:	a3010000 	movwge	r0, #4096	; 0x1000
 828:	00002523 	andeq	r2, r0, r3, lsr #10
 82c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 830:	00025a17 	andeq	r5, r2, r7, lsl sl
 834:	32a30100 	adccc	r0, r3, #0, 2
 838:	00000025 	andeq	r0, r0, r5, lsr #32
 83c:	00769102 	rsbseq	r9, r6, r2, lsl #2
 840:	0003ad16 	andeq	sl, r3, r6, lsl sp
 844:	10900100 	addsne	r0, r0, r0, lsl #2
 848:	00000025 	andeq	r0, r0, r5, lsr #32
 84c:	200006ac 	andcs	r0, r0, ip, lsr #13
 850:	00000090 	muleq	r0, r0, r0
 854:	04999c01 	ldreq	r9, [r9], #3073	; 0xc01
 858:	5a170000 	bpl	5c0860 <startup-0x1fa3f7a0>
 85c:	01000002 	tsteq	r0, r2
 860:	00252590 	mlaeq	r5, r0, r5, r2
 864:	91020000 	mrsls	r0, (UNDEF: 2)
 868:	7672146f 	ldrbtvc	r1, [r2], -pc, ror #8
 86c:	0d990100 	ldfeqs	f0, [r9]
 870:	00000025 	andeq	r0, r0, r5, lsr #32
 874:	00779102 	rsbseq	r9, r7, r2, lsl #2
 878:	00029a18 	andeq	r9, r2, r8, lsl sl
 87c:	0d7a0100 	ldfeqe	f0, [sl, #-0]
 880:	2000063c 	andcs	r0, r0, ip, lsr r6
 884:	00000070 	andeq	r0, r0, r0, ror r0
 888:	04c99c01 	strbeq	r9, [r9], #3073	; 0xc01
 88c:	5e0a0000 	cdppl	0, 0, cr0, cr10, cr0, {0}
 890:	2a200006 	bcs	8008b0 <startup-0x1f7ff750>
 894:	06000000 	streq	r0, [r0], -r0
 898:	000002ad 	andeq	r0, r0, sp, lsr #5
 89c:	25118601 	ldrcs	r8, [r1, #-1537]	; 0xfffff9ff
 8a0:	02000000 	andeq	r0, r0, #0
 8a4:	00007791 	muleq	r0, r1, r7
 8a8:	00025319 	andeq	r5, r2, r9, lsl r3
 8ac:	0d6f0100 	stfeqe	f0, [pc, #-0]	; 8b4 <startup-0x1ffff74c>
 8b0:	200005d4 	ldrdcs	r0, [r0], -r4
 8b4:	00000068 	andeq	r0, r0, r8, rrx
 8b8:	050b9c01 	streq	r9, [fp, #-3073]	; 0xfffff3ff
 8bc:	5a170000 	bpl	5c08c4 <startup-0x1fa3f73c>
 8c0:	01000002 	tsteq	r0, r2
 8c4:	0025276f 	eoreq	r2, r5, pc, ror #14
 8c8:	91020000 	mrsls	r0, (UNDEF: 2)
 8cc:	030f066f 	movweq	r0, #63087	; 0xf66f
 8d0:	70010000 	andvc	r0, r1, r0
 8d4:	0000250d 	andeq	r2, r0, sp, lsl #10
 8d8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 8dc:	01006314 	tsteq	r0, r4, lsl r3
 8e0:	00250d73 	eoreq	r0, r5, r3, ror sp
 8e4:	91020000 	mrsls	r0, (UNDEF: 2)
 8e8:	c5190076 	ldrgt	r0, [r9, #-118]	; 0xffffff8a
 8ec:	01000002 	tsteq	r0, r2
 8f0:	05840d67 	streq	r0, [r4, #3431]	; 0xd67
 8f4:	00502000 	subseq	r2, r0, r0
 8f8:	9c010000 	stcls	0, cr0, [r1], {-0}
 8fc:	0000053c 	andeq	r0, r0, ip, lsr r5
 900:	01007812 	tsteq	r0, r2, lsl r8
 904:	00252c67 	eoreq	r2, r5, r7, ror #24
 908:	91020000 	mrsls	r0, (UNDEF: 2)
 90c:	0063146f 	rsbeq	r1, r3, pc, ror #8
 910:	250d6801 	strcs	r6, [sp, #-2049]	; 0xfffff7ff
 914:	02000000 	andeq	r0, r0, #0
 918:	19007791 	stmdbne	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
 91c:	000002dc 	ldrdeq	r0, [r0], -ip
 920:	320d5f01 	andcc	r5, sp, #1, 30
 924:	52200005 	eorpl	r0, r0, #5
 928:	01000000 	mrseq	r0, (UNDEF: 0)
 92c:	00056d9c 	muleq	r5, ip, sp
 930:	00781200 	rsbseq	r1, r8, r0, lsl #4
 934:	252a5f01 	strcs	r5, [sl, #-3841]!	; 0xfffff0ff
 938:	02000000 	andeq	r0, r0, #0
 93c:	63146f91 	tstvs	r4, #580	; 0x244
 940:	0d600100 	stfeqe	f0, [r0, #-0]
 944:	00000025 	andeq	r0, r0, r5, lsr #32
 948:	00779102 	rsbseq	r9, r7, r2, lsl #2
 94c:	0001ca11 	andeq	ip, r1, r1, lsl sl
 950:	06520100 	ldrbeq	r0, [r2], -r0, lsl #2
 954:	20000504 	andcs	r0, r0, r4, lsl #10
 958:	0000002e 	andeq	r0, r0, lr, lsr #32
 95c:	05929c01 	ldreq	r9, [r2, #3073]	; 0xc01
 960:	6d120000 	ldcvs	0, cr0, [r2, #-0]
 964:	52010073 	andpl	r0, r1, #115	; 0x73
 968:	00004e1f 	andeq	r4, r0, pc, lsl lr
 96c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 970:	02f11100 	rscseq	r1, r1, #0, 2
 974:	43010000 	movwmi	r0, #4096	; 0x1000
 978:	0004c606 	andeq	ip, r4, r6, lsl #12
 97c:	00003e20 	andeq	r3, r0, r0, lsr #28
 980:	b79c0100 	ldrlt	r0, [ip, r0, lsl #2]
 984:	12000005 	andne	r0, r0, #5
 988:	01007375 	tsteq	r0, r5, ror r3
 98c:	004e1f43 	subeq	r1, lr, r3, asr #30
 990:	91020000 	mrsls	r0, (UNDEF: 2)
 994:	891a0074 	ldmdbhi	sl, {r2, r4, r5, r6}
 998:	01000002 	tsteq	r0, r2
 99c:	04b40d3e 	ldrteq	r0, [r4], #3390	; 0xd3e
 9a0:	00122000 	andseq	r2, r2, r0
 9a4:	9c010000 	stcls	0, cr0, [r1], {-0}
 9a8:	0002fd1b 	andeq	pc, r2, fp, lsl sp	; <UNPREDICTABLE>
 9ac:	0d350100 	ldfeqs	f0, [r5, #-0]
 9b0:	20000470 	andcs	r0, r0, r0, ror r4
 9b4:	00000044 	andeq	r0, r0, r4, asr #32
 9b8:	Address 0x000009b8 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	13490b39 	movtne	r0, #39737	; 0x9b39
  20:	24030000 	strcs	r0, [r3], #-0
  24:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  28:	000e030b 	andeq	r0, lr, fp, lsl #6
  2c:	01010400 	tsteq	r1, r0, lsl #8
  30:	13011349 	movwne	r1, #4937	; 0x1349
  34:	21050000 	mrscs	r0, (UNDEF: 5)
  38:	2f134900 	svccs	0x00134900
  3c:	0600000b 	streq	r0, [r0], -fp
  40:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  44:	0b3b0b3a 	bleq	ec2d34 <startup-0x1f13d2cc>
  48:	13490b39 	movtne	r0, #39737	; 0x9b39
  4c:	00001802 	andeq	r1, r0, r2, lsl #16
  50:	03011307 	movweq	r1, #4871	; 0x1307
  54:	3a0b0b0e 	bcc	2c2c94 <startup-0x1fd3d36c>
  58:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  5c:	0013010b 	andseq	r0, r3, fp, lsl #2
  60:	000d0800 	andeq	r0, sp, r0, lsl #16
  64:	0b3a0803 	bleq	e82078 <startup-0x1f17df88>
  68:	0b390b3b 	bleq	e42d5c <startup-0x1f1bd2a4>
  6c:	0b381349 	bleq	e04d98 <startup-0x1f1fb268>
  70:	0d090000 	stceq	0, cr0, [r9, #-0]
  74:	3a0e0300 	bcc	380c7c <startup-0x1fc7f384>
  78:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  7c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  80:	0a00000b 	beq	b4 <startup-0x1fffff4c>
  84:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
  88:	00001301 	andeq	r1, r0, r1, lsl #6
  8c:	4900050b 	stmdbmi	r0, {r0, r1, r3, r8, sl}
  90:	0c000013 	stceq	0, cr0, [r0], {19}
  94:	0b0b000f 	bleq	2c00d8 <startup-0x1fd3ff28>
  98:	00001349 	andeq	r1, r0, r9, asr #6
  9c:	3f012e0d 	svccc	0x00012e0d
  a0:	3a0e0319 	bcc	380d0c <startup-0x1fc7f2f4>
  a4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  a8:	1119270b 	tstne	r9, fp, lsl #14
  ac:	40061201 	andmi	r1, r6, r1, lsl #4
  b0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  b4:	00001301 	andeq	r1, r0, r1, lsl #6
  b8:	3f012e0e 	svccc	0x00012e0e
  bc:	3a0e0319 	bcc	380d28 <startup-0x1fc7f2d8>
  c0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  c4:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
  c8:	00130119 	andseq	r0, r3, r9, lsl r1
  cc:	00180f00 	andseq	r0, r8, r0, lsl #30
  d0:	0b100000 	bleq	4000d8 <startup-0x1fbfff28>
  d4:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
  d8:	11000006 	tstne	r0, r6
  dc:	0111010b 	tsteq	r1, fp, lsl #2
  e0:	13010612 	movwne	r0, #5650	; 0x1612
  e4:	34120000 	ldrcc	r0, [r2], #-0
  e8:	3a080300 	bcc	200cf0 <startup-0x1fdff310>
  ec:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  f0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  f4:	13000018 	movwne	r0, #24
  f8:	0b0b0024 	bleq	2c0190 <startup-0x1fd3fe70>
  fc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 100:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
 104:	03193f01 	tsteq	r9, #1, 30
 108:	3b0b3a0e 	blcc	2ce948 <startup-0x1fd316b8>
 10c:	110b390b 	tstne	fp, fp, lsl #18
 110:	40061201 	andmi	r1, r6, r1, lsl #4
 114:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 118:	00001301 	andeq	r1, r0, r1, lsl #6
 11c:	03000515 	movweq	r0, #1301	; 0x515
 120:	3b0b3a0e 	blcc	2ce960 <startup-0x1fd316a0>
 124:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 128:	00180213 	andseq	r0, r8, r3, lsl r2
 12c:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
 130:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 134:	0b3b0b3a 	bleq	ec2e24 <startup-0x1f13d1dc>
 138:	13490b39 	movtne	r0, #39737	; 0x9b39
 13c:	0000193c 	andeq	r1, r0, ip, lsr r9
 140:	3f012e17 	svccc	0x00012e17
 144:	3a0e0319 	bcc	380db0 <startup-0x1fc7f250>
 148:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 14c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 150:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 154:	96184006 	ldrls	r4, [r8], -r6
 158:	13011942 	movwne	r1, #6466	; 0x1942
 15c:	05180000 	ldreq	r0, [r8, #-0]
 160:	3a080300 	bcc	200d68 <startup-0x1fdff298>
 164:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 168:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 16c:	19000018 	stmdbne	r0, {r3, r4}
 170:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 174:	0b3a0e03 	bleq	e83988 <startup-0x1f17c678>
 178:	0b390b3b 	bleq	e42e6c <startup-0x1f1bd194>
 17c:	01111927 	tsteq	r1, r7, lsr #18
 180:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 184:	00194297 	mulseq	r9, r7, r2
 188:	11010000 	mrsne	r0, (UNDEF: 1)
 18c:	130e2501 	movwne	r2, #58625	; 0xe501
 190:	1b0e030b 	blne	380dc4 <startup-0x1fc7f23c>
 194:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 198:	00171006 	andseq	r1, r7, r6
 19c:	00160200 	andseq	r0, r6, r0, lsl #4
 1a0:	0b3a0e03 	bleq	e839b4 <startup-0x1f17c64c>
 1a4:	0b390b3b 	bleq	e42e98 <startup-0x1f1bd168>
 1a8:	00001349 	andeq	r1, r0, r9, asr #6
 1ac:	0b002403 	bleq	91c0 <startup-0x1fff6e40>
 1b0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 1b4:	0400000e 	streq	r0, [r0], #-14
 1b8:	13490101 	movtne	r0, #37121	; 0x9101
 1bc:	00001301 	andeq	r1, r0, r1, lsl #6
 1c0:	49002105 	stmdbmi	r0, {r0, r2, r8, sp}
 1c4:	000b2f13 	andeq	r2, fp, r3, lsl pc
 1c8:	00340600 	eorseq	r0, r4, r0, lsl #12
 1cc:	0b3a0e03 	bleq	e839e0 <startup-0x1f17c620>
 1d0:	0b390b3b 	bleq	e42ec4 <startup-0x1f1bd13c>
 1d4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 1d8:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
 1dc:	03193f01 	tsteq	r9, #1, 30
 1e0:	3b0b3a0e 	blcc	2cea20 <startup-0x1fd315e0>
 1e4:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
 1e8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 1ec:	97184006 	ldrls	r4, [r8, -r6]
 1f0:	13011942 	movwne	r1, #6466	; 0x1942
 1f4:	05080000 	streq	r0, [r8, #-0]
 1f8:	3a080300 	bcc	200e00 <startup-0x1fdff200>
 1fc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 200:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 204:	09000018 	stmdbeq	r0, {r3, r4}
 208:	08030034 	stmdaeq	r3, {r2, r4, r5}
 20c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 210:	13490b39 	movtne	r0, #39737	; 0x9b39
 214:	00001802 	andeq	r1, r0, r2, lsl #16
 218:	11010b0a 	tstne	r1, sl, lsl #22
 21c:	00061201 	andeq	r1, r6, r1, lsl #4
 220:	00340b00 	eorseq	r0, r4, r0, lsl #22
 224:	0b3a0e03 	bleq	e83a38 <startup-0x1f17c5c8>
 228:	0b39053b 	bleq	e4171c <startup-0x1f1be8e4>
 22c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 230:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
 234:	03193f01 	tsteq	r9, #1, 30
 238:	3b0b3a0e 	blcc	2cea78 <startup-0x1fd31588>
 23c:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
 240:	11134919 	tstne	r3, r9, lsl r9
 244:	40061201 	andmi	r1, r6, r1, lsl #4
 248:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 24c:	00001301 	andeq	r1, r0, r1, lsl #6
 250:	3f002e0d 	svccc	0x00002e0d
 254:	3a0e0319 	bcc	380ec0 <startup-0x1fc7f140>
 258:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 25c:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 260:	96184006 	ldrls	r4, [r8], -r6
 264:	00001942 	andeq	r1, r0, r2, asr #18
 268:	3f012e0e 	svccc	0x00012e0e
 26c:	3a0e0319 	bcc	380ed8 <startup-0x1fc7f128>
 270:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 274:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 278:	96184006 	ldrls	r4, [r8], -r6
 27c:	13011942 	movwne	r1, #6466	; 0x1942
 280:	0b0f0000 	bleq	3c0288 <startup-0x1fc3fd78>
 284:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 288:	00130106 	andseq	r0, r3, r6, lsl #2
 28c:	012e1000 			; <UNDEFINED> instruction: 0x012e1000
 290:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 294:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 298:	01110b39 	tsteq	r1, r9, lsr fp
 29c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2a0:	01194297 			; <UNDEFINED> instruction: 0x01194297
 2a4:	11000013 	tstne	r0, r3, lsl r0
 2a8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 2ac:	0b3a0e03 	bleq	e83ac0 <startup-0x1f17c540>
 2b0:	0b390b3b 	bleq	e42fa4 <startup-0x1f1bd05c>
 2b4:	01111927 	tsteq	r1, r7, lsr #18
 2b8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2bc:	01194296 			; <UNDEFINED> instruction: 0x01194296
 2c0:	12000013 	andne	r0, r0, #19
 2c4:	08030005 	stmdaeq	r3, {r0, r2}
 2c8:	0b3b0b3a 	bleq	ec2fb8 <startup-0x1f13d048>
 2cc:	13490b39 	movtne	r0, #39737	; 0x9b39
 2d0:	00001802 	andeq	r1, r0, r2, lsl #16
 2d4:	03012e13 	movweq	r2, #7699	; 0x1e13
 2d8:	3b0b3a0e 	blcc	2ceb18 <startup-0x1fd314e8>
 2dc:	110b390b 	tstne	fp, fp, lsl #18
 2e0:	40061201 	andmi	r1, r6, r1, lsl #4
 2e4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 2e8:	00001301 	andeq	r1, r0, r1, lsl #6
 2ec:	03003414 	movweq	r3, #1044	; 0x414
 2f0:	3b0b3a08 	blcc	2ceb18 <startup-0x1fd314e8>
 2f4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 2f8:	00180213 	andseq	r0, r8, r3, lsl r2
 2fc:	002e1500 	eoreq	r1, lr, r0, lsl #10
 300:	0b3a0e03 	bleq	e83b14 <startup-0x1f17c4ec>
 304:	0b390b3b 	bleq	e42ff8 <startup-0x1f1bd008>
 308:	06120111 			; <UNDEFINED> instruction: 0x06120111
 30c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 310:	16000019 			; <UNDEFINED> instruction: 0x16000019
 314:	0e03012e 	adfeqsp	f0, f3, #0.5
 318:	0b3b0b3a 	bleq	ec3008 <startup-0x1f13cff8>
 31c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 320:	01111349 	tsteq	r1, r9, asr #6
 324:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 328:	01194296 			; <UNDEFINED> instruction: 0x01194296
 32c:	17000013 	smladne	r0, r3, r0, r0
 330:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 334:	0b3b0b3a 	bleq	ec3024 <startup-0x1f13cfdc>
 338:	13490b39 	movtne	r0, #39737	; 0x9b39
 33c:	00001802 	andeq	r1, r0, r2, lsl #16
 340:	03012e18 	movweq	r2, #7704	; 0x1e18
 344:	3b0b3a0e 	blcc	2ceb84 <startup-0x1fd3147c>
 348:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 34c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 350:	96184006 	ldrls	r4, [r8], -r6
 354:	13011942 	movwne	r1, #6466	; 0x1942
 358:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
 35c:	3a0e0301 	bcc	380f68 <startup-0x1fc7f098>
 360:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 364:	1119270b 	tstne	r9, fp, lsl #14
 368:	40061201 	andmi	r1, r6, r1, lsl #4
 36c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 370:	00001301 	andeq	r1, r0, r1, lsl #6
 374:	03002e1a 	movweq	r2, #3610	; 0xe1a
 378:	3b0b3a0e 	blcc	2cebb8 <startup-0x1fd31448>
 37c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 380:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 384:	96184006 	ldrls	r4, [r8], -r6
 388:	00001942 	andeq	r1, r0, r2, asr #18
 38c:	03002e1b 	movweq	r2, #3611	; 0xe1b
 390:	3b0b3a0e 	blcc	2cebd0 <startup-0x1fd31430>
 394:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 398:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 39c:	97184006 	ldrls	r4, [r8, -r6]
 3a0:	00001942 	andeq	r1, r0, r2, asr #18
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000460 	andeq	r0, r0, r0, ror #8
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	03df0002 	bicseq	r0, pc, #2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000470 	andcs	r0, r0, r0, ror r4
  3c:	00000a70 	andeq	r0, r0, r0, ror sl
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000470 	andcs	r0, r0, r0, ror r4
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0000023e 	andeq	r0, r0, lr, lsr r2
   4:	00670003 	rsbeq	r0, r7, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	6b697245 	blvs	1a5c940 <startup-0x1e5a36c0>
  28:	6e6f7373 	mcrvs	3, 3, r7, cr15, cr3, {3}
  2c:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
  30:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
  34:	432f7374 			; <UNDEFINED> instruction: 0x432f7374
  38:	6d6c6168 	stfvse	f6, [ip, #-416]!	; 0xfffffe60
  3c:	2f737265 	svccs	0x00737265
  40:	2f504f4d 	svccs	0x00504f4d
  44:	64696f42 	strbtvs	r6, [r9], #-3906	; 0xfffff0be
  48:	69532d73 	ldmdbvs	r3, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
  4c:	616c756d 	cmnvs	ip, sp, ror #10
  50:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
  54:	74730000 	ldrbtvc	r0, [r3], #-0
  58:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  5c:	00632e70 	rsbeq	r2, r3, r0, ror lr
  60:	64000001 	strvs	r0, [r0], #-1
  64:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
  68:	682e7372 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}
  6c:	00000100 	andeq	r0, r0, r0, lsl #2
  70:	00010500 	andeq	r0, r1, r0, lsl #10
  74:	00000205 	andeq	r0, r0, r5, lsl #4
  78:	13162000 	tstne	r6, #0
  7c:	212f2121 			; <UNDEFINED> instruction: 0x212f2121
  80:	01000302 	tsteq	r0, r2, lsl #6
  84:	002d0501 	eoreq	r0, sp, r1, lsl #10
  88:	00100205 	andseq	r0, r0, r5, lsl #4
  8c:	1c032000 	stcne	0, cr2, [r3], {-0}
  90:	59130501 	ldmdbpl	r3, {r0, r8, sl}
  94:	052e1c05 	streq	r1, [lr, #-3077]!	; 0xfffff3fb
  98:	13052e0b 	movwne	r2, #24075	; 0x5e0b
  9c:	2e1c0567 	cfmsc32cs	mvfx0, mvfx12, mvfx7
  a0:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
  a4:	1405670f 	strne	r6, [r5], #-1807	; 0xfffff8f1
  a8:	58190558 	ldmdapl	r9, {r3, r4, r6, r8, sl}
  ac:	05590105 	ldrbeq	r0, [r9, #-261]	; 0xfffffefb
  b0:	1d054f17 	stcne	15, cr4, [r5, #-92]	; 0xffffffa4
  b4:	2e0f054c 	cfsh32cs	mvfx0, mvfx15, #44
  b8:	05580505 	ldrbeq	r0, [r8, #-1285]	; 0xfffffafb
  bc:	22052030 	andcs	r2, r5, #48	; 0x30
  c0:	5805052e 	stmdapl	r5, {r1, r2, r3, r5, r8, sl}
  c4:	05590105 	ldrbeq	r0, [r9, #-261]	; 0xfffffefb
  c8:	0d054c1c 	stceq	12, cr4, [r5, #-112]	; 0xffffff90
  cc:	2e14054b 	cfmac32cs	mvfx0, mvfx4, mvfx11
  d0:	832e0d05 			; <UNDEFINED> instruction: 0x832e0d05
  d4:	052e1405 	streq	r1, [lr, #-1029]!	; 0xfffffbfb
  d8:	01052e0d 	tsteq	r5, sp, lsl #28
  dc:	4c1c0583 	cfldr32mi	mvfx0, [ip], {131}	; 0x83
  e0:	054b0905 	strbeq	r0, [fp, #-2309]	; 0xfffff6fb
  e4:	18052f0b 	stmdane	r5, {r0, r1, r3, r8, r9, sl, fp, sp}
  e8:	2f0b052e 	svccs	0x000b052e
  ec:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
  f0:	1d052f0b 	stcne	15, cr2, [r5, #-44]	; 0xffffffd4
  f4:	300e052e 	andcc	r0, lr, lr, lsr #10
  f8:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
  fc:	1a05210f 	bne	148540 <startup-0x1feb7ac0>
 100:	830c0583 	movwhi	r0, #50563	; 0xc583
 104:	4d140577 	cfldr32mi	mvfx0, [r4, #-476]	; 0xfffffe24
 108:	053f1905 	ldreq	r1, [pc, #-2309]!	; fffff80b <buffer+0xdfffd4fb>
 10c:	19052e11 	stmdbne	r5, {r0, r4, r9, sl, fp, sp}
 110:	2e110567 	cfmsc32cs	mvfx0, mvfx1, mvfx7
 114:	05691905 	strbeq	r1, [r9, #-2309]!	; 0xfffff6fb
 118:	19052e11 	stmdbne	r5, {r0, r4, r9, sl, fp, sp}
 11c:	2e110567 	cfmsc32cs	mvfx0, mvfx1, mvfx7
 120:	05691e05 	strbeq	r1, [r9, #-3589]!	; 0xfffff1fb
 124:	22052e29 	andcs	r2, r5, #656	; 0x290
 128:	582e052e 	stmdapl	lr!, {r1, r2, r3, r5, r8, sl}
 12c:	05581605 	ldrbeq	r1, [r8, #-1541]	; 0xfffff9fb
 130:	2905671e 	stmdbcs	r5, {r1, r2, r3, r4, r8, r9, sl, sp, lr}
 134:	2e22052e 	cfsh64cs	mvdx0, mvdx2, #30
 138:	05582e05 	ldrbeq	r2, [r8, #-3589]	; 0xfffff1fb
 13c:	0d055816 	stceq	8, cr5, [r5, #-88]	; 0xffffffa8
 140:	31746f03 	cmncc	r4, r3, lsl #30
 144:	02002605 	andeq	r2, r0, #5242880	; 0x500000
 148:	79030204 	stmdbvc	r3, {r2, r9}
 14c:	00050520 	andeq	r0, r5, r0, lsr #10
 150:	3c010402 	cfstrscc	mvf0, [r1], {2}
 154:	19031d05 	stmdbne	r3, {r0, r2, r8, sl, fp, ip}
 158:	4a0b053c 	bmi	2c1650 <startup-0x1fd3e9b0>
 15c:	05671d05 	strbeq	r1, [r7, #-3333]!	; 0xfffff2fb
 160:	26054a0b 	strcs	r4, [r5], -fp, lsl #20
 164:	2e0b0568 	cfsh32cs	mvfx0, mvfx11, #56
 168:	05672605 	strbeq	r2, [r7, #-1541]!	; 0xfffff9fb
 16c:	1d052e0b 	stcne	14, cr2, [r5, #-44]	; 0xffffffd4
 170:	4a0b0569 	bmi	2c171c <startup-0x1fd3e8e4>
 174:	05671d05 	strbeq	r1, [r7, #-3333]!	; 0xfffff2fb
 178:	27054a0b 	strcs	r4, [r5, -fp, lsl #20]
 17c:	2e0b0568 	cfsh32cs	mvfx0, mvfx11, #56
 180:	05672705 	strbeq	r2, [r7, #-1797]!	; 0xfffff8fb
 184:	10052e0b 	andne	r2, r5, fp, lsl #28
 188:	74200569 	strtvc	r0, [r0], #-1385	; 0xfffffa97
 18c:	05ac3f05 	streq	r3, [ip, #3845]!	; 0xf05
 190:	5d059032 	stcpl	0, cr9, [r5, #-200]	; 0xffffff38
 194:	904f0582 	subls	r0, pc, r2, lsl #11
 198:	c9661005 	stmdbgt	r6!, {r0, r2, ip}^
 19c:	05742005 	ldrbeq	r2, [r4, #-5]!
 1a0:	3205ac3f 	andcc	sl, r5, #16128	; 0x3f00
 1a4:	825d0590 	subshi	r0, sp, #144, 10	; 0x24000000
 1a8:	05904f05 	ldreq	r4, [r0, #3845]	; 0xf05
 1ac:	01056610 	tsteq	r5, r0, lsl r6
 1b0:	e61405c9 	ldr	r0, [r4], -r9, asr #11
 1b4:	053d0e05 	ldreq	r0, [sp, #-3589]!	; 0xfffff1fb
 1b8:	12052e05 	andne	r2, r5, #5, 28	; 0x50
 1bc:	03040200 	movweq	r0, #16896	; 0x4200
 1c0:	00260521 	eoreq	r0, r6, r1, lsr #10
 1c4:	d5030402 	strle	r0, [r3, #-1026]	; 0xfffffbfe
 1c8:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 1cc:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 1d0:	3c0c0301 	stccc	3, cr0, [ip], {1}
 1d4:	05a11105 	streq	r1, [r1, #261]!	; 0x105
 1d8:	05053d02 	streq	r3, [r5, #-3330]	; 0xfffff2fe
 1dc:	59020530 	stmdbpl	r2, {r4, r5, r8, sl}
 1e0:	05330505 	ldreq	r0, [r3, #-1285]!	; 0xfffffafb
 1e4:	09053212 	stmdbeq	r5, {r1, r4, r9, ip, sp}
 1e8:	002a052e 	eoreq	r0, sl, lr, lsr #10
 1ec:	20030402 	andcs	r0, r3, r2, lsl #8
 1f0:	02000905 	andeq	r0, r0, #81920	; 0x14000
 1f4:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 1f8:	09053f12 	stmdbeq	r5, {r1, r4, r8, r9, sl, fp, ip, sp}
 1fc:	0015052e 	andseq	r0, r5, lr, lsr #10
 200:	21030402 	tstcs	r3, r2, lsl #8
 204:	02002005 	andeq	r2, r0, #5
 208:	05900304 	ldreq	r0, [r0, #772]	; 0x304
 20c:	0402000d 	streq	r0, [r2], #-13
 210:	15057403 	strne	r7, [r5, #-1027]	; 0xfffffbfd
 214:	03040200 	movweq	r0, #16896	; 0x4200
 218:	001b052f 	andseq	r0, fp, pc, lsr #10
 21c:	90030402 	andls	r0, r3, r2, lsl #8
 220:	02000d05 	andeq	r0, r0, #320	; 0x140
 224:	05740304 	ldrbeq	r0, [r4, #-772]!	; 0xfffffcfc
 228:	0402002a 	streq	r0, [r2], #-42	; 0xffffffd6
 22c:	09052c03 	stmdbeq	r5, {r0, r1, sl, fp, sp}
 230:	01040200 	mrseq	r0, R12_usr
 234:	4203053c 	andmi	r0, r3, #60, 10	; 0xf000000
 238:	76030f05 	strvc	r0, [r3], -r5, lsl #30
 23c:	0003023c 	andeq	r0, r3, ip, lsr r2
 240:	04640101 	strbteq	r0, [r4], #-257	; 0xfffffeff
 244:	00030000 	andeq	r0, r3, r0
 248:	00000067 	andeq	r0, r0, r7, rrx
 24c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 250:	0101000d 	tsteq	r1, sp
 254:	00000101 	andeq	r0, r0, r1, lsl #2
 258:	00000100 	andeq	r0, r0, r0, lsl #2
 25c:	2f3a4301 	svccs	0x003a4301
 260:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 264:	72452f73 	subvc	r2, r5, #460	; 0x1cc
 268:	73736b69 	cmnvc	r3, #107520	; 0x1a400
 26c:	442f6e6f 	strtmi	r6, [pc], #-3695	; 274 <startup-0x1ffffd8c>
 270:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 274:	73746e65 	cmnvc	r4, #1616	; 0x650
 278:	6168432f 	cmnvs	r8, pc, lsr #6
 27c:	72656d6c 	rsbvc	r6, r5, #108, 26	; 0x1b00
 280:	4f4d2f73 	svcmi	0x004d2f73
 284:	6f422f50 	svcvs	0x00422f50
 288:	2d736469 	cfldrdcs	mvd6, [r3, #-420]!	; 0xfffffe5c
 28c:	756d6953 	strbvc	r6, [sp, #-2387]!	; 0xfffff6ad
 290:	6974616c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, sp, lr}^
 294:	00006e6f 	andeq	r6, r0, pc, ror #28
 298:	76697264 	strbtvc	r7, [r9], -r4, ror #4
 29c:	2e737265 	cdpcs	2, 7, cr7, cr3, cr5, {3}
 2a0:	00010063 	andeq	r0, r1, r3, rrx
 2a4:	69726400 	ldmdbvs	r2!, {sl, sp, lr}^
 2a8:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 2ac:	0100682e 	tsteq	r0, lr, lsr #16
 2b0:	05000000 	streq	r0, [r0, #-0]
 2b4:	0205001f 	andeq	r0, r5, #31
 2b8:	20000470 	andcs	r0, r0, r0, ror r4
 2bc:	05013403 	streq	r3, [r1, #-1027]	; 0xfffffbfd
 2c0:	0f052f05 	svceq	0x00052f05
 2c4:	2f050520 	svccs	0x00050520
 2c8:	05200f05 	streq	r0, [r0, #-3845]!	; 0xfffff0fb
 2cc:	0e052f05 	cdpeq	15, 0, cr2, cr5, cr5, {0}
 2d0:	2f050520 	svccs	0x00050520
 2d4:	05200f05 	streq	r0, [r0, #-3845]!	; 0xfffff0fb
 2d8:	0c052f0a 	stceq	15, cr2, [r5], {10}
 2dc:	01040200 	mrseq	r0, R12_usr
 2e0:	00160520 	andseq	r0, r6, r0, lsr #10
 2e4:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 2e8:	02000a05 	andeq	r0, r0, #20480	; 0x5000
 2ec:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 2f0:	0f052105 	svceq	0x00052105
 2f4:	2f010520 	svccs	0x00010520
 2f8:	05a01f05 	streq	r1, [r0, #3845]!	; 0xf05
 2fc:	052f2f05 	streq	r2, [pc, #-3845]!	; fffff3ff <buffer+0xdfffd0ef>
 300:	23052f01 	movwcs	r2, #24321	; 0x5f01
 304:	4c0c053e 	cfstr32mi	mvfx0, [ip], {62}	; 0x3e
 308:	05591005 	ldrbeq	r1, [r9, #-5]
 30c:	0905310b 	stmdbeq	r5, {r0, r1, r3, r8, ip, sp}
 310:	2f2f2f21 	svccs	0x002f2f21
 314:	372f0b05 	strcc	r0, [pc, -r5, lsl #22]!
 318:	05430105 	strbeq	r0, [r3, #-261]	; 0xfffffefb
 31c:	0c055a23 			; <UNDEFINED> instruction: 0x0c055a23
 320:	300b054c 	andcc	r0, fp, ip, asr #10
 324:	05210905 	streq	r0, [r1, #-2309]!	; 0xfffff6fb
 328:	053a590b 	ldreq	r5, [sl, #-2315]!	; 0xfffff6f5
 32c:	2d054001 	stccs	0, cr4, [r5, #-4]
 330:	6809055d 	stmdavs	r9, {r0, r2, r3, r4, r6, r8, sl}
 334:	4b200705 	blmi	801f50 <startup-0x1f7fe0b0>
 338:	05671505 	strbeq	r1, [r7, #-1285]!	; 0xfffffafb
 33c:	05056607 	streq	r6, [r5, #-1543]	; 0xfffff9f9
 340:	20110575 	andscs	r0, r1, r5, ror r5
 344:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 348:	0905762f 	stmdbeq	r5, {r0, r1, r2, r3, r5, r9, sl, ip, sp, lr}
 34c:	20070568 	andcs	r0, r7, r8, ror #10
 350:	0505674b 	streq	r6, [r5, #-1867]	; 0xfffff8b5
 354:	201105bb 			; <UNDEFINED> instruction: 0x201105bb
 358:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 35c:	0d057633 	stceq	6, cr7, [r5, #-204]	; 0xffffff34
 360:	4b100567 	blmi	401904 <startup-0x1fbfe6fc>
 364:	05770905 	ldrbeq	r0, [r7, #-2309]!	; 0xfffff6fb
 368:	bb4b2007 	bllt	12c838c <startup-0x1ed37c74>
 36c:	05830505 	streq	r0, [r3, #1285]	; 0x505
 370:	01052011 	tsteq	r5, r1, lsl r0
 374:	6826053d 	stmdavs	r6!, {r0, r2, r3, r4, r5, r8, sl}
 378:	3d3d0505 	cfldr32cc	mvfx0, [sp, #-20]!	; 0xffffffec
 37c:	05201005 	streq	r1, [r0, #-5]!
 380:	3d3d2f05 	ldccc	15, cr2, [sp, #-20]!	; 0xffffffec
 384:	3d310905 			; <UNDEFINED> instruction: 0x3d310905
 388:	18053d2f 	stmdane	r5, {r0, r1, r2, r3, r5, r8, sl, fp, ip, sp}
 38c:	2011052f 	andscs	r0, r1, pc, lsr #10
 390:	053d0e05 	ldreq	r0, [sp, #-3589]!	; 0xfffff1fb
 394:	0505680d 	streq	r6, [r5, #-2061]	; 0xfffff7f3
 398:	10053d23 	andne	r3, r5, r3, lsr #26
 39c:	2f010520 	svccs	0x00010520
 3a0:	05bc3105 	ldreq	r3, [ip, #261]!	; 0x105
 3a4:	053d6705 	ldreq	r6, [sp, #-1797]!	; 0xfffff8fb
 3a8:	05052010 	streq	r2, [r5, #-16]
 3ac:	593d3d2f 	ldmdbpl	sp!, {r0, r1, r2, r3, r5, r8, sl, fp, ip, sp}
 3b0:	12053d2f 	andne	r3, r5, #3008	; 0xbc0
 3b4:	200d052f 	andcs	r0, sp, pc, lsr #10
 3b8:	3d4b0505 	cfstr64cc	mvdx0, [fp, #-20]	; 0xffffffec
 3bc:	05201005 	streq	r1, [r0, #-5]!
 3c0:	1d052f08 	stcne	15, cr2, [r5, #-32]	; 0xffffffe0
 3c4:	01040200 	mrseq	r0, R12_usr
 3c8:	4b09054a 	blmi	2418f8 <startup-0x1fdbe708>
 3cc:	300c0559 	andcc	r0, ip, r9, asr r5
 3d0:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 3d4:	0505ca3e 	streq	ip, [r5, #-2622]	; 0xfffff5c2
 3d8:	20120591 	mulscs	r2, r1, r5
 3dc:	593d0505 	ldmdbpl	sp!, {r0, r2, r8, sl}
 3e0:	052f3d2f 	streq	r3, [pc, #-3375]!	; fffff6b9 <buffer+0xdfffd3a9>
 3e4:	1d053e08 	stcne	14, cr3, [r5, #-32]	; 0xffffffe0
 3e8:	01040200 	mrseq	r0, R12_usr
 3ec:	4b09054a 	blmi	24191c <startup-0x1fdbe6e4>
 3f0:	31050559 	tstcc	r5, r9, asr r5
 3f4:	05201205 	streq	r1, [r0, #-517]!	; 0xfffffdfb
 3f8:	053d2f05 	ldreq	r2, [sp, #-3845]!	; 0xfffff0fb
 3fc:	48053d01 	stmdami	r5, {r0, r8, sl, fp, ip, sp}
 400:	91050568 	tstls	r5, r8, ror #10
 404:	3d3d593d 			; <UNDEFINED> instruction: 0x3d3d593d
 408:	05830105 	streq	r0, [r3, #261]	; 0x105
 40c:	05054c42 	streq	r4, [r5, #-3138]	; 0xfffff3be
 410:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 414:	8301053d 	movwhi	r0, #5437	; 0x153d
 418:	054c3605 	strbeq	r3, [ip, #-1541]	; 0xfffff9fb
 41c:	0c056705 	stceq	7, cr6, [r5], {5}
 420:	67010559 	smlsdvs	r1, r9, r5, r0
 424:	054c2205 	strbeq	r2, [ip, #-517]	; 0xfffffdfb
 428:	3d3d2f05 	ldccc	15, cr2, [sp, #-20]!	; 0xffffffec
 42c:	4b3e3d3d 	blmi	f8f928 <startup-0x1f0706d8>
 430:	4c4b4b4b 	mcrrmi	11, 4, r4, fp, cr11
 434:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 438:	12053e24 	andne	r3, r5, #36, 28	; 0x240
 43c:	3c05053d 	cfstr32cc	mvfx0, [r5], {61}	; 0x3d
 440:	9f210905 	svcls	0x00210905
 444:	054b1605 	strbeq	r1, [fp, #-1541]	; 0xfffff9fb
 448:	0d053c09 	stceq	12, cr3, [r5, #-36]	; 0xffffffdc
 44c:	03040200 	movweq	r0, #16896	; 0x4200
 450:	002c0521 	eoreq	r0, ip, r1, lsr #10
 454:	49030402 	stmdbmi	r3, {r1, sl}
 458:	02000905 	andeq	r0, r0, #81920	; 0x14000
 45c:	05580104 	ldrbeq	r0, [r8, #-260]	; 0xfffffefc
 460:	0402002a 	streq	r0, [r2], #-42	; 0xffffffd6
 464:	05054702 	streq	r4, [r5, #-1794]	; 0xfffff8fe
 468:	01040200 	mrseq	r0, R12_usr
 46c:	51010558 	tstpl	r1, r8, asr r5
 470:	055e3305 	ldrbeq	r3, [lr, #-773]	; 0xfffffcfb
 474:	0559e506 	ldrbeq	lr, [r9, #-1286]	; 0xfffffafa
 478:	0e055905 	vmlaeq.f16	s10, s10, s10	; <UNPREDICTABLE>
 47c:	01040200 	mrseq	r0, R12_usr
 480:	5d150558 	cfldr32pl	mvfx0, [r5, #-352]	; 0xfffffea0
 484:	053c1a05 	ldreq	r1, [ip, #-2565]!	; 0xfffff5fb
 488:	1205580a 	andne	r5, r5, #655360	; 0xa0000
 48c:	3c17053e 	cfldr32cc	mvfx0, [r7], {62}	; 0x3e
 490:	05900b05 	ldreq	r0, [r0, #2821]	; 0xb05
 494:	05053c07 	streq	r3, [r5, #-3079]	; 0xfffff3f9
 498:	4b08053d 	blmi	201994 <startup-0x1fdfe66c>
 49c:	055b0505 	ldrbeq	r0, [fp, #-1285]	; 0xfffffafb
 4a0:	09054b0e 	stmdbeq	r5, {r1, r2, r3, r8, r9, fp, lr}
 4a4:	760e054b 	strvc	r0, [lr], -fp, asr #10
 4a8:	054b0905 	strbeq	r0, [fp, #-2309]	; 0xfffff6fb
 4ac:	05c96902 	strbeq	r6, [r9, #2306]	; 0x902
 4b0:	0205ca0e 	andeq	ip, r5, #57344	; 0xe000
 4b4:	ae050591 	mcrge	5, 0, r0, cr5, cr1, {4}
 4b8:	a04b0805 	subge	r0, fp, r5, lsl #16
 4bc:	05930205 	ldreq	r0, [r3, #517]	; 0x205
 4c0:	ac610303 	stclge	3, cr0, [r1], #-12
 4c4:	20030105 	andcs	r0, r3, r5, lsl #2
 4c8:	5a2f0520 	bpl	bc1950 <startup-0x1f43e6b0>
 4cc:	05e50705 	strbeq	r0, [r5, #1797]!	; 0x705
 4d0:	0c053c05 	stceq	12, cr3, [r5], {5}
 4d4:	02040200 	andeq	r0, r4, #0, 4
 4d8:	4c1c052e 	cfldr32mi	mvfx0, [ip], {46}	; 0x2e
 4dc:	054a1605 	strbeq	r1, [sl, #-1541]	; 0xfffff9fb
 4e0:	05052e0d 	streq	r2, [r5, #-3597]	; 0xfffff1f3
 4e4:	4b12053e 	blmi	4819e4 <startup-0x1fb7e61c>
 4e8:	15057608 	strne	r7, [r5, #-1544]	; 0xfffff9f8
 4ec:	c8087903 	stmdagt	r8, {r0, r1, r8, fp, ip, sp, lr}
 4f0:	09030105 	stmdbeq	r3, {r0, r2, r8}
 4f4:	68150520 	ldmdavs	r5, {r5, r8, sl}
 4f8:	053d0f05 	ldreq	r0, [sp, #-3845]!	; 0xfffff0fb
 4fc:	10053c02 	andne	r3, r5, r2, lsl #24
 500:	3c030521 	cfstr32cc	mvfx0, [r3], {33}	; 0x21
 504:	02000d05 	andeq	r0, r0, #320	; 0x140
 508:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 50c:	04020011 	streq	r0, [r2], #-17	; 0xffffffef
 510:	1f054a03 	svcne	0x00054a03
 514:	03040200 	movweq	r0, #16896	; 0x4200
 518:	00180557 	andseq	r0, r8, r7, asr r5
 51c:	58010402 	stmdapl	r1, {r1, sl}
 520:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 524:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 528:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
 52c:	02052d02 	andeq	r2, r5, #2, 26	; 0x80
 530:	01040200 	mrseq	r0, R12_usr
 534:	4f010558 	svcmi	0x00010558
 538:	05761405 	ldrbeq	r1, [r6, #-1029]!	; 0xfffffbfb
 53c:	02053d0f 	andeq	r3, r5, #960	; 0x3c0
 540:	2110053c 	tstcs	r0, ip, lsr r5
 544:	053c0305 	ldreq	r0, [ip, #-773]!	; 0xfffffcfb
 548:	04020004 	streq	r0, [r2], #-4
 54c:	02002103 	andeq	r2, r0, #-1073741824	; 0xc0000000
 550:	00910304 	addseq	r0, r1, r4, lsl #6
 554:	9f030402 	svcls	0x00030402
 558:	03040200 	movweq	r0, #16896	; 0x4200
 55c:	040200bc 	streq	r0, [r2], #-188	; 0xffffff44
 560:	1e054b03 	vmlane.f64	d4, d5, d3
 564:	03040200 	movweq	r0, #16896	; 0x4200
 568:	054a7a03 	strbeq	r7, [sl, #-2563]	; 0xfffff5fd
 56c:	04020003 	streq	r0, [r2], #-3
 570:	1c055801 	stcne	8, cr5, [r5], {1}
 574:	02040200 	andeq	r0, r4, #0, 4
 578:	00020549 	andeq	r0, r2, r9, asr #10
 57c:	58010402 	stmdapl	r1, {r1, sl}
 580:	0a030f05 	beq	c419c <startup-0x1ff3be64>
 584:	3c02054a 	cfstr32cc	mvfx0, [r2], {74}	; 0x4a
 588:	05211005 	streq	r1, [r1, #-5]!
 58c:	29053c03 	stmdbcs	r5, {r0, r1, sl, fp, ip, sp}
 590:	03040200 	movweq	r0, #16896	; 0x4200
 594:	00260521 	eoreq	r0, r6, r1, lsr #10
 598:	58030402 	stmdapl	r3, {r1, sl}
 59c:	02000405 	andeq	r0, r0, #83886080	; 0x5000000
 5a0:	003c0304 	eorseq	r0, ip, r4, lsl #6
 5a4:	59030402 	stmdbpl	r3, {r1, sl}
 5a8:	03040200 	movweq	r0, #16896	; 0x4200
 5ac:	0402009f 	streq	r0, [r2], #-159	; 0xffffff61
 5b0:	0200bc03 	andeq	fp, r0, #768	; 0x300
 5b4:	054b0304 	strbeq	r0, [fp, #-772]	; 0xfffffcfc
 5b8:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
 5bc:	4a7a0303 	bmi	1e811d0 <startup-0x1e17ee30>
 5c0:	02001905 	andeq	r1, r0, #81920	; 0x14000
 5c4:	05580104 	ldrbeq	r0, [r8, #-260]	; 0xfffffefc
 5c8:	04020003 	streq	r0, [r2], #-3
 5cc:	1c053c01 	stcne	12, cr3, [r5], {1}
 5d0:	02040200 	andeq	r0, r4, #0, 4
 5d4:	0002052d 	andeq	r0, r2, sp, lsr #10
 5d8:	58010402 	stmdapl	r1, {r1, sl}
 5dc:	0a030105 	beq	c09f8 <startup-0x1ff3f608>
 5e0:	850d054a 	strhi	r0, [sp, #-1354]	; 0xfffffab6
 5e4:	05330505 	ldreq	r0, [r3, #-1285]!	; 0xfffffafb
 5e8:	02052010 	andeq	r2, r5, #16
 5ec:	20220530 	eorcs	r0, r2, r0, lsr r5
 5f0:	67311305 	ldrvs	r1, [r1, -r5, lsl #6]!
 5f4:	67761405 	ldrbvs	r1, [r6, -r5, lsl #8]!
 5f8:	67771305 	ldrbvs	r1, [r7, -r5, lsl #6]!
 5fc:	0505676a 	streq	r6, [r5, #-1898]	; 0xfffff896
 600:	2f010569 	svccs	0x00010569
 604:	5b081a05 	blpl	206e20 <startup-0x1fdf91e0>
 608:	053d1305 	ldreq	r1, [sp, #-773]!	; 0xfffffcfb
 60c:	054b6a0a 	strbeq	r6, [fp, #-2570]	; 0xfffff5f6
 610:	05054b0f 	streq	r4, [r5, #-2831]	; 0xfffff4f1
 614:	211c054a 	tstcs	ip, sl, asr #10
 618:	05740e05 	ldrbeq	r0, [r4, #-3589]!	; 0xfffff1fb
 61c:	11053d09 	tstne	r5, r9, lsl #26
 620:	3d1d0520 	cfldr32cc	mvfx0, [sp, #-128]	; 0xffffff80
 624:	053c0e05 	ldreq	r0, [ip, #-3589]!	; 0xfffff1fb
 628:	1705590c 	strne	r5, [r5, -ip, lsl #18]
 62c:	4a10054c 	bmi	401b64 <startup-0x1fbfe49c>
 630:	02002305 	andeq	r2, r0, #335544320	; 0x14000000
 634:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 638:	10054b17 	andne	r4, r5, r7, lsl fp
 63c:	00230558 	eoreq	r0, r3, r8, asr r5
 640:	20010402 	andcs	r0, r1, r2, lsl #8
 644:	054b1705 	strbeq	r1, [fp, #-1797]	; 0xfffff8fb
 648:	23055810 	movwcs	r5, #22544	; 0x5810
 64c:	01040200 	mrseq	r0, R12_usr
 650:	4b170520 	blmi	5c1ad8 <startup-0x1fa3e528>
 654:	05581005 	ldrbeq	r1, [r8, #-5]
 658:	04020023 	streq	r0, [r2], #-35	; 0xffffffdd
 65c:	1a052001 	bne	148668 <startup-0x1feb7998>
 660:	9e13054c 	cfmac32ls	mvfx0, mvfx3, mvfx12
 664:	02002205 	andeq	r2, r0, #1342177280	; 0x50000000
 668:	75030204 	strvc	r0, [r3, #-516]	; 0xfffffdfc
 66c:	0005054a 	andeq	r0, r5, sl, asr #10
 670:	66010402 	strvs	r0, [r1], -r2, lsl #8
 674:	05580e03 	ldrbeq	r0, [r8, #-3587]	; 0xfffff1fd
 678:	0805200d 	stmdaeq	r5, {r0, r2, r3, sp}
 67c:	5910052f 	ldmdbpl	r0, {r0, r1, r2, r3, r5, r8, sl}
 680:	05301405 	ldreq	r1, [r0, #-1029]!	; 0xfffffbfb
 684:	04020001 	streq	r0, [r2], #-1
 688:	1f055a01 	svcne	0x00055a01
 68c:	670a05af 	strvs	r0, [sl, -pc, lsr #11]
 690:	054b0805 	strbeq	r0, [fp, #-2053]	; 0xfffff7fb
 694:	17054b0e 	strne	r4, [r5, -lr, lsl #22]
 698:	2e0d0575 	cfrshl64cs	mvdx13, mvdx5, r0
 69c:	054c0505 	strbeq	r0, [ip, #-1285]	; 0xfffffafb
 6a0:	0105200e 	tsteq	r5, lr
 6a4:	0008024b 	andeq	r0, r8, fp, asr #4
 6a8:	Address 0x000006a8 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
   4:	00707574 	rsbseq	r7, r0, r4, ror r5
   8:	61647075 	smcvs	18181	; 0x4705
   c:	65566574 	ldrbvs	r6, [r6, #-1396]	; 0xfffffa8c
  10:	5864006c 	stmdapl	r4!, {r2, r3, r5, r6}^
  14:	65686f43 	strbvs	r6, [r8, #-3907]!	; 0xfffff0bd
  18:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  1c:	67766100 	ldrbvs	r6, [r6, -r0, lsl #2]!
  20:	736f5059 	cmnvc	pc, #89	; 0x59
  24:	53596400 	cmppl	r9, #0, 8
  28:	72617065 	rsbvc	r7, r1, #101	; 0x65
  2c:	6f697461 	svcvs	0x00697461
  30:	6c66006e 	stclvs	0, cr0, [r6], #-440	; 0xfffffe48
  34:	0074616f 	rsbseq	r6, r4, pc, ror #2
  38:	61757173 	cmnvs	r5, r3, ror r1
  3c:	44646572 	strbtmi	r6, [r4], #-1394	; 0xfffffa8e
  40:	61747369 	cmnvs	r4, r9, ror #6
  44:	0065636e 	rsbeq	r6, r5, lr, ror #6
  48:	61647075 	smcvs	18181	; 0x4705
  4c:	6f506574 	svcvs	0x00506574
  50:	6e750073 	mrcvs	0, 3, r0, cr5, cr3, {3}
  54:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
  58:	63206465 			; <UNDEFINED> instruction: 0x63206465
  5c:	00726168 	rsbseq	r6, r2, r8, ror #2
  60:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
  64:	646c6f00 	strbtvs	r6, [ip], #-3840	; 0xfffff100
  68:	7869705f 	stmdavc	r9!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
  6c:	47006c65 	strmi	r6, [r0, -r5, ror #24]
  70:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
  74:	39203939 	stmdbcc	r0!, {r0, r3, r4, r5, r8, fp, ip, sp}
  78:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
  7c:	31303220 	teqcc	r0, r0, lsr #4
  80:	32303139 	eorscc	r3, r0, #1073741838	; 0x4000000e
  84:	72282035 	eorvc	r2, r8, #53	; 0x35
  88:	61656c65 	cmnvs	r5, r5, ror #24
  8c:	20296573 	eorcs	r6, r9, r3, ror r5
  90:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
  94:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
  98:	622d392d 	eorvs	r3, sp, #737280	; 0xb4000
  9c:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  a0:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  a4:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  a8:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  ac:	39353737 	ldmdbcc	r5!, {r0, r1, r2, r4, r5, r8, r9, sl, ip, sp}
  b0:	2d205d39 	stccs	13, cr5, [r0, #-228]!	; 0xffffff1c
  b4:	6f6c666d 	svcvs	0x006c666d
  b8:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
  bc:	733d6962 	teqvc	sp, #1605632	; 0x188000
  c0:	2074666f 	rsbscs	r6, r4, pc, ror #12
  c4:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  c8:	20626d75 	rsbcs	r6, r2, r5, ror sp
  cc:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
  d0:	613d6863 	teqvs	sp, r3, ror #16
  d4:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
  d8:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
  dc:	4f2d2067 	svcmi	0x002d2067
  e0:	732d2030 			; <UNDEFINED> instruction: 0x732d2030
  e4:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
  e8:	73003939 	movwvc	r3, #2361	; 0x939
  ec:	50586d75 	subspl	r6, r8, r5, ror sp
  f0:	6400736f 	strvs	r7, [r0], #-879	; 0xfffffc91
  f4:	61757153 	cmnvs	r5, r3, asr r1
  f8:	00646572 	rsbeq	r6, r4, r2, ror r5
  fc:	64696f62 	strbtvs	r6, [r9], #-3938	; 0xfffff09e
 100:	3a430073 	bcc	10c02d4 <startup-0x1ef3fd2c>
 104:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 108:	452f7372 	strmi	r7, [pc, #-882]!	; fffffd9e <buffer+0xdfffda8e>
 10c:	736b6972 	cmnvc	fp, #1867776	; 0x1c8000
 110:	2f6e6f73 	svccs	0x006e6f73
 114:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 118:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 11c:	68432f73 	stmdavs	r3, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp}^
 120:	656d6c61 	strbvs	r6, [sp, #-3169]!	; 0xfffff39f
 124:	4d2f7372 	stcmi	3, cr7, [pc, #-456]!	; ffffff64 <buffer+0xdfffdc54>
 128:	422f504f 	eormi	r5, pc, #79	; 0x4f
 12c:	7364696f 	cmnvc	r4, #1818624	; 0x1bc000
 130:	6d69532d 	stclvs	3, cr5, [r9, #-180]!	; 0xffffff4c
 134:	74616c75 	strbtvc	r6, [r1], #-3189	; 0xfffff38b
 138:	2f6e6f69 	svccs	0x006e6f69
 13c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 140:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
 144:	75730063 	ldrbvc	r0, [r3, #-99]!	; 0xffffff9d
 148:	6556586d 	ldrbvs	r5, [r6, #-2157]	; 0xfffff793
 14c:	616d006c 	cmnvs	sp, ip, rrx
 150:	64006e69 	strvs	r6, [r0], #-3689	; 0xfffff197
 154:	70655358 	rsbvc	r5, r5, r8, asr r3
 158:	74617261 	strbtvc	r7, [r1], #-609	; 0xfffffd9f
 15c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
 160:	666c6573 			; <UNDEFINED> instruction: 0x666c6573
 164:	736e7500 	cmnvc	lr, #0, 10
 168:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 16c:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 170:	69750074 	ldmdbvs	r5!, {r2, r4, r5, r6}^
 174:	5f38746e 	svcpl	0x0038746e
 178:	72630074 	rsbvc	r0, r3, #116	; 0x74
 17c:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0xfffffe9b
 180:	64696f42 	strbtvs	r6, [r9], #-3906	; 0xfffff0be
 184:	42700073 	rsbsmi	r0, r0, #115	; 0x73
 188:	0044494f 	subeq	r4, r4, pc, asr #18
 18c:	596d7573 	stmdbpl	sp!, {r0, r1, r4, r5, r6, r8, sl, ip, sp, lr}^
 190:	006c6556 	rsbeq	r6, ip, r6, asr r5
 194:	6f435964 	svcvs	0x00435964
 198:	69736568 	ldmdbvs	r3!, {r3, r5, r6, r8, sl, sp, lr}^
 19c:	64006e6f 	strvs	r6, [r0], #-3695	; 0xfffff191
 1a0:	696c4159 	stmdbvs	ip!, {r0, r3, r4, r6, r8, lr}^
 1a4:	656d6e67 	strbvs	r6, [sp, #-3687]!	; 0xfffff199
 1a8:	6e00746e 	cdpvs	4, 0, cr7, cr0, cr14, {3}
 1ac:	62726165 	rsbsvs	r6, r2, #1073741849	; 0x40000019
 1b0:	756f4379 	strbvc	r4, [pc, #-889]!	; fffffe3f <buffer+0xdfffdb2f>
 1b4:	7400746e 	strvc	r7, [r0], #-1134	; 0xfffffb92
 1b8:	64696f42 	strbtvs	r6, [r9], #-3906	; 0xfffff0be
 1bc:	67766100 	ldrbvs	r6, [r6, -r0, lsl #2]!
 1c0:	736f5058 	cmnvc	pc, #88	; 0x58
 1c4:	65567800 	ldrbvs	r7, [r6, #-2048]	; 0xfffff800
 1c8:	6564006c 	strbvs	r0, [r4, #-108]!	; 0xffffff94
 1cc:	5f79616c 	svcpl	0x0079616c
 1d0:	6c6c696d 			; <UNDEFINED> instruction: 0x6c6c696d
 1d4:	76610069 	strbtvc	r0, [r1], -r9, rrx
 1d8:	65565867 	ldrbvs	r5, [r6, #-2151]	; 0xfffff799
 1dc:	746f006c 	strbtvc	r0, [pc], #-108	; 1e4 <startup-0x1ffffe1c>
 1e0:	00726568 	rsbseq	r6, r2, r8, ror #10
 1e4:	6c415864 	mcrrvs	8, 6, r5, r1, cr4
 1e8:	6d6e6769 	stclvs	7, cr6, [lr, #-420]!	; 0xfffffe5c
 1ec:	00746e65 	rsbseq	r6, r4, r5, ror #28
 1f0:	555c3a43 	ldrbpl	r3, [ip, #-2627]	; 0xfffff5bd
 1f4:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 1f8:	6972455c 	ldmdbvs	r2!, {r2, r3, r4, r6, r8, sl, lr}^
 1fc:	6f73736b 	svcvs	0x0073736b
 200:	6f445c6e 	svcvs	0x00445c6e
 204:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 208:	5c73746e 	cfldrdpl	mvd7, [r3], #-440	; 0xfffffe48
 20c:	6c616843 	stclvs	8, cr6, [r1], #-268	; 0xfffffef4
 210:	7372656d 	cmnvc	r2, #457179136	; 0x1b400000
 214:	504f4d5c 	subpl	r4, pc, ip, asr sp	; <UNPREDICTABLE>
 218:	696f425c 	stmdbvs	pc!, {r2, r3, r4, r6, r9, lr}^	; <UNPREDICTABLE>
 21c:	532d7364 			; <UNDEFINED> instruction: 0x532d7364
 220:	6c756d69 	ldclvs	13, cr6, [r5], #-420	; 0xfffffe5c
 224:	6f697461 	svcvs	0x00697461
 228:	7573006e 	ldrbvc	r0, [r3, #-110]!	; 0xffffff92
 22c:	6f50596d 	svcvs	0x0050596d
 230:	56790073 			; <UNDEFINED> instruction: 0x56790073
 234:	61006c65 	tstvs	r0, r5, ror #24
 238:	56596776 			; <UNDEFINED> instruction: 0x56596776
 23c:	70006c65 	andvc	r6, r0, r5, ror #24
 240:	00656761 	rsbeq	r6, r5, r1, ror #14
 244:	43676573 	cmnmi	r7, #482344960	; 0x1cc00000
 248:	7365646f 	cmnvc	r5, #1862270976	; 0x6f000000
 24c:	6c617600 	stclvs	6, cr7, [r1], #-0
 250:	73006575 	movwvc	r6, #1397	; 0x575
 254:	63656c65 	cmnvs	r5, #25856	; 0x6500
 258:	6f635f74 	svcvs	0x00635f74
 25c:	6f72746e 	svcvs	0x0072746e
 260:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 264:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 268:	756f0074 	strbvc	r0, [pc, #-116]!	; 1fc <startup-0x1ffffe04>
 26c:	6c615674 	stclvs	6, cr5, [r1], #-464	; 0xfffffe30
 270:	61726700 	cmnvs	r2, r0, lsl #14
 274:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 278:	6165725f 	cmnvs	r5, pc, asr r2
 27c:	61645f64 	cmnvs	r4, r4, ror #30
 280:	72006174 	andvc	r6, r0, #116, 2
 284:	586c6165 	stmdapl	ip!, {r0, r2, r5, r6, r8, sp, lr}^
 288:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 28c:	355f7961 	ldrbcc	r7, [pc, #-2401]	; fffff933 <buffer+0xdfffd623>
 290:	736e3030 	cmnvc	lr, #48	; 0x30
 294:	73616200 	cmnvc	r1, #0, 4
 298:	72670065 	rsbvc	r0, r7, #101	; 0x65
 29c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 2a0:	61775f63 	cmnvs	r7, r3, ror #30
 2a4:	725f7469 	subsvc	r7, pc, #1761607680	; 0x69000000
 2a8:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
 2ac:	73756200 	cmnvc	r5, #0, 4
 2b0:	72670079 	rsbvc	r0, r7, #121	; 0x79
 2b4:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 2b8:	6e695f63 	cdpvs	15, 6, cr5, cr9, cr3, {3}
 2bc:	61697469 	cmnvs	r9, r9, ror #8
 2c0:	657a696c 	ldrbvs	r6, [sl, #-2412]!	; 0xfffff694
 2c4:	61726700 	cmnvs	r2, r0, lsl #14
 2c8:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 2cc:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 2d0:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 2d4:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
 2d8:	00726165 	rsbseq	r6, r2, r5, ror #2
 2dc:	70617267 	rsbvc	r7, r1, r7, ror #4
 2e0:	5f636968 	svcpl	0x00636968
 2e4:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 2e8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 2ec:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 2f0:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 2f4:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 23a <startup-0x1ffffdc6>	; <UNPREDICTABLE>
 2f8:	6f726b69 	svcvs	0x00726b69
 2fc:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 300:	325f7961 	subscc	r7, pc, #1589248	; 0x184000
 304:	736e3035 	cmnvc	lr, #53	; 0x35
 308:	566e6900 	strbtpl	r6, [lr], -r0, lsl #18
 30c:	6d006c61 	stcvs	12, cr6, [r0, #-388]	; 0xfffffe7c
 310:	006b7361 	rsbeq	r7, fp, r1, ror #6
 314:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 318:	756f0078 	strbvc	r0, [pc, #-120]!	; 2a8 <startup-0x1ffffd58>
 31c:	65733774 	ldrbvs	r3, [r3, #-1908]!	; 0xfffff88c
 320:	72670067 	rsbvc	r0, r7, #103	; 0x67
 324:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 328:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 32c:	5f657469 	svcpl	0x00657469
 330:	61746164 	cmnvs	r4, r4, ror #2
 334:	2f3a4300 	svccs	0x003a4300
 338:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 33c:	72452f73 	subvc	r2, r5, #460	; 0x1cc
 340:	73736b69 	cmnvc	r3, #107520	; 0x1a400
 344:	442f6e6f 	strtmi	r6, [pc], #-3695	; 34c <startup-0x1ffffcb4>
 348:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 34c:	73746e65 	cmnvc	r4, #1616	; 0x650
 350:	6168432f 	cmnvs	r8, pc, lsr #6
 354:	72656d6c 	rsbvc	r6, r5, #108, 26	; 0x1b00
 358:	4f4d2f73 	svcmi	0x004d2f73
 35c:	6f422f50 	svcvs	0x00422f50
 360:	2d736469 	cfldrdcs	mvd6, [r3, #-420]!	; 0xfffffe5c
 364:	756d6953 	strbvc	r6, [sp, #-2387]!	; 0xfffff6ad
 368:	6974616c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, sp, lr}^
 36c:	642f6e6f 	strtvs	r6, [pc], #-3695	; 374 <startup-0x1ffffc8c>
 370:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 374:	632e7372 			; <UNDEFINED> instruction: 0x632e7372
 378:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 37c:	72670062 	rsbvc	r0, r7, #98	; 0x62
 380:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 384:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 388:	00657469 	rsbeq	r7, r5, r9, ror #8
 38c:	70617267 	rsbvc	r7, r1, r7, ror #4
 390:	5f636968 	svcpl	0x00636968
 394:	61656c63 	cmnvs	r5, r3, ror #24
 398:	63735f72 	cmnvs	r3, #456	; 0x1c8
 39c:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 3a0:	61726400 	cmnvs	r2, r0, lsl #8
 3a4:	75625f77 	strbvc	r5, [r2, #-3959]!	; 0xfffff089
 3a8:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 3ac:	61726700 	cmnvs	r2, r0, lsl #14
 3b0:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 3b4:	6165725f 	cmnvs	r5, pc, asr r2
 3b8:	656b0064 	strbvs	r0, [fp, #-100]!	; 0xffffff9c
 3bc:	63007379 	movwvs	r7, #889	; 0x379
 3c0:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 3c4:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
 3c8:	00726566 	rsbseq	r6, r2, r6, ror #10
 3cc:	70617267 	rsbvc	r7, r1, r7, ror #4
 3d0:	5f636968 	svcpl	0x00636968
 3d4:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 3d8:	6f635f65 	svcvs	0x00635f65
 3dc:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
 3e0:	Address 0x000003e0 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003041 	andeq	r3, r0, r1, asr #32
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000026 	andeq	r0, r0, r6, lsr #32
  10:	4d524105 	ldfmie	f4, [r2, #-20]	; 0xffffffec
  14:	4b367620 	blmi	d9d89c <startup-0x1f262764>
  18:	07090600 	streq	r0, [r9, -r0, lsl #12]
  1c:	0901084d 	stmdbeq	r1, {r0, r2, r3, r6, fp}
  20:	14041201 	strne	r1, [r4], #-513	; 0xfffffdff
  24:	17011501 	strne	r1, [r1, -r1, lsl #10]
  28:	19011803 	stmdbne	r1, {r0, r1, fp, ip}
  2c:	1e011a01 	vmlane.f32	s2, s2, s2
  30:	Address 0x00000030 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000058 	andeq	r0, r0, r8, asr r0
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	180e4101 	stmdane	lr, {r0, r8, lr}
  3c:	00070d41 	andeq	r0, r7, r1, asr #26
  40:	00000020 	andeq	r0, r0, r0, lsr #32
  44:	00000000 	andeq	r0, r0, r0
  48:	20000068 	andcs	r0, r0, r8, rrx
  4c:	00000038 	andeq	r0, r0, r8, lsr r0
  50:	400c0e41 	andmi	r0, ip, r1, asr #28
  54:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  58:	018e4002 	orreq	r4, lr, r2
  5c:	41180e41 	tstmi	r8, r1, asr #28
  60:	0000070d 	andeq	r0, r0, sp, lsl #14
  64:	0000001c 	andeq	r0, r0, ip, lsl r0
  68:	00000000 	andeq	r0, r0, r0
  6c:	200000a0 	andcs	r0, r0, r0, lsr #1
  70:	00000040 	andeq	r0, r0, r0, asr #32
  74:	40080e41 	andmi	r0, r8, r1, asr #28
  78:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  7c:	100e4101 	andne	r4, lr, r1, lsl #2
  80:	00070d41 	andeq	r0, r7, r1, asr #26
  84:	00000024 	andeq	r0, r0, r4, lsr #32
  88:	00000000 	andeq	r0, r0, r0
  8c:	200000e0 	andcs	r0, r0, r0, ror #1
  90:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
  94:	40100e41 	andsmi	r0, r0, r1, asr #28
  98:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
  9c:	02874003 	addeq	r4, r7, #3
  a0:	41018e40 	tstmi	r1, r0, asr #28
  a4:	0d41680e 	stcleq	8, cr6, [r1, #-56]	; 0xffffffc8
  a8:	00000007 	andeq	r0, r0, r7
  ac:	00000020 	andeq	r0, r0, r0, lsr #32
  b0:	00000000 	andeq	r0, r0, r0
  b4:	20000394 	mulcs	r0, r4, r3
  b8:	00000048 	andeq	r0, r0, r8, asr #32
  bc:	400c0e41 	andmi	r0, ip, r1, asr #28
  c0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  c4:	018e4002 	orreq	r4, lr, r2
  c8:	41300e41 	teqmi	r0, r1, asr #28
  cc:	0000070d 	andeq	r0, r0, sp, lsl #14
  d0:	0000001c 	andeq	r0, r0, ip, lsl r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	200003dc 	ldrdcs	r0, [r0], -ip
  dc:	00000094 	muleq	r0, r4, r0
  e0:	40080e41 	andmi	r0, r8, r1, asr #28
  e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  e8:	100e4101 	andne	r4, lr, r1, lsl #2
  ec:	00070d41 	andeq	r0, r7, r1, asr #26
  f0:	0000000c 	andeq	r0, r0, ip
  f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  f8:	7c020001 	stcvc	0, cr0, [r2], {1}
  fc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 100:	00000018 	andeq	r0, r0, r8, lsl r0
 104:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 108:	20000470 	andcs	r0, r0, r0, ror r4
 10c:	00000044 	andeq	r0, r0, r4, asr #32
 110:	40080e41 	andmi	r0, r8, r1, asr #28
 114:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 118:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 11c:	00000018 	andeq	r0, r0, r8, lsl r0
 120:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 124:	200004b4 			; <UNDEFINED> instruction: 0x200004b4
 128:	00000012 	andeq	r0, r0, r2, lsl r0
 12c:	40080e41 	andmi	r0, r8, r1, asr #28
 130:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 134:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 140:	200004c6 	andcs	r0, r0, r6, asr #9
 144:	0000003e 	andeq	r0, r0, lr, lsr r0
 148:	40080e41 	andmi	r0, r8, r1, asr #28
 14c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 150:	100e4101 	andne	r4, lr, r1, lsl #2
 154:	00070d41 	andeq	r0, r7, r1, asr #26
 158:	0000001c 	andeq	r0, r0, ip, lsl r0
 15c:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 160:	20000504 	andcs	r0, r0, r4, lsl #10
 164:	0000002e 	andeq	r0, r0, lr, lsr #32
 168:	40080e41 	andmi	r0, r8, r1, asr #28
 16c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 170:	100e4101 	andne	r4, lr, r1, lsl #2
 174:	00070d41 	andeq	r0, r7, r1, asr #26
 178:	0000001c 	andeq	r0, r0, ip, lsl r0
 17c:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 180:	20000532 	andcs	r0, r0, r2, lsr r5
 184:	00000052 	andeq	r0, r0, r2, asr r0
 188:	40080e41 	andmi	r0, r8, r1, asr #28
 18c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 190:	180e4101 	stmdane	lr, {r0, r8, lr}
 194:	00070d41 	andeq	r0, r7, r1, asr #26
 198:	0000001c 	andeq	r0, r0, ip, lsl r0
 19c:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 1a0:	20000584 	andcs	r0, r0, r4, lsl #11
 1a4:	00000050 	andeq	r0, r0, r0, asr r0
 1a8:	40080e41 	andmi	r0, r8, r1, asr #28
 1ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b0:	180e4101 	stmdane	lr, {r0, r8, lr}
 1b4:	00070d41 	andeq	r0, r7, r1, asr #26
 1b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1bc:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 1c0:	200005d4 	ldrdcs	r0, [r0], -r4
 1c4:	00000068 	andeq	r0, r0, r8, rrx
 1c8:	40080e41 	andmi	r0, r8, r1, asr #28
 1cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d0:	180e4101 	stmdane	lr, {r0, r8, lr}
 1d4:	00070d41 	andeq	r0, r7, r1, asr #26
 1d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1dc:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 1e0:	2000063c 	andcs	r0, r0, ip, lsr r6
 1e4:	00000070 	andeq	r0, r0, r0, ror r0
 1e8:	40080e41 	andmi	r0, r8, r1, asr #28
 1ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1f0:	100e4101 	andne	r4, lr, r1, lsl #2
 1f4:	00070d41 	andeq	r0, r7, r1, asr #26
 1f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1fc:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 200:	200006ac 	andcs	r0, r0, ip, lsr #13
 204:	00000090 	muleq	r0, r0, r0
 208:	40080e41 	andmi	r0, r8, r1, asr #28
 20c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 210:	180e4101 	stmdane	lr, {r0, r8, lr}
 214:	00070d41 	andeq	r0, r7, r1, asr #26
 218:	0000001c 	andeq	r0, r0, ip, lsl r0
 21c:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 220:	2000073c 	andcs	r0, r0, ip, lsr r7
 224:	00000074 	andeq	r0, r0, r4, ror r0
 228:	40080e41 	andmi	r0, r8, r1, asr #28
 22c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 230:	100e4101 	andne	r4, lr, r1, lsl #2
 234:	00070d41 	andeq	r0, r7, r1, asr #26
 238:	0000001c 	andeq	r0, r0, ip, lsl r0
 23c:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 240:	200007b0 			; <UNDEFINED> instruction: 0x200007b0
 244:	00000046 	andeq	r0, r0, r6, asr #32
 248:	40080e41 	andmi	r0, r8, r1, asr #28
 24c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 250:	100e4101 	andne	r4, lr, r1, lsl #2
 254:	00070d41 	andeq	r0, r7, r1, asr #26
 258:	0000001c 	andeq	r0, r0, ip, lsl r0
 25c:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 260:	200007f6 	strdcs	r0, [r0], -r6
 264:	00000046 	andeq	r0, r0, r6, asr #32
 268:	40080e41 	andmi	r0, r8, r1, asr #28
 26c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 270:	100e4101 	andne	r4, lr, r1, lsl #2
 274:	00070d41 	andeq	r0, r7, r1, asr #26
 278:	0000001c 	andeq	r0, r0, ip, lsl r0
 27c:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 280:	2000083c 	andcs	r0, r0, ip, lsr r8
 284:	0000002a 	andeq	r0, r0, sl, lsr #32
 288:	40080e41 	andmi	r0, r8, r1, asr #28
 28c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 290:	100e4101 	andne	r4, lr, r1, lsl #2
 294:	00070d41 	andeq	r0, r7, r1, asr #26
 298:	00000018 	andeq	r0, r0, r8, lsl r0
 29c:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 2a0:	20000866 	andcs	r0, r0, r6, ror #16
 2a4:	00000056 	andeq	r0, r0, r6, asr r0
 2a8:	40080e41 	andmi	r0, r8, r1, asr #28
 2ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2b0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2b8:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 2bc:	200008bc 			; <UNDEFINED> instruction: 0x200008bc
 2c0:	00000068 	andeq	r0, r0, r8, rrx
 2c4:	40080e41 	andmi	r0, r8, r1, asr #28
 2c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2cc:	100e4101 	andne	r4, lr, r1, lsl #2
 2d0:	00070d41 	andeq	r0, r7, r1, asr #26
 2d4:	00000024 	andeq	r0, r0, r4, lsr #32
 2d8:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 2dc:	20000924 	andcs	r0, r0, r4, lsr #18
 2e0:	00000170 	andeq	r0, r0, r0, ror r1
 2e4:	40140e41 	andsmi	r0, r4, r1, asr #28
 2e8:	85400584 	strbhi	r0, [r0, #-1412]	; 0xfffffa7c
 2ec:	03864004 	orreq	r4, r6, #4
 2f0:	40028740 	andmi	r8, r2, r0, asr #14
 2f4:	0e41018e 	dvfeqd	f0, f1, #0.5
 2f8:	070d4128 	streq	r4, [sp, -r8, lsr #2]
 2fc:	00000024 	andeq	r0, r0, r4, lsr #32
 300:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 304:	20000a94 	mulcs	r0, r4, sl
 308:	000000c4 	andeq	r0, r0, r4, asr #1
 30c:	40100e41 	andsmi	r0, r0, r1, asr #28
 310:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 314:	02874003 	addeq	r4, r7, #3
 318:	41018e40 	tstmi	r1, r0, asr #28
 31c:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 320:	00000007 	andeq	r0, r0, r7
 324:	0000001c 	andeq	r0, r0, ip, lsl r0
 328:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 32c:	20000b58 	andcs	r0, r0, r8, asr fp
 330:	0000005c 	andeq	r0, r0, ip, asr r0
 334:	40080e41 	andmi	r0, r8, r1, asr #28
 338:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 33c:	100e4101 	andne	r4, lr, r1, lsl #2
 340:	00070d41 	andeq	r0, r7, r1, asr #26
 344:	0000001c 	andeq	r0, r0, ip, lsl r0
 348:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 34c:	20000bb4 			; <UNDEFINED> instruction: 0x20000bb4
 350:	00000124 	andeq	r0, r0, r4, lsr #2
 354:	40080e41 	andmi	r0, r8, r1, asr #28
 358:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 35c:	100e4101 	andne	r4, lr, r1, lsl #2
 360:	00070d41 	andeq	r0, r7, r1, asr #26
 364:	00000018 	andeq	r0, r0, r8, lsl r0
 368:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 36c:	20000cd8 	ldrdcs	r0, [r0], -r8
 370:	000000a4 	andeq	r0, r0, r4, lsr #1
 374:	40080e41 	andmi	r0, r8, r1, asr #28
 378:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 37c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 380:	00000020 	andeq	r0, r0, r0, lsr #32
 384:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 388:	20000d7c 	andcs	r0, r0, ip, ror sp
 38c:	00000114 	andeq	r0, r0, r4, lsl r1
 390:	400c0e41 	andmi	r0, ip, r1, asr #28
 394:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 398:	018e4002 	orreq	r4, lr, r2
 39c:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
 3a0:	0000070d 	andeq	r0, r0, sp, lsl #14
 3a4:	00000024 	andeq	r0, r0, r4, lsr #32
 3a8:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 3ac:	20000e90 	mulcs	r0, r0, lr
 3b0:	00000050 	andeq	r0, r0, r0, asr r0
 3b4:	40140e41 	andsmi	r0, r4, r1, asr #28
 3b8:	85400584 	strbhi	r0, [r0, #-1412]	; 0xfffffa7c
 3bc:	03864004 	orreq	r4, r6, #4
 3c0:	40028740 	andmi	r8, r2, r0, asr #14
 3c4:	0e41018e 	dvfeqd	f0, f1, #0.5
 3c8:	070d4138 	smladxeq	sp, r8, r1, r4
 3cc:	0000000c 	andeq	r0, r0, ip
 3d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 3d4:	7c020001 	stcvc	0, cr0, [r2], {1}
 3d8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 3dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3e0:	000003cc 	andeq	r0, r0, ip, asr #7
 3e4:	20000ee0 	andcs	r0, r0, r0, ror #29
 3e8:	00000290 	muleq	r0, r0, r2
 3ec:	100e420a 	andne	r4, lr, sl, lsl #4
 3f0:	03850484 	orreq	r0, r5, #132, 8	; 0x84000000
 3f4:	018e0286 	orreq	r0, lr, r6, lsl #5
 3f8:	0b014603 	bleq	51c0c <startup-0x1ffae3f4>
 3fc:	0000000c 	andeq	r0, r0, ip
 400:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 404:	7c020001 	stcvc	0, cr0, [r2], {1}
 408:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 40c:	00000010 	andeq	r0, r0, r0, lsl r0
 410:	000003fc 	strdeq	r0, [r0], -ip
 414:	20001170 	andcs	r1, r0, r0, ror r1
 418:	00000198 	muleq	r0, r8, r1
 41c:	0bcc020a 	bleq	ff300c4c <buffer+0xdf2fe93c>
 420:	0000000c 	andeq	r0, r0, ip
 424:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 428:	7c020001 	stcvc	0, cr0, [r2], {1}
 42c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 430:	0000001c 	andeq	r0, r0, ip, lsl r0
 434:	00000420 	andeq	r0, r0, r0, lsr #8
 438:	20001308 	andcs	r1, r0, r8, lsl #6
 43c:	0000031c 	andeq	r0, r0, ip, lsl r3
 440:	0c0e480a 	stceq	8, cr4, [lr], {10}
 444:	02850384 	addeq	r0, r5, #132, 6	; 0x10000002
 448:	8603018e 	strhi	r0, [r3], -lr, lsl #3
 44c:	00000b01 	andeq	r0, r0, r1, lsl #22
 450:	00000018 	andeq	r0, r0, r8, lsl r0
 454:	00000420 	andeq	r0, r0, r0, lsr #8
 458:	20001624 	andcs	r1, r0, r4, lsr #12
 45c:	00000024 	andeq	r0, r0, r4, lsr #32
 460:	0c0e480a 	stceq	8, cr4, [lr], {10}
 464:	02850384 	addeq	r0, r5, #132, 6	; 0x10000002
 468:	0b4a018e 	bleq	1280aa8 <startup-0x1ed7f558>
 46c:	00000018 	andeq	r0, r0, r8, lsl r0
 470:	00000420 	andeq	r0, r0, r0, lsr #8
 474:	20001648 	andcs	r1, r0, r8, asr #12
 478:	00000028 	andeq	r0, r0, r8, lsr #32
 47c:	0c0e480a 	stceq	8, cr4, [lr], {10}
 480:	02850384 	addeq	r0, r5, #132, 6	; 0x10000002
 484:	0b4c018e 	bleq	1300ac4 <startup-0x1ecff53c>
 488:	00000018 	andeq	r0, r0, r8, lsl r0
 48c:	00000420 	andeq	r0, r0, r0, lsr #8
 490:	20001670 	andcs	r1, r0, r0, ror r6
 494:	00000048 	andeq	r0, r0, r8, asr #32
 498:	0c0e5c0a 	stceq	12, cr5, [lr], {10}
 49c:	02850384 	addeq	r0, r5, #132, 6	; 0x10000002
 4a0:	0b48018e 	bleq	1200ae0 <startup-0x1edff520>
 4a4:	00000024 	andeq	r0, r0, r4, lsr #32
 4a8:	00000420 	andeq	r0, r0, r0, lsr #8
 4ac:	200016b8 			; <UNDEFINED> instruction: 0x200016b8
 4b0:	00000074 	andeq	r0, r0, r4, ror r0
 4b4:	0e460a0a 	vmlaeq.f32	s1, s12, s20
 4b8:	8503840c 	strhi	r8, [r3, #-1036]	; 0xfffffbf4
 4bc:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
 4c0:	0c0e460b 	stceq	6, cr4, [lr], {11}
 4c4:	02850384 	addeq	r0, r5, #132, 6	; 0x10000002
 4c8:	0b6a018e 	bleq	1a80b08 <startup-0x1e57f4f8>
 4cc:	0000000c 	andeq	r0, r0, ip
 4d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 4d4:	7c020001 	stcvc	0, cr0, [r2], {1}
 4d8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 4dc:	00000010 	andeq	r0, r0, r0, lsl r0
 4e0:	000004cc 	andeq	r0, r0, ip, asr #9
 4e4:	2000172c 	andcs	r1, r0, ip, lsr #14
 4e8:	000000a0 	andeq	r0, r0, r0, lsr #1
 4ec:	0b50020a 	bleq	1400d1c <startup-0x1ebff2e4>
 4f0:	0000000c 	andeq	r0, r0, ip
 4f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 4f8:	7c020001 	stcvc	0, cr0, [r2], {1}
 4fc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 500:	00000010 	andeq	r0, r0, r0, lsl r0
 504:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 508:	200017cc 	andcs	r1, r0, ip, asr #15
 50c:	000001c8 	andeq	r0, r0, r8, asr #3
 510:	0be4020a 	bleq	ff900d40 <buffer+0xdf8fea30>
 514:	00000010 	andeq	r0, r0, r0, lsl r0
 518:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 51c:	20001994 	mulcs	r0, r4, r9
 520:	00000028 	andeq	r0, r0, r8, lsr #32
 524:	000b540a 	andeq	r5, fp, sl, lsl #8
 528:	00000010 	andeq	r0, r0, r0, lsl r0
 52c:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 530:	200019bc 			; <UNDEFINED> instruction: 0x200019bc
 534:	000000bc 	strheq	r0, [r0], -ip
 538:	0b5e020a 	bleq	1780d68 <startup-0x1e87f298>
 53c:	0000000c 	andeq	r0, r0, ip
 540:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 544:	7c020001 	stcvc	0, cr0, [r2], {1}
 548:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 54c:	00000010 	andeq	r0, r0, r0, lsl r0
 550:	0000053c 	andeq	r0, r0, ip, lsr r5
 554:	20001a78 	andcs	r1, r0, r8, ror sl
 558:	00000198 	muleq	r0, r8, r1
 55c:	0bcc020a 	bleq	ff300d8c <buffer+0xdf2fea7c>
 560:	00000010 	andeq	r0, r0, r0, lsl r0
 564:	0000053c 	andeq	r0, r0, ip, lsr r5
 568:	20001c10 	andcs	r1, r0, r0, lsl ip
 56c:	00000160 	andeq	r0, r0, r0, ror #2
 570:	0bb0020a 	bleq	fec00da0 <buffer+0xdebfea90>
 574:	0000000c 	andeq	r0, r0, ip
 578:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 57c:	7c020001 	stcvc	0, cr0, [r2], {1}
 580:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 584:	0000001c 	andeq	r0, r0, ip, lsl r0
 588:	00000574 	andeq	r0, r0, r4, ror r5
 58c:	20001d70 	andcs	r1, r0, r0, ror sp
 590:	00000074 	andeq	r0, r0, r4, ror r0
 594:	040e4c0a 	streq	r4, [lr], #-3082	; 0xfffff3f6
 598:	0e420a4a 	vmlseq.f32	s1, s4, s20
 59c:	520b4e00 	andpl	r4, fp, #0, 28
 5a0:	0b42000e 	bleq	10805e0 <startup-0x1ef7fa20>
 5a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 5a8:	00000574 	andeq	r0, r0, r4, ror r5
 5ac:	20001de4 	andcs	r1, r0, r4, ror #27
 5b0:	00000028 	andeq	r0, r0, r8, lsr #32
 5b4:	140e4a0a 	strne	r4, [lr], #-2570	; 0xfffff5f6
 5b8:	04810580 	streq	r0, [r1], #1408	; 0x580
 5bc:	02830382 	addeq	r0, r3, #134217730	; 0x8000002
 5c0:	0b4a018e 	bleq	1280c00 <startup-0x1ed7f400>
 5c4:	00000014 	andeq	r0, r0, r4, lsl r0
 5c8:	00000574 	andeq	r0, r0, r4, ror r5
 5cc:	20001e0c 	andcs	r1, r0, ip, lsl #28
 5d0:	00000018 	andeq	r0, r0, r8, lsl r0
 5d4:	080e420a 	stmdaeq	lr, {r1, r3, r9, lr}
 5d8:	0b4a028e 	bleq	1281018 <startup-0x1ed7efe8>
 5dc:	00000014 	andeq	r0, r0, r4, lsl r0
 5e0:	00000574 	andeq	r0, r0, r4, ror r5
 5e4:	20001e24 	andcs	r1, r0, r4, lsr #28
 5e8:	00000018 	andeq	r0, r0, r8, lsl r0
 5ec:	080e420a 	stmdaeq	lr, {r1, r3, r9, lr}
 5f0:	0b4a028e 	bleq	1281030 <startup-0x1ed7efd0>
 5f4:	00000014 	andeq	r0, r0, r4, lsl r0
 5f8:	00000574 	andeq	r0, r0, r4, ror r5
 5fc:	20001e3c 	andcs	r1, r0, ip, lsr lr
 600:	00000018 	andeq	r0, r0, r8, lsl r0
 604:	080e420a 	stmdaeq	lr, {r1, r3, r9, lr}
 608:	0b4a028e 	bleq	1281048 <startup-0x1ed7efb8>
 60c:	00000014 	andeq	r0, r0, r4, lsl r0
 610:	00000574 	andeq	r0, r0, r4, ror r5
 614:	20001e54 	andcs	r1, r0, r4, asr lr
 618:	00000018 	andeq	r0, r0, r8, lsl r0
 61c:	080e420a 	stmdaeq	lr, {r1, r3, r9, lr}
 620:	0b4a028e 	bleq	1281060 <startup-0x1ed7efa0>
 624:	00000014 	andeq	r0, r0, r4, lsl r0
 628:	00000574 	andeq	r0, r0, r4, ror r5
 62c:	20001e6c 	andcs	r1, r0, ip, ror #28
 630:	00000018 	andeq	r0, r0, r8, lsl r0
 634:	080e420a 	stmdaeq	lr, {r1, r3, r9, lr}
 638:	0b4a028e 	bleq	1281078 <startup-0x1ed7ef88>
 63c:	0000000c 	andeq	r0, r0, ip
 640:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 644:	7c020001 	stcvc	0, cr0, [r2], {1}
 648:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 64c:	00000010 	andeq	r0, r0, r0, lsl r0
 650:	0000063c 	andeq	r0, r0, ip, lsr r6
 654:	20001e84 	andcs	r1, r0, r4, lsl #29
 658:	00000054 	andeq	r0, r0, r4, asr r0
 65c:	000b6a0a 	andeq	r6, fp, sl, lsl #20
