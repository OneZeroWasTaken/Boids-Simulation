
./Debug/Boids.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#include "drivers.h"

__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 fa3c 	bl	20000480 <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <squaredDistance>:
    void (* draw) (struct tBoid *);
    void (* updatePos) (struct tBoid *);
    void (* updateVel) (struct tBoid *);
} BOID, *pBOID;

float squaredDistance(pBOID one, pBOID two) {
20000010:	b580      	push	{r7, lr}
20000012:	b084      	sub	sp, #16
20000014:	af00      	add	r7, sp, #0
20000016:	6078      	str	r0, [r7, #4]
20000018:	6039      	str	r1, [r7, #0]
    float xD = two->x - one->x;
2000001a:	683b      	ldr	r3, [r7, #0]
2000001c:	681a      	ldr	r2, [r3, #0]
2000001e:	687b      	ldr	r3, [r7, #4]
20000020:	681b      	ldr	r3, [r3, #0]
20000022:	1c19      	adds	r1, r3, #0
20000024:	1c10      	adds	r0, r2, #0
20000026:	f001 fb81 	bl	2000172c <__aeabi_fsub>
2000002a:	1c03      	adds	r3, r0, #0
2000002c:	60fb      	str	r3, [r7, #12]
    float yD = two->y - one->y;
2000002e:	683b      	ldr	r3, [r7, #0]
20000030:	685a      	ldr	r2, [r3, #4]
20000032:	687b      	ldr	r3, [r7, #4]
20000034:	685b      	ldr	r3, [r3, #4]
20000036:	1c19      	adds	r1, r3, #0
20000038:	1c10      	adds	r0, r2, #0
2000003a:	f001 fb77 	bl	2000172c <__aeabi_fsub>
2000003e:	1c03      	adds	r3, r0, #0
20000040:	60bb      	str	r3, [r7, #8]
    return xD * xD + yD + yD;
20000042:	68f9      	ldr	r1, [r7, #12]
20000044:	68f8      	ldr	r0, [r7, #12]
20000046:	f001 fcc3 	bl	200019d0 <__aeabi_fmul>
2000004a:	1c03      	adds	r3, r0, #0
2000004c:	68b9      	ldr	r1, [r7, #8]
2000004e:	1c18      	adds	r0, r3, #0
20000050:	f001 fb6e 	bl	20001730 <__addsf3>
20000054:	1c03      	adds	r3, r0, #0
20000056:	68b9      	ldr	r1, [r7, #8]
20000058:	1c18      	adds	r0, r3, #0
2000005a:	f001 fb69 	bl	20001730 <__addsf3>
2000005e:	1c03      	adds	r3, r0, #0
}
20000060:	1c18      	adds	r0, r3, #0
20000062:	46bd      	mov	sp, r7
20000064:	b004      	add	sp, #16
20000066:	bd80      	pop	{r7, pc}

20000068 <draw>:


static BOID boids[BOID_COUNT];

void draw(pBOID self) {
20000068:	b590      	push	{r4, r7, lr}
2000006a:	b083      	sub	sp, #12
2000006c:	af00      	add	r7, sp, #0
2000006e:	6078      	str	r0, [r7, #4]
    pixel((uint8_t) self->x, (uint8_t) self->y, 1);
20000070:	687b      	ldr	r3, [r7, #4]
20000072:	681b      	ldr	r3, [r3, #0]
20000074:	1c18      	adds	r0, r3, #0
20000076:	f001 feb1 	bl	20001ddc <__aeabi_f2uiz>
2000007a:	0003      	movs	r3, r0
2000007c:	b2dc      	uxtb	r4, r3
2000007e:	687b      	ldr	r3, [r7, #4]
20000080:	685b      	ldr	r3, [r3, #4]
20000082:	1c18      	adds	r0, r3, #0
20000084:	f001 feaa 	bl	20001ddc <__aeabi_f2uiz>
20000088:	0003      	movs	r3, r0
2000008a:	b2db      	uxtb	r3, r3
2000008c:	2201      	movs	r2, #1
2000008e:	0019      	movs	r1, r3
20000090:	0020      	movs	r0, r4
20000092:	f000 fcab 	bl	200009ec <pixel>
}
20000096:	46c0      	nop			; (mov r8, r8)
20000098:	46bd      	mov	sp, r7
2000009a:	b003      	add	sp, #12
2000009c:	bd90      	pop	{r4, r7, pc}

2000009e <updatePos>:

void updatePos(pBOID self) {
2000009e:	b580      	push	{r7, lr}
200000a0:	b082      	sub	sp, #8
200000a2:	af00      	add	r7, sp, #0
200000a4:	6078      	str	r0, [r7, #4]
    self->x += self->xVel;
200000a6:	687b      	ldr	r3, [r7, #4]
200000a8:	681a      	ldr	r2, [r3, #0]
200000aa:	687b      	ldr	r3, [r7, #4]
200000ac:	689b      	ldr	r3, [r3, #8]
200000ae:	1c19      	adds	r1, r3, #0
200000b0:	1c10      	adds	r0, r2, #0
200000b2:	f001 fb3d 	bl	20001730 <__addsf3>
200000b6:	1c03      	adds	r3, r0, #0
200000b8:	1c1a      	adds	r2, r3, #0
200000ba:	687b      	ldr	r3, [r7, #4]
200000bc:	601a      	str	r2, [r3, #0]
    self->y += self->yVel;
200000be:	687b      	ldr	r3, [r7, #4]
200000c0:	685a      	ldr	r2, [r3, #4]
200000c2:	687b      	ldr	r3, [r7, #4]
200000c4:	68db      	ldr	r3, [r3, #12]
200000c6:	1c19      	adds	r1, r3, #0
200000c8:	1c10      	adds	r0, r2, #0
200000ca:	f001 fb31 	bl	20001730 <__addsf3>
200000ce:	1c03      	adds	r3, r0, #0
200000d0:	1c1a      	adds	r2, r3, #0
200000d2:	687b      	ldr	r3, [r7, #4]
200000d4:	605a      	str	r2, [r3, #4]
}
200000d6:	46c0      	nop			; (mov r8, r8)
200000d8:	46bd      	mov	sp, r7
200000da:	b002      	add	sp, #8
200000dc:	bd80      	pop	{r7, pc}

200000de <updateVel>:

void updateVel(pBOID self) {
200000de:	b5b0      	push	{r4, r5, r7, lr}
200000e0:	b096      	sub	sp, #88	; 0x58
200000e2:	af00      	add	r7, sp, #0
200000e4:	60f8      	str	r0, [r7, #12]
    int nearbyCount = 0;
200000e6:	2300      	movs	r3, #0
200000e8:	657b      	str	r3, [r7, #84]	; 0x54
    float sumXPos = 0, sumYPos = 0;
200000ea:	2300      	movs	r3, #0
200000ec:	653b      	str	r3, [r7, #80]	; 0x50
200000ee:	2300      	movs	r3, #0
200000f0:	64fb      	str	r3, [r7, #76]	; 0x4c
    float sumXVel = 0, sumYVel = 0;
200000f2:	2300      	movs	r3, #0
200000f4:	64bb      	str	r3, [r7, #72]	; 0x48
200000f6:	2300      	movs	r3, #0
200000f8:	63bb      	str	r3, [r7, #56]	; 0x38
    float dXSeparation = 0, dYSeparation = 0;
200000fa:	2300      	movs	r3, #0
200000fc:	647b      	str	r3, [r7, #68]	; 0x44
200000fe:	2300      	movs	r3, #0
20000100:	643b      	str	r3, [r7, #64]	; 0x40
    
    for (int i = 0; i < BOID_COUNT; i++) {
20000102:	2300      	movs	r3, #0
20000104:	63fb      	str	r3, [r7, #60]	; 0x3c
20000106:	e06c      	b.n	200001e2 <updateVel+0x104>
        pBOID other = &boids[i];
20000108:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
2000010a:	0013      	movs	r3, r2
2000010c:	00db      	lsls	r3, r3, #3
2000010e:	1a9b      	subs	r3, r3, r2
20000110:	009b      	lsls	r3, r3, #2
20000112:	4a9a      	ldr	r2, [pc, #616]	; (2000037c <updateVel+0x29e>)
20000114:	189b      	adds	r3, r3, r2
20000116:	617b      	str	r3, [r7, #20]
        float dSquared = squaredDistance(self, other);
20000118:	697a      	ldr	r2, [r7, #20]
2000011a:	68fb      	ldr	r3, [r7, #12]
2000011c:	0011      	movs	r1, r2
2000011e:	0018      	movs	r0, r3
20000120:	f7ff ff76 	bl	20000010 <squaredDistance>
20000124:	1c03      	adds	r3, r0, #0
20000126:	613b      	str	r3, [r7, #16]
        if (dSquared > VIEW_DISTANCE * VIEW_DISTANCE) {
20000128:	2185      	movs	r1, #133	; 0x85
2000012a:	05c9      	lsls	r1, r1, #23
2000012c:	6938      	ldr	r0, [r7, #16]
2000012e:	f001 fe49 	bl	20001dc4 <__aeabi_fcmpgt>
20000132:	1e03      	subs	r3, r0, #0
20000134:	d14f      	bne.n	200001d6 <updateVel+0xf8>
            continue;
        }
        if (self == other) {
20000136:	68fa      	ldr	r2, [r7, #12]
20000138:	697b      	ldr	r3, [r7, #20]
2000013a:	429a      	cmp	r2, r3
2000013c:	d04d      	beq.n	200001da <updateVel+0xfc>
            continue;
        }
        nearbyCount++;
2000013e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
20000140:	3301      	adds	r3, #1
20000142:	657b      	str	r3, [r7, #84]	; 0x54
        
        // Cohesion
        sumXPos += other->x;
20000144:	697b      	ldr	r3, [r7, #20]
20000146:	681b      	ldr	r3, [r3, #0]
20000148:	1c19      	adds	r1, r3, #0
2000014a:	6d38      	ldr	r0, [r7, #80]	; 0x50
2000014c:	f001 faf0 	bl	20001730 <__addsf3>
20000150:	1c03      	adds	r3, r0, #0
20000152:	653b      	str	r3, [r7, #80]	; 0x50
        sumYPos += other->y;
20000154:	697b      	ldr	r3, [r7, #20]
20000156:	685b      	ldr	r3, [r3, #4]
20000158:	1c19      	adds	r1, r3, #0
2000015a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
2000015c:	f001 fae8 	bl	20001730 <__addsf3>
20000160:	1c03      	adds	r3, r0, #0
20000162:	64fb      	str	r3, [r7, #76]	; 0x4c
        
        // Alignment
        sumXVel += other->x;
20000164:	697b      	ldr	r3, [r7, #20]
20000166:	681b      	ldr	r3, [r3, #0]
20000168:	1c19      	adds	r1, r3, #0
2000016a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
2000016c:	f001 fae0 	bl	20001730 <__addsf3>
20000170:	1c03      	adds	r3, r0, #0
20000172:	64bb      	str	r3, [r7, #72]	; 0x48
        sumXVel += other->y;
20000174:	697b      	ldr	r3, [r7, #20]
20000176:	685b      	ldr	r3, [r3, #4]
20000178:	1c19      	adds	r1, r3, #0
2000017a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
2000017c:	f001 fad8 	bl	20001730 <__addsf3>
20000180:	1c03      	adds	r3, r0, #0
20000182:	64bb      	str	r3, [r7, #72]	; 0x48
        
        // Separation
        dXSeparation += (self->x - other->x) / dSquared;
20000184:	68fb      	ldr	r3, [r7, #12]
20000186:	681a      	ldr	r2, [r3, #0]
20000188:	697b      	ldr	r3, [r7, #20]
2000018a:	681b      	ldr	r3, [r3, #0]
2000018c:	1c19      	adds	r1, r3, #0
2000018e:	1c10      	adds	r0, r2, #0
20000190:	f001 facc 	bl	2000172c <__aeabi_fsub>
20000194:	1c03      	adds	r3, r0, #0
20000196:	6939      	ldr	r1, [r7, #16]
20000198:	1c18      	adds	r0, r3, #0
2000019a:	f001 fce5 	bl	20001b68 <__aeabi_fdiv>
2000019e:	1c03      	adds	r3, r0, #0
200001a0:	1c19      	adds	r1, r3, #0
200001a2:	6c78      	ldr	r0, [r7, #68]	; 0x44
200001a4:	f001 fac4 	bl	20001730 <__addsf3>
200001a8:	1c03      	adds	r3, r0, #0
200001aa:	647b      	str	r3, [r7, #68]	; 0x44
        dYSeparation += (self->y - other->y) / dSquared;
200001ac:	68fb      	ldr	r3, [r7, #12]
200001ae:	685a      	ldr	r2, [r3, #4]
200001b0:	697b      	ldr	r3, [r7, #20]
200001b2:	685b      	ldr	r3, [r3, #4]
200001b4:	1c19      	adds	r1, r3, #0
200001b6:	1c10      	adds	r0, r2, #0
200001b8:	f001 fab8 	bl	2000172c <__aeabi_fsub>
200001bc:	1c03      	adds	r3, r0, #0
200001be:	6939      	ldr	r1, [r7, #16]
200001c0:	1c18      	adds	r0, r3, #0
200001c2:	f001 fcd1 	bl	20001b68 <__aeabi_fdiv>
200001c6:	1c03      	adds	r3, r0, #0
200001c8:	1c19      	adds	r1, r3, #0
200001ca:	6c38      	ldr	r0, [r7, #64]	; 0x40
200001cc:	f001 fab0 	bl	20001730 <__addsf3>
200001d0:	1c03      	adds	r3, r0, #0
200001d2:	643b      	str	r3, [r7, #64]	; 0x40
200001d4:	e002      	b.n	200001dc <updateVel+0xfe>
            continue;
200001d6:	46c0      	nop			; (mov r8, r8)
200001d8:	e000      	b.n	200001dc <updateVel+0xfe>
            continue;
200001da:	46c0      	nop			; (mov r8, r8)
    for (int i = 0; i < BOID_COUNT; i++) {
200001dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
200001de:	3301      	adds	r3, #1
200001e0:	63fb      	str	r3, [r7, #60]	; 0x3c
200001e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
200001e4:	2b02      	cmp	r3, #2
200001e6:	dd8f      	ble.n	20000108 <updateVel+0x2a>
    }
    
    // Cohesion
    float avgXPos = sumXPos / nearbyCount;
200001e8:	6d78      	ldr	r0, [r7, #84]	; 0x54
200001ea:	f001 fb83 	bl	200018f4 <__aeabi_i2f>
200001ee:	1c03      	adds	r3, r0, #0
200001f0:	1c19      	adds	r1, r3, #0
200001f2:	6d38      	ldr	r0, [r7, #80]	; 0x50
200001f4:	f001 fcb8 	bl	20001b68 <__aeabi_fdiv>
200001f8:	1c03      	adds	r3, r0, #0
200001fa:	637b      	str	r3, [r7, #52]	; 0x34
    float avgYPos = sumYPos / nearbyCount;
200001fc:	6d78      	ldr	r0, [r7, #84]	; 0x54
200001fe:	f001 fb79 	bl	200018f4 <__aeabi_i2f>
20000202:	1c03      	adds	r3, r0, #0
20000204:	1c19      	adds	r1, r3, #0
20000206:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
20000208:	f001 fcae 	bl	20001b68 <__aeabi_fdiv>
2000020c:	1c03      	adds	r3, r0, #0
2000020e:	633b      	str	r3, [r7, #48]	; 0x30
    
    float dXCohesion = avgXPos - self->x;
20000210:	68fb      	ldr	r3, [r7, #12]
20000212:	681b      	ldr	r3, [r3, #0]
20000214:	1c19      	adds	r1, r3, #0
20000216:	6b78      	ldr	r0, [r7, #52]	; 0x34
20000218:	f001 fa88 	bl	2000172c <__aeabi_fsub>
2000021c:	1c03      	adds	r3, r0, #0
2000021e:	62fb      	str	r3, [r7, #44]	; 0x2c
    float dYCohesion = avgYPos - self->y;
20000220:	68fb      	ldr	r3, [r7, #12]
20000222:	685b      	ldr	r3, [r3, #4]
20000224:	1c19      	adds	r1, r3, #0
20000226:	6b38      	ldr	r0, [r7, #48]	; 0x30
20000228:	f001 fa80 	bl	2000172c <__aeabi_fsub>
2000022c:	1c03      	adds	r3, r0, #0
2000022e:	62bb      	str	r3, [r7, #40]	; 0x28
    
    // Alignment
    float avgXVel = sumXVel / nearbyCount;
20000230:	6d78      	ldr	r0, [r7, #84]	; 0x54
20000232:	f001 fb5f 	bl	200018f4 <__aeabi_i2f>
20000236:	1c03      	adds	r3, r0, #0
20000238:	1c19      	adds	r1, r3, #0
2000023a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
2000023c:	f001 fc94 	bl	20001b68 <__aeabi_fdiv>
20000240:	1c03      	adds	r3, r0, #0
20000242:	627b      	str	r3, [r7, #36]	; 0x24
    float avgYVel = sumYVel / nearbyCount;
20000244:	6d78      	ldr	r0, [r7, #84]	; 0x54
20000246:	f001 fb55 	bl	200018f4 <__aeabi_i2f>
2000024a:	1c03      	adds	r3, r0, #0
2000024c:	1c19      	adds	r1, r3, #0
2000024e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
20000250:	f001 fc8a 	bl	20001b68 <__aeabi_fdiv>
20000254:	1c03      	adds	r3, r0, #0
20000256:	623b      	str	r3, [r7, #32]
    
    float dXAlignment = avgXVel - self->xVel;
20000258:	68fb      	ldr	r3, [r7, #12]
2000025a:	689b      	ldr	r3, [r3, #8]
2000025c:	1c19      	adds	r1, r3, #0
2000025e:	6a78      	ldr	r0, [r7, #36]	; 0x24
20000260:	f001 fa64 	bl	2000172c <__aeabi_fsub>
20000264:	1c03      	adds	r3, r0, #0
20000266:	61fb      	str	r3, [r7, #28]
    float dYAlignment = avgYVel - self->yVel;
20000268:	68fb      	ldr	r3, [r7, #12]
2000026a:	68db      	ldr	r3, [r3, #12]
2000026c:	1c19      	adds	r1, r3, #0
2000026e:	6a38      	ldr	r0, [r7, #32]
20000270:	f001 fa5c 	bl	2000172c <__aeabi_fsub>
20000274:	1c03      	adds	r3, r0, #0
20000276:	61bb      	str	r3, [r7, #24]
    
    // Calculate new acceleration for the Boid
    self->xVel += dXSeparation * SEPARATION_BIAS + dXCohesion * COHESION_BIAS + dXAlignment * ALIGNMENT_BIAS;
20000278:	68fb      	ldr	r3, [r7, #12]
2000027a:	689b      	ldr	r3, [r3, #8]
2000027c:	1c18      	adds	r0, r3, #0
2000027e:	f001 f9a3 	bl	200015c8 <__aeabi_f2d>
20000282:	0004      	movs	r4, r0
20000284:	000d      	movs	r5, r1
20000286:	6c78      	ldr	r0, [r7, #68]	; 0x44
20000288:	f001 f99e 	bl	200015c8 <__aeabi_f2d>
2000028c:	4a3c      	ldr	r2, [pc, #240]	; (20000380 <updateVel+0x2a2>)
2000028e:	4b3d      	ldr	r3, [pc, #244]	; (20000384 <updateVel+0x2a6>)
20000290:	f000 fdd2 	bl	20000e38 <__aeabi_dmul>
20000294:	0002      	movs	r2, r0
20000296:	000b      	movs	r3, r1
20000298:	603a      	str	r2, [r7, #0]
2000029a:	607b      	str	r3, [r7, #4]
2000029c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
2000029e:	f001 f993 	bl	200015c8 <__aeabi_f2d>
200002a2:	4a39      	ldr	r2, [pc, #228]	; (20000388 <updateVel+0x2aa>)
200002a4:	4b39      	ldr	r3, [pc, #228]	; (2000038c <updateVel+0x2ae>)
200002a6:	f000 fdc7 	bl	20000e38 <__aeabi_dmul>
200002aa:	0002      	movs	r2, r0
200002ac:	000b      	movs	r3, r1
200002ae:	6838      	ldr	r0, [r7, #0]
200002b0:	6879      	ldr	r1, [r7, #4]
200002b2:	f000 ffdb 	bl	2000126c <__adddf3>
200002b6:	0002      	movs	r2, r0
200002b8:	000b      	movs	r3, r1
200002ba:	603a      	str	r2, [r7, #0]
200002bc:	607b      	str	r3, [r7, #4]
200002be:	69f8      	ldr	r0, [r7, #28]
200002c0:	f001 f982 	bl	200015c8 <__aeabi_f2d>
200002c4:	4a30      	ldr	r2, [pc, #192]	; (20000388 <updateVel+0x2aa>)
200002c6:	4b31      	ldr	r3, [pc, #196]	; (2000038c <updateVel+0x2ae>)
200002c8:	f000 fdb6 	bl	20000e38 <__aeabi_dmul>
200002cc:	0002      	movs	r2, r0
200002ce:	000b      	movs	r3, r1
200002d0:	6838      	ldr	r0, [r7, #0]
200002d2:	6879      	ldr	r1, [r7, #4]
200002d4:	f000 ffca 	bl	2000126c <__adddf3>
200002d8:	0002      	movs	r2, r0
200002da:	000b      	movs	r3, r1
200002dc:	0020      	movs	r0, r4
200002de:	0029      	movs	r1, r5
200002e0:	f000 ffc4 	bl	2000126c <__adddf3>
200002e4:	0002      	movs	r2, r0
200002e6:	000b      	movs	r3, r1
200002e8:	0010      	movs	r0, r2
200002ea:	0019      	movs	r1, r3
200002ec:	f001 f9ca 	bl	20001684 <__aeabi_d2f>
200002f0:	1c02      	adds	r2, r0, #0
200002f2:	68fb      	ldr	r3, [r7, #12]
200002f4:	609a      	str	r2, [r3, #8]
    self->yVel += dYSeparation * SEPARATION_BIAS + dYCohesion * COHESION_BIAS + dYAlignment * ALIGNMENT_BIAS;
200002f6:	68fb      	ldr	r3, [r7, #12]
200002f8:	68db      	ldr	r3, [r3, #12]
200002fa:	1c18      	adds	r0, r3, #0
200002fc:	f001 f964 	bl	200015c8 <__aeabi_f2d>
20000300:	0004      	movs	r4, r0
20000302:	000d      	movs	r5, r1
20000304:	6c38      	ldr	r0, [r7, #64]	; 0x40
20000306:	f001 f95f 	bl	200015c8 <__aeabi_f2d>
2000030a:	4a1d      	ldr	r2, [pc, #116]	; (20000380 <updateVel+0x2a2>)
2000030c:	4b1d      	ldr	r3, [pc, #116]	; (20000384 <updateVel+0x2a6>)
2000030e:	f000 fd93 	bl	20000e38 <__aeabi_dmul>
20000312:	0002      	movs	r2, r0
20000314:	000b      	movs	r3, r1
20000316:	603a      	str	r2, [r7, #0]
20000318:	607b      	str	r3, [r7, #4]
2000031a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
2000031c:	f001 f954 	bl	200015c8 <__aeabi_f2d>
20000320:	4a19      	ldr	r2, [pc, #100]	; (20000388 <updateVel+0x2aa>)
20000322:	4b1a      	ldr	r3, [pc, #104]	; (2000038c <updateVel+0x2ae>)
20000324:	f000 fd88 	bl	20000e38 <__aeabi_dmul>
20000328:	0002      	movs	r2, r0
2000032a:	000b      	movs	r3, r1
2000032c:	6838      	ldr	r0, [r7, #0]
2000032e:	6879      	ldr	r1, [r7, #4]
20000330:	f000 ff9c 	bl	2000126c <__adddf3>
20000334:	0002      	movs	r2, r0
20000336:	000b      	movs	r3, r1
20000338:	603a      	str	r2, [r7, #0]
2000033a:	607b      	str	r3, [r7, #4]
2000033c:	69b8      	ldr	r0, [r7, #24]
2000033e:	f001 f943 	bl	200015c8 <__aeabi_f2d>
20000342:	4a11      	ldr	r2, [pc, #68]	; (20000388 <updateVel+0x2aa>)
20000344:	4b11      	ldr	r3, [pc, #68]	; (2000038c <updateVel+0x2ae>)
20000346:	f000 fd77 	bl	20000e38 <__aeabi_dmul>
2000034a:	0002      	movs	r2, r0
2000034c:	000b      	movs	r3, r1
2000034e:	6838      	ldr	r0, [r7, #0]
20000350:	6879      	ldr	r1, [r7, #4]
20000352:	f000 ff8b 	bl	2000126c <__adddf3>
20000356:	0002      	movs	r2, r0
20000358:	000b      	movs	r3, r1
2000035a:	0020      	movs	r0, r4
2000035c:	0029      	movs	r1, r5
2000035e:	f000 ff85 	bl	2000126c <__adddf3>
20000362:	0002      	movs	r2, r0
20000364:	000b      	movs	r3, r1
20000366:	0010      	movs	r0, r2
20000368:	0019      	movs	r1, r3
2000036a:	f001 f98b 	bl	20001684 <__aeabi_d2f>
2000036e:	1c02      	adds	r2, r0, #0
20000370:	68fb      	ldr	r3, [r7, #12]
20000372:	60da      	str	r2, [r3, #12]
}
20000374:	46c0      	nop			; (mov r8, r8)
20000376:	46bd      	mov	sp, r7
20000378:	b016      	add	sp, #88	; 0x58
2000037a:	bdb0      	pop	{r4, r5, r7, pc}
2000037c:	20002230 	andcs	r2, r0, r0, lsr r2
20000380:	e978d4fe 	ldmdb	r8!, {r1, r2, r3, r4, r5, r6, r7, sl, ip, lr, pc}^
20000384:	3fd03126 	svccc	0x00d03126
20000388:	425aee63 	subsmi	lr, sl, #1584	; 0x630
2000038c:	3f99e83e 	svccc	0x0099e83e

20000390 <createBoids>:

void createBoids() {
20000390:	b580      	push	{r7, lr}
20000392:	b088      	sub	sp, #32
20000394:	af00      	add	r7, sp, #0
    for (int i = 0; i < BOID_COUNT; i++) {
20000396:	2300      	movs	r3, #0
20000398:	61fb      	str	r3, [r7, #28]
2000039a:	e05a      	b.n	20000452 <createBoids+0xc2>
        boids[i] = (BOID) { 
            .x = i * 5.0 + 1.0, 
2000039c:	69f8      	ldr	r0, [r7, #28]
2000039e:	f001 f8ff 	bl	200015a0 <__aeabi_i2d>
200003a2:	2200      	movs	r2, #0
200003a4:	4b2f      	ldr	r3, [pc, #188]	; (20000464 <createBoids+0xd4>)
200003a6:	f000 fd47 	bl	20000e38 <__aeabi_dmul>
200003aa:	0002      	movs	r2, r0
200003ac:	000b      	movs	r3, r1
200003ae:	0010      	movs	r0, r2
200003b0:	0019      	movs	r1, r3
200003b2:	2200      	movs	r2, #0
200003b4:	4b2c      	ldr	r3, [pc, #176]	; (20000468 <createBoids+0xd8>)
200003b6:	f000 ff59 	bl	2000126c <__adddf3>
200003ba:	0002      	movs	r2, r0
200003bc:	000b      	movs	r3, r1
200003be:	0010      	movs	r0, r2
200003c0:	0019      	movs	r1, r3
200003c2:	f001 f95f 	bl	20001684 <__aeabi_d2f>
        boids[i] = (BOID) { 
200003c6:	4929      	ldr	r1, [pc, #164]	; (2000046c <createBoids+0xdc>)
200003c8:	69fa      	ldr	r2, [r7, #28]
200003ca:	0013      	movs	r3, r2
200003cc:	00db      	lsls	r3, r3, #3
200003ce:	1a9b      	subs	r3, r3, r2
200003d0:	009b      	lsls	r3, r3, #2
200003d2:	5058      	str	r0, [r3, r1]
200003d4:	4925      	ldr	r1, [pc, #148]	; (2000046c <createBoids+0xdc>)
200003d6:	69fa      	ldr	r2, [r7, #28]
200003d8:	0013      	movs	r3, r2
200003da:	00db      	lsls	r3, r3, #3
200003dc:	1a9b      	subs	r3, r3, r2
200003de:	009b      	lsls	r3, r3, #2
200003e0:	18cb      	adds	r3, r1, r3
200003e2:	3304      	adds	r3, #4
200003e4:	4a22      	ldr	r2, [pc, #136]	; (20000470 <createBoids+0xe0>)
200003e6:	601a      	str	r2, [r3, #0]
200003e8:	4920      	ldr	r1, [pc, #128]	; (2000046c <createBoids+0xdc>)
200003ea:	69fa      	ldr	r2, [r7, #28]
200003ec:	0013      	movs	r3, r2
200003ee:	00db      	lsls	r3, r3, #3
200003f0:	1a9b      	subs	r3, r3, r2
200003f2:	009b      	lsls	r3, r3, #2
200003f4:	18cb      	adds	r3, r1, r3
200003f6:	3308      	adds	r3, #8
200003f8:	2200      	movs	r2, #0
200003fa:	601a      	str	r2, [r3, #0]
200003fc:	491b      	ldr	r1, [pc, #108]	; (2000046c <createBoids+0xdc>)
200003fe:	69fa      	ldr	r2, [r7, #28]
20000400:	0013      	movs	r3, r2
20000402:	00db      	lsls	r3, r3, #3
20000404:	1a9b      	subs	r3, r3, r2
20000406:	009b      	lsls	r3, r3, #2
20000408:	18cb      	adds	r3, r1, r3
2000040a:	330c      	adds	r3, #12
2000040c:	2200      	movs	r2, #0
2000040e:	601a      	str	r2, [r3, #0]
20000410:	4916      	ldr	r1, [pc, #88]	; (2000046c <createBoids+0xdc>)
20000412:	69fa      	ldr	r2, [r7, #28]
20000414:	0013      	movs	r3, r2
20000416:	00db      	lsls	r3, r3, #3
20000418:	1a9b      	subs	r3, r3, r2
2000041a:	009b      	lsls	r3, r3, #2
2000041c:	18cb      	adds	r3, r1, r3
2000041e:	3310      	adds	r3, #16
20000420:	4a14      	ldr	r2, [pc, #80]	; (20000474 <createBoids+0xe4>)
20000422:	601a      	str	r2, [r3, #0]
20000424:	4911      	ldr	r1, [pc, #68]	; (2000046c <createBoids+0xdc>)
20000426:	69fa      	ldr	r2, [r7, #28]
20000428:	0013      	movs	r3, r2
2000042a:	00db      	lsls	r3, r3, #3
2000042c:	1a9b      	subs	r3, r3, r2
2000042e:	009b      	lsls	r3, r3, #2
20000430:	18cb      	adds	r3, r1, r3
20000432:	3314      	adds	r3, #20
20000434:	4a10      	ldr	r2, [pc, #64]	; (20000478 <createBoids+0xe8>)
20000436:	601a      	str	r2, [r3, #0]
20000438:	490c      	ldr	r1, [pc, #48]	; (2000046c <createBoids+0xdc>)
2000043a:	69fa      	ldr	r2, [r7, #28]
2000043c:	0013      	movs	r3, r2
2000043e:	00db      	lsls	r3, r3, #3
20000440:	1a9b      	subs	r3, r3, r2
20000442:	009b      	lsls	r3, r3, #2
20000444:	18cb      	adds	r3, r1, r3
20000446:	3318      	adds	r3, #24
20000448:	4a0c      	ldr	r2, [pc, #48]	; (2000047c <createBoids+0xec>)
2000044a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < BOID_COUNT; i++) {
2000044c:	69fb      	ldr	r3, [r7, #28]
2000044e:	3301      	adds	r3, #1
20000450:	61fb      	str	r3, [r7, #28]
20000452:	69fb      	ldr	r3, [r7, #28]
20000454:	2b02      	cmp	r3, #2
20000456:	dda1      	ble.n	2000039c <createBoids+0xc>
            draw,
            updatePos,
            updateVel
        };
    }
}
20000458:	46c0      	nop			; (mov r8, r8)
2000045a:	46c0      	nop			; (mov r8, r8)
2000045c:	46bd      	mov	sp, r7
2000045e:	b008      	add	sp, #32
20000460:	bd80      	pop	{r7, pc}
20000462:	46c0      	nop			; (mov r8, r8)
20000464:	40140000 	andsmi	r0, r4, r0
20000468:	3ff00000 	svccc	0x00f00000	; IMB
2000046c:	20002230 	andcs	r2, r0, r0, lsr r2
20000470:	41f80000 	mvnsmi	r0, r0
20000474:	20000069 	andcs	r0, r0, r9, rrx
20000478:	2000009f 	mulcs	r0, pc, r0	; <UNPREDICTABLE>
2000047c:	200000df 	ldrdcs	r0, [r0], -pc	; <UNPREDICTABLE>

20000480 <main>:


void main(void) {
20000480:	b580      	push	{r7, lr}
20000482:	b082      	sub	sp, #8
20000484:	af00      	add	r7, sp, #0
	init();
20000486:	f000 fbd3 	bl	20000c30 <init>
	clear_buffer();
2000048a:	f000 fb11 	bl	20000ab0 <clear_buffer>
#ifndef SIMULATOR
	draw_buffer();
2000048e:	f000 fb3d 	bl	20000b0c <draw_buffer>
#endif

    createBoids();
20000492:	f7ff ff7d 	bl	20000390 <createBoids>
    
	
    while (1) {
        for (int i = 0; i < BOID_COUNT; i++) {
20000496:	2300      	movs	r3, #0
20000498:	607b      	str	r3, [r7, #4]
2000049a:	e014      	b.n	200004c6 <main+0x46>
            boids[i].updateVel(&boids[i]);
2000049c:	4925      	ldr	r1, [pc, #148]	; (20000534 <main+0xb4>)
2000049e:	687a      	ldr	r2, [r7, #4]
200004a0:	0013      	movs	r3, r2
200004a2:	00db      	lsls	r3, r3, #3
200004a4:	1a9b      	subs	r3, r3, r2
200004a6:	009b      	lsls	r3, r3, #2
200004a8:	18cb      	adds	r3, r1, r3
200004aa:	3318      	adds	r3, #24
200004ac:	6819      	ldr	r1, [r3, #0]
200004ae:	687a      	ldr	r2, [r7, #4]
200004b0:	0013      	movs	r3, r2
200004b2:	00db      	lsls	r3, r3, #3
200004b4:	1a9b      	subs	r3, r3, r2
200004b6:	009b      	lsls	r3, r3, #2
200004b8:	4a1e      	ldr	r2, [pc, #120]	; (20000534 <main+0xb4>)
200004ba:	189b      	adds	r3, r3, r2
200004bc:	0018      	movs	r0, r3
200004be:	4788      	blx	r1
        for (int i = 0; i < BOID_COUNT; i++) {
200004c0:	687b      	ldr	r3, [r7, #4]
200004c2:	3301      	adds	r3, #1
200004c4:	607b      	str	r3, [r7, #4]
200004c6:	687b      	ldr	r3, [r7, #4]
200004c8:	2b02      	cmp	r3, #2
200004ca:	dde7      	ble.n	2000049c <main+0x1c>
        }
        for (int i = 0; i < BOID_COUNT; i++) {
200004cc:	2300      	movs	r3, #0
200004ce:	603b      	str	r3, [r7, #0]
200004d0:	e026      	b.n	20000520 <main+0xa0>
            boids[i].updatePos(&boids[i]);
200004d2:	4918      	ldr	r1, [pc, #96]	; (20000534 <main+0xb4>)
200004d4:	683a      	ldr	r2, [r7, #0]
200004d6:	0013      	movs	r3, r2
200004d8:	00db      	lsls	r3, r3, #3
200004da:	1a9b      	subs	r3, r3, r2
200004dc:	009b      	lsls	r3, r3, #2
200004de:	18cb      	adds	r3, r1, r3
200004e0:	3314      	adds	r3, #20
200004e2:	6819      	ldr	r1, [r3, #0]
200004e4:	683a      	ldr	r2, [r7, #0]
200004e6:	0013      	movs	r3, r2
200004e8:	00db      	lsls	r3, r3, #3
200004ea:	1a9b      	subs	r3, r3, r2
200004ec:	009b      	lsls	r3, r3, #2
200004ee:	4a11      	ldr	r2, [pc, #68]	; (20000534 <main+0xb4>)
200004f0:	189b      	adds	r3, r3, r2
200004f2:	0018      	movs	r0, r3
200004f4:	4788      	blx	r1
            boids[i].draw(&boids[i]);
200004f6:	490f      	ldr	r1, [pc, #60]	; (20000534 <main+0xb4>)
200004f8:	683a      	ldr	r2, [r7, #0]
200004fa:	0013      	movs	r3, r2
200004fc:	00db      	lsls	r3, r3, #3
200004fe:	1a9b      	subs	r3, r3, r2
20000500:	009b      	lsls	r3, r3, #2
20000502:	18cb      	adds	r3, r1, r3
20000504:	3310      	adds	r3, #16
20000506:	6819      	ldr	r1, [r3, #0]
20000508:	683a      	ldr	r2, [r7, #0]
2000050a:	0013      	movs	r3, r2
2000050c:	00db      	lsls	r3, r3, #3
2000050e:	1a9b      	subs	r3, r3, r2
20000510:	009b      	lsls	r3, r3, #2
20000512:	4a08      	ldr	r2, [pc, #32]	; (20000534 <main+0xb4>)
20000514:	189b      	adds	r3, r3, r2
20000516:	0018      	movs	r0, r3
20000518:	4788      	blx	r1
        for (int i = 0; i < BOID_COUNT; i++) {
2000051a:	683b      	ldr	r3, [r7, #0]
2000051c:	3301      	adds	r3, #1
2000051e:	603b      	str	r3, [r7, #0]
20000520:	683b      	ldr	r3, [r7, #0]
20000522:	2b02      	cmp	r3, #2
20000524:	ddd5      	ble.n	200004d2 <main+0x52>
        }
        
        draw_buffer();
20000526:	f000 faf1 	bl	20000b0c <draw_buffer>
		delay_milli(20);
2000052a:	2014      	movs	r0, #20
2000052c:	f000 f84e 	bl	200005cc <delay_milli>
    while (1) {
20000530:	e7b1      	b.n	20000496 <main+0x16>
20000532:	46c0      	nop			; (mov r8, r8)
20000534:	20002230 	andcs	r2, r0, r0, lsr r2

20000538 <delay_250ns>:
#define KB_OUT  (volatile unsigned char *) (0x40020C15)
#define KB_IN   (volatile unsigned char *) (0x40020C11)

#define SEG_OUT (unsigned char *) GPIO_D_ODR

static void delay_250ns(void) {
20000538:	b580      	push	{r7, lr}
2000053a:	af00      	add	r7, sp, #0
    *STK_CTRL = 0;
2000053c:	4b0c      	ldr	r3, [pc, #48]	; (20000570 <delay_250ns+0x38>)
2000053e:	2200      	movs	r2, #0
20000540:	601a      	str	r2, [r3, #0]
    *STK_LOAD = (168/4)-1;
20000542:	4b0c      	ldr	r3, [pc, #48]	; (20000574 <delay_250ns+0x3c>)
20000544:	2229      	movs	r2, #41	; 0x29
20000546:	601a      	str	r2, [r3, #0]
    *STK_VAL = 0;
20000548:	4b0b      	ldr	r3, [pc, #44]	; (20000578 <delay_250ns+0x40>)
2000054a:	2200      	movs	r2, #0
2000054c:	601a      	str	r2, [r3, #0]
    *STK_CTRL = 5;
2000054e:	4b08      	ldr	r3, [pc, #32]	; (20000570 <delay_250ns+0x38>)
20000550:	2205      	movs	r2, #5
20000552:	601a      	str	r2, [r3, #0]
    while((*STK_CTRL & 0x10000) == 0);
20000554:	46c0      	nop			; (mov r8, r8)
20000556:	4b06      	ldr	r3, [pc, #24]	; (20000570 <delay_250ns+0x38>)
20000558:	681a      	ldr	r2, [r3, #0]
2000055a:	2380      	movs	r3, #128	; 0x80
2000055c:	025b      	lsls	r3, r3, #9
2000055e:	4013      	ands	r3, r2
20000560:	d0f9      	beq.n	20000556 <delay_250ns+0x1e>
    *STK_CTRL = 0;
20000562:	4b03      	ldr	r3, [pc, #12]	; (20000570 <delay_250ns+0x38>)
20000564:	2200      	movs	r2, #0
20000566:	601a      	str	r2, [r3, #0]
}
20000568:	46c0      	nop			; (mov r8, r8)
2000056a:	46bd      	mov	sp, r7
2000056c:	bd80      	pop	{r7, pc}
2000056e:	46c0      	nop			; (mov r8, r8)
20000570:	e000e010 	and	lr, r0, r0, lsl r0
20000574:	e000e014 	and	lr, r0, r4, lsl r0
20000578:	e000e018 	and	lr, r0, r8, lsl r0

2000057c <delay_500ns>:

static void delay_500ns(void) {
2000057c:	b580      	push	{r7, lr}
2000057e:	af00      	add	r7, sp, #0
    delay_250ns();
20000580:	f7ff ffda 	bl	20000538 <delay_250ns>
    delay_250ns();
20000584:	f7ff ffd8 	bl	20000538 <delay_250ns>
}
20000588:	46c0      	nop			; (mov r8, r8)
2000058a:	46bd      	mov	sp, r7
2000058c:	bd80      	pop	{r7, pc}

2000058e <delay_mikro>:

void delay_mikro(unsigned int us) {
2000058e:	b580      	push	{r7, lr}
20000590:	b082      	sub	sp, #8
20000592:	af00      	add	r7, sp, #0
20000594:	6078      	str	r0, [r7, #4]
    #ifdef SIMULATOR
        if (us > 500) {
20000596:	687a      	ldr	r2, [r7, #4]
20000598:	23fa      	movs	r3, #250	; 0xfa
2000059a:	005b      	lsls	r3, r3, #1
2000059c:	429a      	cmp	r2, r3
2000059e:	d90d      	bls.n	200005bc <delay_mikro+0x2e>
            us = 1;
200005a0:	2301      	movs	r3, #1
200005a2:	607b      	str	r3, [r7, #4]
        }
    #endif
    while (us > 0) {
200005a4:	e00a      	b.n	200005bc <delay_mikro+0x2e>
        delay_250ns();
200005a6:	f7ff ffc7 	bl	20000538 <delay_250ns>
        delay_250ns();
200005aa:	f7ff ffc5 	bl	20000538 <delay_250ns>
        delay_250ns();
200005ae:	f7ff ffc3 	bl	20000538 <delay_250ns>
        delay_250ns();
200005b2:	f7ff ffc1 	bl	20000538 <delay_250ns>
        us--;
200005b6:	687b      	ldr	r3, [r7, #4]
200005b8:	3b01      	subs	r3, #1
200005ba:	607b      	str	r3, [r7, #4]
    while (us > 0) {
200005bc:	687b      	ldr	r3, [r7, #4]
200005be:	2b00      	cmp	r3, #0
200005c0:	d1f1      	bne.n	200005a6 <delay_mikro+0x18>
    }
}
200005c2:	46c0      	nop			; (mov r8, r8)
200005c4:	46c0      	nop			; (mov r8, r8)
200005c6:	46bd      	mov	sp, r7
200005c8:	b002      	add	sp, #8
200005ca:	bd80      	pop	{r7, pc}

200005cc <delay_milli>:

void delay_milli(unsigned int ms) {
200005cc:	b580      	push	{r7, lr}
200005ce:	b082      	sub	sp, #8
200005d0:	af00      	add	r7, sp, #0
200005d2:	6078      	str	r0, [r7, #4]
    #ifdef SIMULATOR
        ms = 1;
200005d4:	2301      	movs	r3, #1
200005d6:	607b      	str	r3, [r7, #4]
    #endif
    while (ms > 0) {
200005d8:	e007      	b.n	200005ea <delay_milli+0x1e>
        delay_mikro(1000);
200005da:	23fa      	movs	r3, #250	; 0xfa
200005dc:	009b      	lsls	r3, r3, #2
200005de:	0018      	movs	r0, r3
200005e0:	f7ff ffd5 	bl	2000058e <delay_mikro>
        ms--;
200005e4:	687b      	ldr	r3, [r7, #4]
200005e6:	3b01      	subs	r3, #1
200005e8:	607b      	str	r3, [r7, #4]
    while (ms > 0) {
200005ea:	687b      	ldr	r3, [r7, #4]
200005ec:	2b00      	cmp	r3, #0
200005ee:	d1f4      	bne.n	200005da <delay_milli+0xe>
    }
}
200005f0:	46c0      	nop			; (mov r8, r8)
200005f2:	46c0      	nop			; (mov r8, r8)
200005f4:	46bd      	mov	sp, r7
200005f6:	b002      	add	sp, #8
200005f8:	bd80      	pop	{r7, pc}

200005fa <graphic_ctrl_bit_set>:


typedef unsigned char uint8_t;

static void graphic_ctrl_bit_set(uint8_t x) {
200005fa:	b580      	push	{r7, lr}
200005fc:	b084      	sub	sp, #16
200005fe:	af00      	add	r7, sp, #0
20000600:	0002      	movs	r2, r0
20000602:	1dfb      	adds	r3, r7, #7
20000604:	701a      	strb	r2, [r3, #0]
    uint8_t c;
    c = *portOdrLow;
20000606:	4a10      	ldr	r2, [pc, #64]	; (20000648 <graphic_ctrl_bit_set+0x4e>)
20000608:	200f      	movs	r0, #15
2000060a:	183b      	adds	r3, r7, r0
2000060c:	7812      	ldrb	r2, [r2, #0]
2000060e:	701a      	strb	r2, [r3, #0]
    c &= ~B_SELECT;
20000610:	183b      	adds	r3, r7, r0
20000612:	183a      	adds	r2, r7, r0
20000614:	7812      	ldrb	r2, [r2, #0]
20000616:	2104      	movs	r1, #4
20000618:	438a      	bics	r2, r1
2000061a:	701a      	strb	r2, [r3, #0]
    c |= (~B_SELECT & x);
2000061c:	1dfb      	adds	r3, r7, #7
2000061e:	781b      	ldrb	r3, [r3, #0]
20000620:	b25b      	sxtb	r3, r3
20000622:	2204      	movs	r2, #4
20000624:	4393      	bics	r3, r2
20000626:	b25a      	sxtb	r2, r3
20000628:	183b      	adds	r3, r7, r0
2000062a:	781b      	ldrb	r3, [r3, #0]
2000062c:	b25b      	sxtb	r3, r3
2000062e:	4313      	orrs	r3, r2
20000630:	b25a      	sxtb	r2, r3
20000632:	183b      	adds	r3, r7, r0
20000634:	701a      	strb	r2, [r3, #0]
    *portOdrLow = c;
20000636:	4a04      	ldr	r2, [pc, #16]	; (20000648 <graphic_ctrl_bit_set+0x4e>)
20000638:	183b      	adds	r3, r7, r0
2000063a:	781b      	ldrb	r3, [r3, #0]
2000063c:	7013      	strb	r3, [r2, #0]
}
2000063e:	46c0      	nop			; (mov r8, r8)
20000640:	46bd      	mov	sp, r7
20000642:	b004      	add	sp, #16
20000644:	bd80      	pop	{r7, pc}
20000646:	46c0      	nop			; (mov r8, r8)
20000648:	40021014 	andmi	r1, r2, r4, lsl r0

2000064c <graphic_ctrl_bit_clear>:

static void graphic_ctrl_bit_clear(uint8_t x) {
2000064c:	b580      	push	{r7, lr}
2000064e:	b084      	sub	sp, #16
20000650:	af00      	add	r7, sp, #0
20000652:	0002      	movs	r2, r0
20000654:	1dfb      	adds	r3, r7, #7
20000656:	701a      	strb	r2, [r3, #0]
    uint8_t c;
    c = *portOdrLow;
20000658:	4a0f      	ldr	r2, [pc, #60]	; (20000698 <graphic_ctrl_bit_clear+0x4c>)
2000065a:	200f      	movs	r0, #15
2000065c:	183b      	adds	r3, r7, r0
2000065e:	7812      	ldrb	r2, [r2, #0]
20000660:	701a      	strb	r2, [r3, #0]
    c &= ~B_SELECT;
20000662:	183b      	adds	r3, r7, r0
20000664:	183a      	adds	r2, r7, r0
20000666:	7812      	ldrb	r2, [r2, #0]
20000668:	2104      	movs	r1, #4
2000066a:	438a      	bics	r2, r1
2000066c:	701a      	strb	r2, [r3, #0]
    c &= ~x;
2000066e:	1dfb      	adds	r3, r7, #7
20000670:	781b      	ldrb	r3, [r3, #0]
20000672:	b25b      	sxtb	r3, r3
20000674:	43db      	mvns	r3, r3
20000676:	b25b      	sxtb	r3, r3
20000678:	183a      	adds	r2, r7, r0
2000067a:	7812      	ldrb	r2, [r2, #0]
2000067c:	b252      	sxtb	r2, r2
2000067e:	4013      	ands	r3, r2
20000680:	b25a      	sxtb	r2, r3
20000682:	183b      	adds	r3, r7, r0
20000684:	701a      	strb	r2, [r3, #0]
    *portOdrLow = c;
20000686:	4a04      	ldr	r2, [pc, #16]	; (20000698 <graphic_ctrl_bit_clear+0x4c>)
20000688:	183b      	adds	r3, r7, r0
2000068a:	781b      	ldrb	r3, [r3, #0]
2000068c:	7013      	strb	r3, [r2, #0]
}
2000068e:	46c0      	nop			; (mov r8, r8)
20000690:	46bd      	mov	sp, r7
20000692:	b004      	add	sp, #16
20000694:	bd80      	pop	{r7, pc}
20000696:	46c0      	nop			; (mov r8, r8)
20000698:	40021014 	andmi	r1, r2, r4, lsl r0

2000069c <select_controller>:

static void select_controller(uint8_t controller) {
2000069c:	b580      	push	{r7, lr}
2000069e:	b084      	sub	sp, #16
200006a0:	af00      	add	r7, sp, #0
200006a2:	0002      	movs	r2, r0
200006a4:	1dfb      	adds	r3, r7, #7
200006a6:	701a      	strb	r2, [r3, #0]
    uint8_t mask = (B_CS1 | B_CS2);
200006a8:	200f      	movs	r0, #15
200006aa:	183b      	adds	r3, r7, r0
200006ac:	2218      	movs	r2, #24
200006ae:	701a      	strb	r2, [r3, #0]
    controller &= mask;
200006b0:	1dfb      	adds	r3, r7, #7
200006b2:	1dfa      	adds	r2, r7, #7
200006b4:	1839      	adds	r1, r7, r0
200006b6:	7812      	ldrb	r2, [r2, #0]
200006b8:	7809      	ldrb	r1, [r1, #0]
200006ba:	400a      	ands	r2, r1
200006bc:	701a      	strb	r2, [r3, #0]
    
    uint8_t c;
    c = *portOdrLow;
200006be:	4a10      	ldr	r2, [pc, #64]	; (20000700 <select_controller+0x64>)
200006c0:	210e      	movs	r1, #14
200006c2:	187b      	adds	r3, r7, r1
200006c4:	7812      	ldrb	r2, [r2, #0]
200006c6:	701a      	strb	r2, [r3, #0]
    c &= ~mask;     //Set CS1 and CS2 to 0
200006c8:	183b      	adds	r3, r7, r0
200006ca:	781b      	ldrb	r3, [r3, #0]
200006cc:	b25b      	sxtb	r3, r3
200006ce:	43db      	mvns	r3, r3
200006d0:	b25b      	sxtb	r3, r3
200006d2:	187a      	adds	r2, r7, r1
200006d4:	7812      	ldrb	r2, [r2, #0]
200006d6:	b252      	sxtb	r2, r2
200006d8:	4013      	ands	r3, r2
200006da:	b25a      	sxtb	r2, r3
200006dc:	187b      	adds	r3, r7, r1
200006de:	701a      	strb	r2, [r3, #0]
    c |= controller;//OR in CS1 and CS2 from controller
200006e0:	187b      	adds	r3, r7, r1
200006e2:	0008      	movs	r0, r1
200006e4:	1879      	adds	r1, r7, r1
200006e6:	1dfa      	adds	r2, r7, #7
200006e8:	7809      	ldrb	r1, [r1, #0]
200006ea:	7812      	ldrb	r2, [r2, #0]
200006ec:	430a      	orrs	r2, r1
200006ee:	701a      	strb	r2, [r3, #0]
    *portOdrLow = c;
200006f0:	4a03      	ldr	r2, [pc, #12]	; (20000700 <select_controller+0x64>)
200006f2:	183b      	adds	r3, r7, r0
200006f4:	781b      	ldrb	r3, [r3, #0]
200006f6:	7013      	strb	r3, [r2, #0]
}
200006f8:	46c0      	nop			; (mov r8, r8)
200006fa:	46bd      	mov	sp, r7
200006fc:	b004      	add	sp, #16
200006fe:	bd80      	pop	{r7, pc}
20000700:	40021014 	andmi	r1, r2, r4, lsl r0

20000704 <graphic_wait_ready>:

static void graphic_wait_ready(void) {
20000704:	b580      	push	{r7, lr}
20000706:	b082      	sub	sp, #8
20000708:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_clear(B_E);
2000070a:	2040      	movs	r0, #64	; 0x40
2000070c:	f7ff ff9e 	bl	2000064c <graphic_ctrl_bit_clear>
    *portModer = 0x00005555;
20000710:	4b14      	ldr	r3, [pc, #80]	; (20000764 <graphic_wait_ready+0x60>)
20000712:	4a15      	ldr	r2, [pc, #84]	; (20000768 <graphic_wait_ready+0x64>)
20000714:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_RS);
20000716:	2001      	movs	r0, #1
20000718:	f7ff ff98 	bl	2000064c <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_set(B_RW);
2000071c:	2002      	movs	r0, #2
2000071e:	f7ff ff6c 	bl	200005fa <graphic_ctrl_bit_set>
    delay_500ns();
20000722:	f7ff ff2b 	bl	2000057c <delay_500ns>
    
    while(1) {
        graphic_ctrl_bit_set(B_E);
20000726:	2040      	movs	r0, #64	; 0x40
20000728:	f7ff ff67 	bl	200005fa <graphic_ctrl_bit_set>
        delay_500ns();
2000072c:	f7ff ff26 	bl	2000057c <delay_500ns>
        graphic_ctrl_bit_clear(B_E);
20000730:	2040      	movs	r0, #64	; 0x40
20000732:	f7ff ff8b 	bl	2000064c <graphic_ctrl_bit_clear>
        delay_500ns();
20000736:	f7ff ff21 	bl	2000057c <delay_500ns>
        uint8_t busy = *portIdrHigh;
2000073a:	4a0c      	ldr	r2, [pc, #48]	; (2000076c <graphic_wait_ready+0x68>)
2000073c:	1dfb      	adds	r3, r7, #7
2000073e:	7812      	ldrb	r2, [r2, #0]
20000740:	701a      	strb	r2, [r3, #0]
        busy &= LCD_BUSY;
20000742:	1dfb      	adds	r3, r7, #7
20000744:	1dfa      	adds	r2, r7, #7
20000746:	7812      	ldrb	r2, [r2, #0]
20000748:	217f      	movs	r1, #127	; 0x7f
2000074a:	438a      	bics	r2, r1
2000074c:	701a      	strb	r2, [r3, #0]
        if (~busy) {
            break;
2000074e:	46c0      	nop			; (mov r8, r8)
        }
    }
    graphic_ctrl_bit_set(B_E);
20000750:	2040      	movs	r0, #64	; 0x40
20000752:	f7ff ff52 	bl	200005fa <graphic_ctrl_bit_set>
    *portModer = 0x55555555;
20000756:	4b03      	ldr	r3, [pc, #12]	; (20000764 <graphic_wait_ready+0x60>)
20000758:	4a05      	ldr	r2, [pc, #20]	; (20000770 <graphic_wait_ready+0x6c>)
2000075a:	601a      	str	r2, [r3, #0]
}
2000075c:	46c0      	nop			; (mov r8, r8)
2000075e:	46bd      	mov	sp, r7
20000760:	b002      	add	sp, #8
20000762:	bd80      	pop	{r7, pc}
20000764:	40021000 	andmi	r1, r2, r0
20000768:	00005555 	andeq	r5, r0, r5, asr r5
2000076c:	40021011 	andmi	r1, r2, r1, lsl r0
20000770:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000774 <graphic_read>:

static uint8_t graphic_read(uint8_t controller) {
20000774:	b580      	push	{r7, lr}
20000776:	b084      	sub	sp, #16
20000778:	af00      	add	r7, sp, #0
2000077a:	0002      	movs	r2, r0
2000077c:	1dfb      	adds	r3, r7, #7
2000077e:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20000780:	2040      	movs	r0, #64	; 0x40
20000782:	f7ff ff63 	bl	2000064c <graphic_ctrl_bit_clear>
    *portModer = 0x00005555;
20000786:	4b1b      	ldr	r3, [pc, #108]	; (200007f4 <graphic_read+0x80>)
20000788:	4a1b      	ldr	r2, [pc, #108]	; (200007f8 <graphic_read+0x84>)
2000078a:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_set(B_RS);
2000078c:	2001      	movs	r0, #1
2000078e:	f7ff ff34 	bl	200005fa <graphic_ctrl_bit_set>
    graphic_ctrl_bit_set(B_RW);
20000792:	2002      	movs	r0, #2
20000794:	f7ff ff31 	bl	200005fa <graphic_ctrl_bit_set>
    select_controller(controller);
20000798:	1dfb      	adds	r3, r7, #7
2000079a:	781b      	ldrb	r3, [r3, #0]
2000079c:	0018      	movs	r0, r3
2000079e:	f7ff ff7d 	bl	2000069c <select_controller>
    delay_500ns();
200007a2:	f7ff feeb 	bl	2000057c <delay_500ns>
    graphic_ctrl_bit_set(B_E);
200007a6:	2040      	movs	r0, #64	; 0x40
200007a8:	f7ff ff27 	bl	200005fa <graphic_ctrl_bit_set>
    delay_500ns();
200007ac:	f7ff fee6 	bl	2000057c <delay_500ns>
    uint8_t rv = *portIdrHigh;
200007b0:	4a12      	ldr	r2, [pc, #72]	; (200007fc <graphic_read+0x88>)
200007b2:	230f      	movs	r3, #15
200007b4:	18fb      	adds	r3, r7, r3
200007b6:	7812      	ldrb	r2, [r2, #0]
200007b8:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
200007ba:	2040      	movs	r0, #64	; 0x40
200007bc:	f7ff ff46 	bl	2000064c <graphic_ctrl_bit_clear>
    *portModer = 0x55555555;
200007c0:	4b0c      	ldr	r3, [pc, #48]	; (200007f4 <graphic_read+0x80>)
200007c2:	4a0f      	ldr	r2, [pc, #60]	; (20000800 <graphic_read+0x8c>)
200007c4:	601a      	str	r2, [r3, #0]
    if (controller == B_CS1 || controller == B_CS2) {
200007c6:	1dfb      	adds	r3, r7, #7
200007c8:	781b      	ldrb	r3, [r3, #0]
200007ca:	2b08      	cmp	r3, #8
200007cc:	d003      	beq.n	200007d6 <graphic_read+0x62>
200007ce:	1dfb      	adds	r3, r7, #7
200007d0:	781b      	ldrb	r3, [r3, #0]
200007d2:	2b10      	cmp	r3, #16
200007d4:	d106      	bne.n	200007e4 <graphic_read+0x70>
        select_controller(controller);
200007d6:	1dfb      	adds	r3, r7, #7
200007d8:	781b      	ldrb	r3, [r3, #0]
200007da:	0018      	movs	r0, r3
200007dc:	f7ff ff5e 	bl	2000069c <select_controller>
        graphic_wait_ready();
200007e0:	f7ff ff90 	bl	20000704 <graphic_wait_ready>
    }
    return rv;
200007e4:	230f      	movs	r3, #15
200007e6:	18fb      	adds	r3, r7, r3
200007e8:	781b      	ldrb	r3, [r3, #0]
}
200007ea:	0018      	movs	r0, r3
200007ec:	46bd      	mov	sp, r7
200007ee:	b004      	add	sp, #16
200007f0:	bd80      	pop	{r7, pc}
200007f2:	46c0      	nop			; (mov r8, r8)
200007f4:	40021000 	andmi	r1, r2, r0
200007f8:	00005555 	andeq	r5, r0, r5, asr r5
200007fc:	40021011 	andmi	r1, r2, r1, lsl r0
20000800:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000804 <graphic_write>:

static void graphic_write(uint8_t value, uint8_t controller) {
20000804:	b580      	push	{r7, lr}
20000806:	b082      	sub	sp, #8
20000808:	af00      	add	r7, sp, #0
2000080a:	0002      	movs	r2, r0
2000080c:	1dfb      	adds	r3, r7, #7
2000080e:	701a      	strb	r2, [r3, #0]
20000810:	1dbb      	adds	r3, r7, #6
20000812:	1c0a      	adds	r2, r1, #0
20000814:	701a      	strb	r2, [r3, #0]
    *portOdrHigh = value;
20000816:	4a17      	ldr	r2, [pc, #92]	; (20000874 <graphic_write+0x70>)
20000818:	1dfb      	adds	r3, r7, #7
2000081a:	781b      	ldrb	r3, [r3, #0]
2000081c:	7013      	strb	r3, [r2, #0]
    select_controller(controller);
2000081e:	1dbb      	adds	r3, r7, #6
20000820:	781b      	ldrb	r3, [r3, #0]
20000822:	0018      	movs	r0, r3
20000824:	f7ff ff3a 	bl	2000069c <select_controller>
    delay_500ns();
20000828:	f7ff fea8 	bl	2000057c <delay_500ns>
    graphic_ctrl_bit_set(B_E);
2000082c:	2040      	movs	r0, #64	; 0x40
2000082e:	f7ff fee4 	bl	200005fa <graphic_ctrl_bit_set>
    delay_500ns();
20000832:	f7ff fea3 	bl	2000057c <delay_500ns>
    graphic_ctrl_bit_clear(B_E);
20000836:	2040      	movs	r0, #64	; 0x40
20000838:	f7ff ff08 	bl	2000064c <graphic_ctrl_bit_clear>
    
    if (controller == B_CS1 || controller == B_CS2) {
2000083c:	1dbb      	adds	r3, r7, #6
2000083e:	781b      	ldrb	r3, [r3, #0]
20000840:	2b08      	cmp	r3, #8
20000842:	d003      	beq.n	2000084c <graphic_write+0x48>
20000844:	1dbb      	adds	r3, r7, #6
20000846:	781b      	ldrb	r3, [r3, #0]
20000848:	2b10      	cmp	r3, #16
2000084a:	d106      	bne.n	2000085a <graphic_write+0x56>
        select_controller(controller);
2000084c:	1dbb      	adds	r3, r7, #6
2000084e:	781b      	ldrb	r3, [r3, #0]
20000850:	0018      	movs	r0, r3
20000852:	f7ff ff23 	bl	2000069c <select_controller>
        graphic_wait_ready();
20000856:	f7ff ff55 	bl	20000704 <graphic_wait_ready>
    }
    
    *portOdrHigh = 0;
2000085a:	4b06      	ldr	r3, [pc, #24]	; (20000874 <graphic_write+0x70>)
2000085c:	2200      	movs	r2, #0
2000085e:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_set(B_E);
20000860:	2040      	movs	r0, #64	; 0x40
20000862:	f7ff feca 	bl	200005fa <graphic_ctrl_bit_set>
    select_controller(0);
20000866:	2000      	movs	r0, #0
20000868:	f7ff ff18 	bl	2000069c <select_controller>
}
2000086c:	46c0      	nop			; (mov r8, r8)
2000086e:	46bd      	mov	sp, r7
20000870:	b002      	add	sp, #8
20000872:	bd80      	pop	{r7, pc}
20000874:	40021015 	andmi	r1, r2, r5, lsl r0

20000878 <graphic_write_command>:

static void graphic_write_command(uint8_t command, uint8_t controller) {
20000878:	b580      	push	{r7, lr}
2000087a:	b082      	sub	sp, #8
2000087c:	af00      	add	r7, sp, #0
2000087e:	0002      	movs	r2, r0
20000880:	1dfb      	adds	r3, r7, #7
20000882:	701a      	strb	r2, [r3, #0]
20000884:	1dbb      	adds	r3, r7, #6
20000886:	1c0a      	adds	r2, r1, #0
20000888:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
2000088a:	2040      	movs	r0, #64	; 0x40
2000088c:	f7ff fede 	bl	2000064c <graphic_ctrl_bit_clear>
    select_controller(controller);
20000890:	1dbb      	adds	r3, r7, #6
20000892:	781b      	ldrb	r3, [r3, #0]
20000894:	0018      	movs	r0, r3
20000896:	f7ff ff01 	bl	2000069c <select_controller>
    graphic_ctrl_bit_clear(B_RS);
2000089a:	2001      	movs	r0, #1
2000089c:	f7ff fed6 	bl	2000064c <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_clear(B_RW);
200008a0:	2002      	movs	r0, #2
200008a2:	f7ff fed3 	bl	2000064c <graphic_ctrl_bit_clear>
    graphic_write(command, controller);
200008a6:	1dbb      	adds	r3, r7, #6
200008a8:	781a      	ldrb	r2, [r3, #0]
200008aa:	1dfb      	adds	r3, r7, #7
200008ac:	781b      	ldrb	r3, [r3, #0]
200008ae:	0011      	movs	r1, r2
200008b0:	0018      	movs	r0, r3
200008b2:	f7ff ffa7 	bl	20000804 <graphic_write>
}
200008b6:	46c0      	nop			; (mov r8, r8)
200008b8:	46bd      	mov	sp, r7
200008ba:	b002      	add	sp, #8
200008bc:	bd80      	pop	{r7, pc}

200008be <graphic_write_data>:

static void graphic_write_data(uint8_t data, uint8_t controller) {
200008be:	b580      	push	{r7, lr}
200008c0:	b082      	sub	sp, #8
200008c2:	af00      	add	r7, sp, #0
200008c4:	0002      	movs	r2, r0
200008c6:	1dfb      	adds	r3, r7, #7
200008c8:	701a      	strb	r2, [r3, #0]
200008ca:	1dbb      	adds	r3, r7, #6
200008cc:	1c0a      	adds	r2, r1, #0
200008ce:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
200008d0:	2040      	movs	r0, #64	; 0x40
200008d2:	f7ff febb 	bl	2000064c <graphic_ctrl_bit_clear>
    select_controller(controller);
200008d6:	1dbb      	adds	r3, r7, #6
200008d8:	781b      	ldrb	r3, [r3, #0]
200008da:	0018      	movs	r0, r3
200008dc:	f7ff fede 	bl	2000069c <select_controller>
    graphic_ctrl_bit_set(B_RS);
200008e0:	2001      	movs	r0, #1
200008e2:	f7ff fe8a 	bl	200005fa <graphic_ctrl_bit_set>
    graphic_ctrl_bit_clear(B_RW);
200008e6:	2002      	movs	r0, #2
200008e8:	f7ff feb0 	bl	2000064c <graphic_ctrl_bit_clear>
    graphic_write(data, controller);
200008ec:	1dbb      	adds	r3, r7, #6
200008ee:	781a      	ldrb	r2, [r3, #0]
200008f0:	1dfb      	adds	r3, r7, #7
200008f2:	781b      	ldrb	r3, [r3, #0]
200008f4:	0011      	movs	r1, r2
200008f6:	0018      	movs	r0, r3
200008f8:	f7ff ff84 	bl	20000804 <graphic_write>
}
200008fc:	46c0      	nop			; (mov r8, r8)
200008fe:	46bd      	mov	sp, r7
20000900:	b002      	add	sp, #8
20000902:	bd80      	pop	{r7, pc}

20000904 <graphic_read_data>:

static uint8_t graphic_read_data(uint8_t controller) {
20000904:	b580      	push	{r7, lr}
20000906:	b082      	sub	sp, #8
20000908:	af00      	add	r7, sp, #0
2000090a:	0002      	movs	r2, r0
2000090c:	1dfb      	adds	r3, r7, #7
2000090e:	701a      	strb	r2, [r3, #0]
    graphic_read(controller);
20000910:	1dfb      	adds	r3, r7, #7
20000912:	781b      	ldrb	r3, [r3, #0]
20000914:	0018      	movs	r0, r3
20000916:	f7ff ff2d 	bl	20000774 <graphic_read>
    return graphic_read(controller);
2000091a:	1dfb      	adds	r3, r7, #7
2000091c:	781b      	ldrb	r3, [r3, #0]
2000091e:	0018      	movs	r0, r3
20000920:	f7ff ff28 	bl	20000774 <graphic_read>
20000924:	0003      	movs	r3, r0
}
20000926:	0018      	movs	r0, r3
20000928:	46bd      	mov	sp, r7
2000092a:	b002      	add	sp, #8
2000092c:	bd80      	pop	{r7, pc}

2000092e <graphic_initialize>:

static void graphic_initialize() {
2000092e:	b580      	push	{r7, lr}
20000930:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_set(B_E);
20000932:	2040      	movs	r0, #64	; 0x40
20000934:	f7ff fe61 	bl	200005fa <graphic_ctrl_bit_set>
    delay_mikro(10);
20000938:	200a      	movs	r0, #10
2000093a:	f7ff fe28 	bl	2000058e <delay_mikro>
    graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
2000093e:	2078      	movs	r0, #120	; 0x78
20000940:	f7ff fe84 	bl	2000064c <graphic_ctrl_bit_clear>
    delay_milli(30);
20000944:	201e      	movs	r0, #30
20000946:	f7ff fe41 	bl	200005cc <delay_milli>
    graphic_ctrl_bit_set(B_RST);
2000094a:	2020      	movs	r0, #32
2000094c:	f7ff fe55 	bl	200005fa <graphic_ctrl_bit_set>
    
    graphic_write_command(LCD_OFF,          B_CS1 | B_CS2);
20000950:	2118      	movs	r1, #24
20000952:	203e      	movs	r0, #62	; 0x3e
20000954:	f7ff ff90 	bl	20000878 <graphic_write_command>
    graphic_write_command(LCD_ON,           B_CS1 | B_CS2);
20000958:	2118      	movs	r1, #24
2000095a:	203f      	movs	r0, #63	; 0x3f
2000095c:	f7ff ff8c 	bl	20000878 <graphic_write_command>
    graphic_write_command(LCD_DISP_START,   B_CS1 | B_CS2);
20000960:	2118      	movs	r1, #24
20000962:	20c0      	movs	r0, #192	; 0xc0
20000964:	f7ff ff88 	bl	20000878 <graphic_write_command>
    graphic_write_command(LCD_SET_ADD,      B_CS1 | B_CS2);
20000968:	2118      	movs	r1, #24
2000096a:	2040      	movs	r0, #64	; 0x40
2000096c:	f7ff ff84 	bl	20000878 <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE,     B_CS1 | B_CS2);
20000970:	2118      	movs	r1, #24
20000972:	20b8      	movs	r0, #184	; 0xb8
20000974:	f7ff ff80 	bl	20000878 <graphic_write_command>
    
    select_controller(0);
20000978:	2000      	movs	r0, #0
2000097a:	f7ff fe8f 	bl	2000069c <select_controller>
}
2000097e:	46c0      	nop			; (mov r8, r8)
20000980:	46bd      	mov	sp, r7
20000982:	bd80      	pop	{r7, pc}

20000984 <graphic_clear_screen>:

static void graphic_clear_screen() {
20000984:	b580      	push	{r7, lr}
20000986:	b082      	sub	sp, #8
20000988:	af00      	add	r7, sp, #0
    for (uint8_t page = 0; page < 8; page++) {
2000098a:	1dfb      	adds	r3, r7, #7
2000098c:	2200      	movs	r2, #0
2000098e:	701a      	strb	r2, [r3, #0]
20000990:	e023      	b.n	200009da <graphic_clear_screen+0x56>
        graphic_write_command(LCD_SET_PAGE | page,  B_CS1 | B_CS2);
20000992:	1dfb      	adds	r3, r7, #7
20000994:	781b      	ldrb	r3, [r3, #0]
20000996:	2248      	movs	r2, #72	; 0x48
20000998:	4252      	negs	r2, r2
2000099a:	4313      	orrs	r3, r2
2000099c:	b2db      	uxtb	r3, r3
2000099e:	2118      	movs	r1, #24
200009a0:	0018      	movs	r0, r3
200009a2:	f7ff ff69 	bl	20000878 <graphic_write_command>
        graphic_write_command(LCD_SET_ADD | 0,      B_CS1 | B_CS2);
200009a6:	2118      	movs	r1, #24
200009a8:	2040      	movs	r0, #64	; 0x40
200009aa:	f7ff ff65 	bl	20000878 <graphic_write_command>
        for (uint8_t add = 0; add < 64; add++) {
200009ae:	1dbb      	adds	r3, r7, #6
200009b0:	2200      	movs	r2, #0
200009b2:	701a      	strb	r2, [r3, #0]
200009b4:	e008      	b.n	200009c8 <graphic_clear_screen+0x44>
            graphic_write_data(0, B_CS1 | B_CS2);
200009b6:	2118      	movs	r1, #24
200009b8:	2000      	movs	r0, #0
200009ba:	f7ff ff80 	bl	200008be <graphic_write_data>
        for (uint8_t add = 0; add < 64; add++) {
200009be:	1dbb      	adds	r3, r7, #6
200009c0:	781a      	ldrb	r2, [r3, #0]
200009c2:	1dbb      	adds	r3, r7, #6
200009c4:	3201      	adds	r2, #1
200009c6:	701a      	strb	r2, [r3, #0]
200009c8:	1dbb      	adds	r3, r7, #6
200009ca:	781b      	ldrb	r3, [r3, #0]
200009cc:	2b3f      	cmp	r3, #63	; 0x3f
200009ce:	d9f2      	bls.n	200009b6 <graphic_clear_screen+0x32>
    for (uint8_t page = 0; page < 8; page++) {
200009d0:	1dfb      	adds	r3, r7, #7
200009d2:	781a      	ldrb	r2, [r3, #0]
200009d4:	1dfb      	adds	r3, r7, #7
200009d6:	3201      	adds	r2, #1
200009d8:	701a      	strb	r2, [r3, #0]
200009da:	1dfb      	adds	r3, r7, #7
200009dc:	781b      	ldrb	r3, [r3, #0]
200009de:	2b07      	cmp	r3, #7
200009e0:	d9d7      	bls.n	20000992 <graphic_clear_screen+0xe>
        }
    }
}
200009e2:	46c0      	nop			; (mov r8, r8)
200009e4:	46c0      	nop			; (mov r8, r8)
200009e6:	46bd      	mov	sp, r7
200009e8:	b002      	add	sp, #8
200009ea:	bd80      	pop	{r7, pc}

200009ec <pixel>:


static uint8_t buffer[8][128];


void pixel(uint8_t x, uint8_t y, uint8_t set) {
200009ec:	b5b0      	push	{r4, r5, r7, lr}
200009ee:	b084      	sub	sp, #16
200009f0:	af00      	add	r7, sp, #0
200009f2:	0004      	movs	r4, r0
200009f4:	0008      	movs	r0, r1
200009f6:	0011      	movs	r1, r2
200009f8:	1dfb      	adds	r3, r7, #7
200009fa:	1c22      	adds	r2, r4, #0
200009fc:	701a      	strb	r2, [r3, #0]
200009fe:	1dbb      	adds	r3, r7, #6
20000a00:	1c02      	adds	r2, r0, #0
20000a02:	701a      	strb	r2, [r3, #0]
20000a04:	1d7b      	adds	r3, r7, #5
20000a06:	1c0a      	adds	r2, r1, #0
20000a08:	701a      	strb	r2, [r3, #0]
	if (x>127 || y>63) return;
20000a0a:	1dfb      	adds	r3, r7, #7
20000a0c:	781b      	ldrb	r3, [r3, #0]
20000a0e:	b25b      	sxtb	r3, r3
20000a10:	2b00      	cmp	r3, #0
20000a12:	db46      	blt.n	20000aa2 <pixel+0xb6>
20000a14:	1dbb      	adds	r3, r7, #6
20000a16:	781b      	ldrb	r3, [r3, #0]
20000a18:	2b3f      	cmp	r3, #63	; 0x3f
20000a1a:	d842      	bhi.n	20000aa2 <pixel+0xb6>
	
    uint8_t mask = 1 << (y % 8);
20000a1c:	1dbb      	adds	r3, r7, #6
20000a1e:	781b      	ldrb	r3, [r3, #0]
20000a20:	2207      	movs	r2, #7
20000a22:	4013      	ands	r3, r2
20000a24:	2201      	movs	r2, #1
20000a26:	409a      	lsls	r2, r3
20000a28:	250f      	movs	r5, #15
20000a2a:	197b      	adds	r3, r7, r5
20000a2c:	701a      	strb	r2, [r3, #0]
	
	if (set) {
20000a2e:	1d7b      	adds	r3, r7, #5
20000a30:	781b      	ldrb	r3, [r3, #0]
20000a32:	2b00      	cmp	r3, #0
20000a34:	d017      	beq.n	20000a66 <pixel+0x7a>
		buffer[y/8][x] |= mask;
20000a36:	1dbb      	adds	r3, r7, #6
20000a38:	781b      	ldrb	r3, [r3, #0]
20000a3a:	08db      	lsrs	r3, r3, #3
20000a3c:	b2d8      	uxtb	r0, r3
20000a3e:	0002      	movs	r2, r0
20000a40:	1dfb      	adds	r3, r7, #7
20000a42:	781b      	ldrb	r3, [r3, #0]
20000a44:	4919      	ldr	r1, [pc, #100]	; (20000aac <pixel+0xc0>)
20000a46:	01d2      	lsls	r2, r2, #7
20000a48:	188a      	adds	r2, r1, r2
20000a4a:	5cd1      	ldrb	r1, [r2, r3]
20000a4c:	0004      	movs	r4, r0
20000a4e:	1dfb      	adds	r3, r7, #7
20000a50:	781b      	ldrb	r3, [r3, #0]
20000a52:	197a      	adds	r2, r7, r5
20000a54:	7812      	ldrb	r2, [r2, #0]
20000a56:	430a      	orrs	r2, r1
20000a58:	b2d0      	uxtb	r0, r2
20000a5a:	4914      	ldr	r1, [pc, #80]	; (20000aac <pixel+0xc0>)
20000a5c:	01e2      	lsls	r2, r4, #7
20000a5e:	188a      	adds	r2, r1, r2
20000a60:	1c01      	adds	r1, r0, #0
20000a62:	54d1      	strb	r1, [r2, r3]
20000a64:	e01e      	b.n	20000aa4 <pixel+0xb8>
	} else {
		buffer[y/8][x] &= ~mask;
20000a66:	1dbb      	adds	r3, r7, #6
20000a68:	781b      	ldrb	r3, [r3, #0]
20000a6a:	08db      	lsrs	r3, r3, #3
20000a6c:	b2d8      	uxtb	r0, r3
20000a6e:	0002      	movs	r2, r0
20000a70:	1dfb      	adds	r3, r7, #7
20000a72:	781b      	ldrb	r3, [r3, #0]
20000a74:	490d      	ldr	r1, [pc, #52]	; (20000aac <pixel+0xc0>)
20000a76:	01d2      	lsls	r2, r2, #7
20000a78:	188a      	adds	r2, r1, r2
20000a7a:	5cd3      	ldrb	r3, [r2, r3]
20000a7c:	b25b      	sxtb	r3, r3
20000a7e:	220f      	movs	r2, #15
20000a80:	18ba      	adds	r2, r7, r2
20000a82:	7812      	ldrb	r2, [r2, #0]
20000a84:	b252      	sxtb	r2, r2
20000a86:	43d2      	mvns	r2, r2
20000a88:	b252      	sxtb	r2, r2
20000a8a:	4013      	ands	r3, r2
20000a8c:	b259      	sxtb	r1, r3
20000a8e:	0002      	movs	r2, r0
20000a90:	1dfb      	adds	r3, r7, #7
20000a92:	781b      	ldrb	r3, [r3, #0]
20000a94:	b2c8      	uxtb	r0, r1
20000a96:	4905      	ldr	r1, [pc, #20]	; (20000aac <pixel+0xc0>)
20000a98:	01d2      	lsls	r2, r2, #7
20000a9a:	188a      	adds	r2, r1, r2
20000a9c:	1c01      	adds	r1, r0, #0
20000a9e:	54d1      	strb	r1, [r2, r3]
20000aa0:	e000      	b.n	20000aa4 <pixel+0xb8>
	if (x>127 || y>63) return;
20000aa2:	46c0      	nop			; (mov r8, r8)
	}
}
20000aa4:	46bd      	mov	sp, r7
20000aa6:	b004      	add	sp, #16
20000aa8:	bdb0      	pop	{r4, r5, r7, pc}
20000aaa:	46c0      	nop			; (mov r8, r8)
20000aac:	20002284 	andcs	r2, r0, r4, lsl #5

20000ab0 <clear_buffer>:

void clear_buffer() {
20000ab0:	b580      	push	{r7, lr}
20000ab2:	b082      	sub	sp, #8
20000ab4:	af00      	add	r7, sp, #0
	for (uint8_t y = 0; y<8; y++) {
20000ab6:	1dfb      	adds	r3, r7, #7
20000ab8:	2200      	movs	r2, #0
20000aba:	701a      	strb	r2, [r3, #0]
20000abc:	e01b      	b.n	20000af6 <clear_buffer+0x46>
		for (uint8_t x = 0; x<128; x++) {
20000abe:	1dbb      	adds	r3, r7, #6
20000ac0:	2200      	movs	r2, #0
20000ac2:	701a      	strb	r2, [r3, #0]
20000ac4:	e00d      	b.n	20000ae2 <clear_buffer+0x32>
			buffer[y][x] = 0;
20000ac6:	1dfb      	adds	r3, r7, #7
20000ac8:	781a      	ldrb	r2, [r3, #0]
20000aca:	1dbb      	adds	r3, r7, #6
20000acc:	781b      	ldrb	r3, [r3, #0]
20000ace:	490e      	ldr	r1, [pc, #56]	; (20000b08 <clear_buffer+0x58>)
20000ad0:	01d2      	lsls	r2, r2, #7
20000ad2:	188a      	adds	r2, r1, r2
20000ad4:	2100      	movs	r1, #0
20000ad6:	54d1      	strb	r1, [r2, r3]
		for (uint8_t x = 0; x<128; x++) {
20000ad8:	1dbb      	adds	r3, r7, #6
20000ada:	781a      	ldrb	r2, [r3, #0]
20000adc:	1dbb      	adds	r3, r7, #6
20000ade:	3201      	adds	r2, #1
20000ae0:	701a      	strb	r2, [r3, #0]
20000ae2:	1dbb      	adds	r3, r7, #6
20000ae4:	781b      	ldrb	r3, [r3, #0]
20000ae6:	b25b      	sxtb	r3, r3
20000ae8:	2b00      	cmp	r3, #0
20000aea:	daec      	bge.n	20000ac6 <clear_buffer+0x16>
	for (uint8_t y = 0; y<8; y++) {
20000aec:	1dfb      	adds	r3, r7, #7
20000aee:	781a      	ldrb	r2, [r3, #0]
20000af0:	1dfb      	adds	r3, r7, #7
20000af2:	3201      	adds	r2, #1
20000af4:	701a      	strb	r2, [r3, #0]
20000af6:	1dfb      	adds	r3, r7, #7
20000af8:	781b      	ldrb	r3, [r3, #0]
20000afa:	2b07      	cmp	r3, #7
20000afc:	d9df      	bls.n	20000abe <clear_buffer+0xe>
		}
	}
}
20000afe:	46c0      	nop			; (mov r8, r8)
20000b00:	46c0      	nop			; (mov r8, r8)
20000b02:	46bd      	mov	sp, r7
20000b04:	b002      	add	sp, #8
20000b06:	bd80      	pop	{r7, pc}
20000b08:	20002284 	andcs	r2, r0, r4, lsl #5

20000b0c <draw_buffer>:

void draw_buffer() {
20000b0c:	b580      	push	{r7, lr}
20000b0e:	b082      	sub	sp, #8
20000b10:	af00      	add	r7, sp, #0
	for (uint8_t y = 0; y<8; y++) {
20000b12:	1dfb      	adds	r3, r7, #7
20000b14:	2200      	movs	r2, #0
20000b16:	701a      	strb	r2, [r3, #0]
20000b18:	e038      	b.n	20000b8c <draw_buffer+0x80>
		for (uint8_t x = 0; x<64; x++) {
20000b1a:	1dbb      	adds	r3, r7, #6
20000b1c:	2200      	movs	r2, #0
20000b1e:	701a      	strb	r2, [r3, #0]
20000b20:	e02b      	b.n	20000b7a <draw_buffer+0x6e>
			graphic_write_command(LCD_SET_ADD | x, B_CS1);
20000b22:	1dbb      	adds	r3, r7, #6
20000b24:	781b      	ldrb	r3, [r3, #0]
20000b26:	2240      	movs	r2, #64	; 0x40
20000b28:	4313      	orrs	r3, r2
20000b2a:	b2db      	uxtb	r3, r3
20000b2c:	2108      	movs	r1, #8
20000b2e:	0018      	movs	r0, r3
20000b30:	f7ff fea2 	bl	20000878 <graphic_write_command>
			graphic_write_command(LCD_SET_PAGE | y, B_CS1);
20000b34:	1dfb      	adds	r3, r7, #7
20000b36:	781b      	ldrb	r3, [r3, #0]
20000b38:	2248      	movs	r2, #72	; 0x48
20000b3a:	4252      	negs	r2, r2
20000b3c:	4313      	orrs	r3, r2
20000b3e:	b2db      	uxtb	r3, r3
20000b40:	2108      	movs	r1, #8
20000b42:	0018      	movs	r0, r3
20000b44:	f7ff fe98 	bl	20000878 <graphic_write_command>
			graphic_write_data(buffer[y][x], B_CS1);
20000b48:	1dfb      	adds	r3, r7, #7
20000b4a:	781a      	ldrb	r2, [r3, #0]
20000b4c:	1dbb      	adds	r3, r7, #6
20000b4e:	781b      	ldrb	r3, [r3, #0]
20000b50:	4936      	ldr	r1, [pc, #216]	; (20000c2c <draw_buffer+0x120>)
20000b52:	01d2      	lsls	r2, r2, #7
20000b54:	188a      	adds	r2, r1, r2
20000b56:	5cd3      	ldrb	r3, [r2, r3]
20000b58:	2108      	movs	r1, #8
20000b5a:	0018      	movs	r0, r3
20000b5c:	f7ff feaf 	bl	200008be <graphic_write_data>
			
			graphic_write_command(LCD_ON,           B_CS1 | B_CS2);
20000b60:	2118      	movs	r1, #24
20000b62:	203f      	movs	r0, #63	; 0x3f
20000b64:	f7ff fe88 	bl	20000878 <graphic_write_command>
			graphic_write_command(LCD_DISP_START,   B_CS1 | B_CS2);
20000b68:	2118      	movs	r1, #24
20000b6a:	20c0      	movs	r0, #192	; 0xc0
20000b6c:	f7ff fe84 	bl	20000878 <graphic_write_command>
		for (uint8_t x = 0; x<64; x++) {
20000b70:	1dbb      	adds	r3, r7, #6
20000b72:	781a      	ldrb	r2, [r3, #0]
20000b74:	1dbb      	adds	r3, r7, #6
20000b76:	3201      	adds	r2, #1
20000b78:	701a      	strb	r2, [r3, #0]
20000b7a:	1dbb      	adds	r3, r7, #6
20000b7c:	781b      	ldrb	r3, [r3, #0]
20000b7e:	2b3f      	cmp	r3, #63	; 0x3f
20000b80:	d9cf      	bls.n	20000b22 <draw_buffer+0x16>
	for (uint8_t y = 0; y<8; y++) {
20000b82:	1dfb      	adds	r3, r7, #7
20000b84:	781a      	ldrb	r2, [r3, #0]
20000b86:	1dfb      	adds	r3, r7, #7
20000b88:	3201      	adds	r2, #1
20000b8a:	701a      	strb	r2, [r3, #0]
20000b8c:	1dfb      	adds	r3, r7, #7
20000b8e:	781b      	ldrb	r3, [r3, #0]
20000b90:	2b07      	cmp	r3, #7
20000b92:	d9c2      	bls.n	20000b1a <draw_buffer+0xe>
		}
	}
	for (uint8_t y = 0; y<8; y++) {
20000b94:	1d7b      	adds	r3, r7, #5
20000b96:	2200      	movs	r2, #0
20000b98:	701a      	strb	r2, [r3, #0]
20000b9a:	e03d      	b.n	20000c18 <draw_buffer+0x10c>
		for (uint8_t x = 64; x<128; x++) {
20000b9c:	1d3b      	adds	r3, r7, #4
20000b9e:	2240      	movs	r2, #64	; 0x40
20000ba0:	701a      	strb	r2, [r3, #0]
20000ba2:	e02f      	b.n	20000c04 <draw_buffer+0xf8>
			graphic_write_command(LCD_SET_ADD | x-64, B_CS2);
20000ba4:	1d3b      	adds	r3, r7, #4
20000ba6:	781b      	ldrb	r3, [r3, #0]
20000ba8:	3b40      	subs	r3, #64	; 0x40
20000baa:	b2db      	uxtb	r3, r3
20000bac:	b25b      	sxtb	r3, r3
20000bae:	2240      	movs	r2, #64	; 0x40
20000bb0:	4313      	orrs	r3, r2
20000bb2:	b25b      	sxtb	r3, r3
20000bb4:	b2db      	uxtb	r3, r3
20000bb6:	2110      	movs	r1, #16
20000bb8:	0018      	movs	r0, r3
20000bba:	f7ff fe5d 	bl	20000878 <graphic_write_command>
			graphic_write_command(LCD_SET_PAGE | y, B_CS2);
20000bbe:	1d7b      	adds	r3, r7, #5
20000bc0:	781b      	ldrb	r3, [r3, #0]
20000bc2:	2248      	movs	r2, #72	; 0x48
20000bc4:	4252      	negs	r2, r2
20000bc6:	4313      	orrs	r3, r2
20000bc8:	b2db      	uxtb	r3, r3
20000bca:	2110      	movs	r1, #16
20000bcc:	0018      	movs	r0, r3
20000bce:	f7ff fe53 	bl	20000878 <graphic_write_command>
			graphic_write_data(buffer[y][x], B_CS2);
20000bd2:	1d7b      	adds	r3, r7, #5
20000bd4:	781a      	ldrb	r2, [r3, #0]
20000bd6:	1d3b      	adds	r3, r7, #4
20000bd8:	781b      	ldrb	r3, [r3, #0]
20000bda:	4914      	ldr	r1, [pc, #80]	; (20000c2c <draw_buffer+0x120>)
20000bdc:	01d2      	lsls	r2, r2, #7
20000bde:	188a      	adds	r2, r1, r2
20000be0:	5cd3      	ldrb	r3, [r2, r3]
20000be2:	2110      	movs	r1, #16
20000be4:	0018      	movs	r0, r3
20000be6:	f7ff fe6a 	bl	200008be <graphic_write_data>
			
			graphic_write_command(LCD_ON,           B_CS1 | B_CS2);
20000bea:	2118      	movs	r1, #24
20000bec:	203f      	movs	r0, #63	; 0x3f
20000bee:	f7ff fe43 	bl	20000878 <graphic_write_command>
			graphic_write_command(LCD_DISP_START,   B_CS1 | B_CS2);
20000bf2:	2118      	movs	r1, #24
20000bf4:	20c0      	movs	r0, #192	; 0xc0
20000bf6:	f7ff fe3f 	bl	20000878 <graphic_write_command>
		for (uint8_t x = 64; x<128; x++) {
20000bfa:	1d3b      	adds	r3, r7, #4
20000bfc:	781a      	ldrb	r2, [r3, #0]
20000bfe:	1d3b      	adds	r3, r7, #4
20000c00:	3201      	adds	r2, #1
20000c02:	701a      	strb	r2, [r3, #0]
20000c04:	1d3b      	adds	r3, r7, #4
20000c06:	781b      	ldrb	r3, [r3, #0]
20000c08:	b25b      	sxtb	r3, r3
20000c0a:	2b00      	cmp	r3, #0
20000c0c:	daca      	bge.n	20000ba4 <draw_buffer+0x98>
	for (uint8_t y = 0; y<8; y++) {
20000c0e:	1d7b      	adds	r3, r7, #5
20000c10:	781a      	ldrb	r2, [r3, #0]
20000c12:	1d7b      	adds	r3, r7, #5
20000c14:	3201      	adds	r2, #1
20000c16:	701a      	strb	r2, [r3, #0]
20000c18:	1d7b      	adds	r3, r7, #5
20000c1a:	781b      	ldrb	r3, [r3, #0]
20000c1c:	2b07      	cmp	r3, #7
20000c1e:	d9bd      	bls.n	20000b9c <draw_buffer+0x90>
		}
	}
}
20000c20:	46c0      	nop			; (mov r8, r8)
20000c22:	46c0      	nop			; (mov r8, r8)
20000c24:	46bd      	mov	sp, r7
20000c26:	b002      	add	sp, #8
20000c28:	bd80      	pop	{r7, pc}
20000c2a:	46c0      	nop			; (mov r8, r8)
20000c2c:	20002284 	andcs	r2, r0, r4, lsl #5

20000c30 <init>:


void init() {
20000c30:	b580      	push	{r7, lr}
20000c32:	af00      	add	r7, sp, #0
	#ifdef USBDM
	*((unsigned long *) 0x40023830) = 0x18;
	__asm volatile( " LDR R0,=0x08000209\n BLX R0 \n");
	#endif
    *portModer = 0x55555555; // Set E0-15 to output
20000c34:	4b1e      	ldr	r3, [pc, #120]	; (20000cb0 <init+0x80>)
20000c36:	4a1f      	ldr	r2, [pc, #124]	; (20000cb4 <init+0x84>)
20000c38:	601a      	str	r2, [r3, #0]
	
	*((unsigned long *) 0x40023830) = 0x18;
20000c3a:	4b1f      	ldr	r3, [pc, #124]	; (20000cb8 <init+0x88>)
20000c3c:	2218      	movs	r2, #24
20000c3e:	601a      	str	r2, [r3, #0]
    // GPIO_D 8-15 ska bli keypad
    // Set MODER
    *GPIO_D_MODER &= 0x0000FFFF;
20000c40:	4b1e      	ldr	r3, [pc, #120]	; (20000cbc <init+0x8c>)
20000c42:	681a      	ldr	r2, [r3, #0]
20000c44:	4b1d      	ldr	r3, [pc, #116]	; (20000cbc <init+0x8c>)
20000c46:	0412      	lsls	r2, r2, #16
20000c48:	0c12      	lsrs	r2, r2, #16
20000c4a:	601a      	str	r2, [r3, #0]
    *GPIO_D_MODER |= 0x55000000;
20000c4c:	4b1b      	ldr	r3, [pc, #108]	; (20000cbc <init+0x8c>)
20000c4e:	681a      	ldr	r2, [r3, #0]
20000c50:	4b1a      	ldr	r3, [pc, #104]	; (20000cbc <init+0x8c>)
20000c52:	21aa      	movs	r1, #170	; 0xaa
20000c54:	05c9      	lsls	r1, r1, #23
20000c56:	430a      	orrs	r2, r1
20000c58:	601a      	str	r2, [r3, #0]
    // Set OTYPER
    *GPIO_D_OTYPER &= 0xFFFF00FF;
20000c5a:	4b19      	ldr	r3, [pc, #100]	; (20000cc0 <init+0x90>)
20000c5c:	681a      	ldr	r2, [r3, #0]
20000c5e:	4b18      	ldr	r3, [pc, #96]	; (20000cc0 <init+0x90>)
20000c60:	4918      	ldr	r1, [pc, #96]	; (20000cc4 <init+0x94>)
20000c62:	400a      	ands	r2, r1
20000c64:	601a      	str	r2, [r3, #0]
    *GPIO_D_OTYPER |= 0x00000F00;
20000c66:	4b16      	ldr	r3, [pc, #88]	; (20000cc0 <init+0x90>)
20000c68:	681a      	ldr	r2, [r3, #0]
20000c6a:	4b15      	ldr	r3, [pc, #84]	; (20000cc0 <init+0x90>)
20000c6c:	21f0      	movs	r1, #240	; 0xf0
20000c6e:	0109      	lsls	r1, r1, #4
20000c70:	430a      	orrs	r2, r1
20000c72:	601a      	str	r2, [r3, #0]
    
    // Set PUPDR
    *GPIO_D_PUPDR &= 0x0000FFFF;
20000c74:	4b14      	ldr	r3, [pc, #80]	; (20000cc8 <init+0x98>)
20000c76:	681a      	ldr	r2, [r3, #0]
20000c78:	4b13      	ldr	r3, [pc, #76]	; (20000cc8 <init+0x98>)
20000c7a:	0412      	lsls	r2, r2, #16
20000c7c:	0c12      	lsrs	r2, r2, #16
20000c7e:	601a      	str	r2, [r3, #0]
    *GPIO_D_PUPDR |= 0xFFAA0000;
20000c80:	4b11      	ldr	r3, [pc, #68]	; (20000cc8 <init+0x98>)
20000c82:	681a      	ldr	r2, [r3, #0]
20000c84:	4b10      	ldr	r3, [pc, #64]	; (20000cc8 <init+0x98>)
20000c86:	4911      	ldr	r1, [pc, #68]	; (20000ccc <init+0x9c>)
20000c88:	430a      	orrs	r2, r1
20000c8a:	601a      	str	r2, [r3, #0]
    
    // GPIO_D 0-7 ska bli 7seg
    // Set MODER
    *GPIO_D_MODER &= 0xFFFF0000;
20000c8c:	4b0b      	ldr	r3, [pc, #44]	; (20000cbc <init+0x8c>)
20000c8e:	681a      	ldr	r2, [r3, #0]
20000c90:	4b0a      	ldr	r3, [pc, #40]	; (20000cbc <init+0x8c>)
20000c92:	0c12      	lsrs	r2, r2, #16
20000c94:	0412      	lsls	r2, r2, #16
20000c96:	601a      	str	r2, [r3, #0]
    *GPIO_D_MODER |= 0x00005555;
20000c98:	4b08      	ldr	r3, [pc, #32]	; (20000cbc <init+0x8c>)
20000c9a:	681a      	ldr	r2, [r3, #0]
20000c9c:	4b07      	ldr	r3, [pc, #28]	; (20000cbc <init+0x8c>)
20000c9e:	490c      	ldr	r1, [pc, #48]	; (20000cd0 <init+0xa0>)
20000ca0:	430a      	orrs	r2, r1
20000ca2:	601a      	str	r2, [r3, #0]
	
	
    graphic_initialize();
20000ca4:	f7ff fe43 	bl	2000092e <graphic_initialize>
}
20000ca8:	46c0      	nop			; (mov r8, r8)
20000caa:	46bd      	mov	sp, r7
20000cac:	bd80      	pop	{r7, pc}
20000cae:	46c0      	nop			; (mov r8, r8)
20000cb0:	40021000 	andmi	r1, r2, r0
20000cb4:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000cb8:	40023830 	andmi	r3, r2, r0, lsr r8
20000cbc:	40020c00 	andmi	r0, r2, r0, lsl #24
20000cc0:	40020c04 	andmi	r0, r2, r4, lsl #24
20000cc4:	ffff00ff 			; <UNDEFINED> instruction: 0xffff00ff
20000cc8:	40020c0c 	andmi	r0, r2, ip, lsl #24
20000ccc:	ffaa0000 			; <UNDEFINED> instruction: 0xffaa0000
20000cd0:	00005555 	andeq	r5, r0, r5, asr r5

20000cd4 <keyb>:


unsigned char keyb(void) {
20000cd4:	b590      	push	{r4, r7, lr}
20000cd6:	b087      	sub	sp, #28
20000cd8:	af00      	add	r7, sp, #0
    unsigned char keys[] = {1, 2, 3,10,
20000cda:	003b      	movs	r3, r7
20000cdc:	4a3f      	ldr	r2, [pc, #252]	; (20000ddc <keyb+0x108>)
20000cde:	ca13      	ldmia	r2!, {r0, r1, r4}
20000ce0:	c313      	stmia	r3!, {r0, r1, r4}
20000ce2:	6812      	ldr	r2, [r2, #0]
20000ce4:	601a      	str	r2, [r3, #0]
                            4, 5, 6,11,
                            7, 8, 9,12,
                            14,0,15,13};
    char index = 0xFF;
20000ce6:	2317      	movs	r3, #23
20000ce8:	18fb      	adds	r3, r7, r3
20000cea:	22ff      	movs	r2, #255	; 0xff
20000cec:	701a      	strb	r2, [r3, #0]
    char base = 0x10;
20000cee:	2314      	movs	r3, #20
20000cf0:	18fb      	adds	r3, r7, r3
20000cf2:	2210      	movs	r2, #16
20000cf4:	701a      	strb	r2, [r3, #0]
    for (char row = 0; row<5; row++) {
20000cf6:	2316      	movs	r3, #22
20000cf8:	18fb      	adds	r3, r7, r3
20000cfa:	2200      	movs	r2, #0
20000cfc:	701a      	strb	r2, [r3, #0]
20000cfe:	e054      	b.n	20000daa <keyb+0xd6>
        char outVal = base << row;
20000d00:	2314      	movs	r3, #20
20000d02:	18fb      	adds	r3, r7, r3
20000d04:	781a      	ldrb	r2, [r3, #0]
20000d06:	2316      	movs	r3, #22
20000d08:	18fb      	adds	r3, r7, r3
20000d0a:	781b      	ldrb	r3, [r3, #0]
20000d0c:	409a      	lsls	r2, r3
20000d0e:	2113      	movs	r1, #19
20000d10:	187b      	adds	r3, r7, r1
20000d12:	701a      	strb	r2, [r3, #0]
        *KB_OUT = outVal;
20000d14:	4a32      	ldr	r2, [pc, #200]	; (20000de0 <keyb+0x10c>)
20000d16:	187b      	adds	r3, r7, r1
20000d18:	781b      	ldrb	r3, [r3, #0]
20000d1a:	7013      	strb	r3, [r2, #0]
        char inVal = *KB_IN & 0x0F;
20000d1c:	4b31      	ldr	r3, [pc, #196]	; (20000de4 <keyb+0x110>)
20000d1e:	781b      	ldrb	r3, [r3, #0]
20000d20:	b2da      	uxtb	r2, r3
20000d22:	2012      	movs	r0, #18
20000d24:	183b      	adds	r3, r7, r0
20000d26:	210f      	movs	r1, #15
20000d28:	400a      	ands	r2, r1
20000d2a:	701a      	strb	r2, [r3, #0]
        if (inVal != 0) {
20000d2c:	183b      	adds	r3, r7, r0
20000d2e:	781b      	ldrb	r3, [r3, #0]
20000d30:	2b00      	cmp	r3, #0
20000d32:	d034      	beq.n	20000d9e <keyb+0xca>
            char col;
            if (inVal & 0x01) col = 0;
20000d34:	183b      	adds	r3, r7, r0
20000d36:	781b      	ldrb	r3, [r3, #0]
20000d38:	2201      	movs	r2, #1
20000d3a:	4013      	ands	r3, r2
20000d3c:	d003      	beq.n	20000d46 <keyb+0x72>
20000d3e:	2315      	movs	r3, #21
20000d40:	18fb      	adds	r3, r7, r3
20000d42:	2200      	movs	r2, #0
20000d44:	701a      	strb	r2, [r3, #0]
            if (inVal & 0x02) col = 1;
20000d46:	2312      	movs	r3, #18
20000d48:	18fb      	adds	r3, r7, r3
20000d4a:	781b      	ldrb	r3, [r3, #0]
20000d4c:	2202      	movs	r2, #2
20000d4e:	4013      	ands	r3, r2
20000d50:	d003      	beq.n	20000d5a <keyb+0x86>
20000d52:	2315      	movs	r3, #21
20000d54:	18fb      	adds	r3, r7, r3
20000d56:	2201      	movs	r2, #1
20000d58:	701a      	strb	r2, [r3, #0]
            if (inVal & 0x04) col = 2;
20000d5a:	2312      	movs	r3, #18
20000d5c:	18fb      	adds	r3, r7, r3
20000d5e:	781b      	ldrb	r3, [r3, #0]
20000d60:	2204      	movs	r2, #4
20000d62:	4013      	ands	r3, r2
20000d64:	d003      	beq.n	20000d6e <keyb+0x9a>
20000d66:	2315      	movs	r3, #21
20000d68:	18fb      	adds	r3, r7, r3
20000d6a:	2202      	movs	r2, #2
20000d6c:	701a      	strb	r2, [r3, #0]
            if (inVal & 0x08) col = 3;
20000d6e:	2312      	movs	r3, #18
20000d70:	18fb      	adds	r3, r7, r3
20000d72:	781b      	ldrb	r3, [r3, #0]
20000d74:	2208      	movs	r2, #8
20000d76:	4013      	ands	r3, r2
20000d78:	d003      	beq.n	20000d82 <keyb+0xae>
20000d7a:	2315      	movs	r3, #21
20000d7c:	18fb      	adds	r3, r7, r3
20000d7e:	2203      	movs	r2, #3
20000d80:	701a      	strb	r2, [r3, #0]
            
            index = row*4+col-4;
20000d82:	2316      	movs	r3, #22
20000d84:	18fb      	adds	r3, r7, r3
20000d86:	781b      	ldrb	r3, [r3, #0]
20000d88:	009b      	lsls	r3, r3, #2
20000d8a:	b2da      	uxtb	r2, r3
20000d8c:	2315      	movs	r3, #21
20000d8e:	18fb      	adds	r3, r7, r3
20000d90:	781b      	ldrb	r3, [r3, #0]
20000d92:	18d3      	adds	r3, r2, r3
20000d94:	b2da      	uxtb	r2, r3
20000d96:	2317      	movs	r3, #23
20000d98:	18fb      	adds	r3, r7, r3
20000d9a:	3a04      	subs	r2, #4
20000d9c:	701a      	strb	r2, [r3, #0]
    for (char row = 0; row<5; row++) {
20000d9e:	2116      	movs	r1, #22
20000da0:	187b      	adds	r3, r7, r1
20000da2:	781a      	ldrb	r2, [r3, #0]
20000da4:	187b      	adds	r3, r7, r1
20000da6:	3201      	adds	r2, #1
20000da8:	701a      	strb	r2, [r3, #0]
20000daa:	2316      	movs	r3, #22
20000dac:	18fb      	adds	r3, r7, r3
20000dae:	781b      	ldrb	r3, [r3, #0]
20000db0:	2b04      	cmp	r3, #4
20000db2:	d9a5      	bls.n	20000d00 <keyb+0x2c>
        }
    }
    *KB_OUT = 0;
20000db4:	4b0a      	ldr	r3, [pc, #40]	; (20000de0 <keyb+0x10c>)
20000db6:	2200      	movs	r2, #0
20000db8:	701a      	strb	r2, [r3, #0]
    if (index == 0xFF) {
20000dba:	2317      	movs	r3, #23
20000dbc:	18fb      	adds	r3, r7, r3
20000dbe:	781b      	ldrb	r3, [r3, #0]
20000dc0:	2bff      	cmp	r3, #255	; 0xff
20000dc2:	d101      	bne.n	20000dc8 <keyb+0xf4>
        return 0xFF;
20000dc4:	23ff      	movs	r3, #255	; 0xff
20000dc6:	e004      	b.n	20000dd2 <keyb+0xfe>
    } else {
        return keys[index];
20000dc8:	2317      	movs	r3, #23
20000dca:	18fb      	adds	r3, r7, r3
20000dcc:	781b      	ldrb	r3, [r3, #0]
20000dce:	003a      	movs	r2, r7
20000dd0:	5cd3      	ldrb	r3, [r2, r3]
    }
}
20000dd2:	0018      	movs	r0, r3
20000dd4:	46bd      	mov	sp, r7
20000dd6:	b007      	add	sp, #28
20000dd8:	bd90      	pop	{r4, r7, pc}
20000dda:	46c0      	nop			; (mov r8, r8)
20000ddc:	20002684 	andcs	r2, r0, r4, lsl #13
20000de0:	40020c15 	andmi	r0, r2, r5, lsl ip
20000de4:	40020c11 	andmi	r0, r2, r1, lsl ip

20000de8 <out7seg>:


void out7seg(unsigned char c) {
20000de8:	b5f0      	push	{r4, r5, r6, r7, lr}
20000dea:	b089      	sub	sp, #36	; 0x24
20000dec:	af00      	add	r7, sp, #0
20000dee:	0002      	movs	r2, r0
20000df0:	1dfb      	adds	r3, r7, #7
20000df2:	701a      	strb	r2, [r3, #0]
    char out = 0;
20000df4:	211f      	movs	r1, #31
20000df6:	187b      	adds	r3, r7, r1
20000df8:	2200      	movs	r2, #0
20000dfa:	701a      	strb	r2, [r3, #0]
    if (c<16) {
20000dfc:	1dfb      	adds	r3, r7, #7
20000dfe:	781b      	ldrb	r3, [r3, #0]
20000e00:	2b0f      	cmp	r3, #15
20000e02:	d80c      	bhi.n	20000e1e <out7seg+0x36>
        char segCodes[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71};
20000e04:	200c      	movs	r0, #12
20000e06:	183b      	adds	r3, r7, r0
20000e08:	4a09      	ldr	r2, [pc, #36]	; (20000e30 <out7seg+0x48>)
20000e0a:	ca70      	ldmia	r2!, {r4, r5, r6}
20000e0c:	c370      	stmia	r3!, {r4, r5, r6}
20000e0e:	6812      	ldr	r2, [r2, #0]
20000e10:	601a      	str	r2, [r3, #0]
        out = segCodes[c];
20000e12:	1dfb      	adds	r3, r7, #7
20000e14:	781a      	ldrb	r2, [r3, #0]
20000e16:	187b      	adds	r3, r7, r1
20000e18:	1839      	adds	r1, r7, r0
20000e1a:	5c8a      	ldrb	r2, [r1, r2]
20000e1c:	701a      	strb	r2, [r3, #0]
    }
    *SEG_OUT = out;
20000e1e:	4a05      	ldr	r2, [pc, #20]	; (20000e34 <out7seg+0x4c>)
20000e20:	231f      	movs	r3, #31
20000e22:	18fb      	adds	r3, r7, r3
20000e24:	781b      	ldrb	r3, [r3, #0]
20000e26:	7013      	strb	r3, [r2, #0]
}
20000e28:	46c0      	nop			; (mov r8, r8)
20000e2a:	46bd      	mov	sp, r7
20000e2c:	b009      	add	sp, #36	; 0x24
20000e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
20000e30:	20002694 	mulcs	r0, r4, r6
20000e34:	40020c14 	andmi	r0, r2, r4, lsl ip

20000e38 <__aeabi_dmul>:
20000e38:	e92d4070 	push	{r4, r5, r6, lr}
20000e3c:	e3a0c0ff 	mov	ip, #255	; 0xff
20000e40:	e38ccc07 	orr	ip, ip, #1792	; 0x700
20000e44:	e01c4a21 	ands	r4, ip, r1, lsr #20
20000e48:	101c5a23 	andsne	r5, ip, r3, lsr #20
20000e4c:	1134000c 	teqne	r4, ip
20000e50:	1135000c 	teqne	r5, ip
20000e54:	0b000075 	bleq	20001030 <__aeabi_dmul+0x1f8>
20000e58:	e0844005 	add	r4, r4, r5
20000e5c:	e0216003 	eor	r6, r1, r3
20000e60:	e1c11a8c 	bic	r1, r1, ip, lsl #21
20000e64:	e1c33a8c 	bic	r3, r3, ip, lsl #21
20000e68:	e1905601 	orrs	r5, r0, r1, lsl #12
20000e6c:	11925603 	orrsne	r5, r2, r3, lsl #12
20000e70:	e3811601 	orr	r1, r1, #1048576	; 0x100000
20000e74:	e3833601 	orr	r3, r3, #1048576	; 0x100000
20000e78:	0a00001d 	beq	20000ef4 <__aeabi_dmul+0xbc>
20000e7c:	e08ec290 	umull	ip, lr, r0, r2
20000e80:	e3a05000 	mov	r5, #0
20000e84:	e0a5e291 	umlal	lr, r5, r1, r2
20000e88:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
20000e8c:	e0a5e390 	umlal	lr, r5, r0, r3
20000e90:	e3a06000 	mov	r6, #0
20000e94:	e0a65391 	umlal	r5, r6, r1, r3
20000e98:	e33c0000 	teq	ip, #0
20000e9c:	138ee001 	orrne	lr, lr, #1
20000ea0:	e24440ff 	sub	r4, r4, #255	; 0xff
20000ea4:	e3560c02 	cmp	r6, #512	; 0x200
20000ea8:	e2c44c03 	sbc	r4, r4, #768	; 0x300
20000eac:	2a000002 	bcs	20000ebc <__aeabi_dmul+0x84>
20000eb0:	e1b0e08e 	lsls	lr, lr, #1
20000eb4:	e0b55005 	adcs	r5, r5, r5
20000eb8:	e0a66006 	adc	r6, r6, r6
20000ebc:	e1821586 	orr	r1, r2, r6, lsl #11
20000ec0:	e1811aa5 	orr	r1, r1, r5, lsr #21
20000ec4:	e1a00585 	lsl	r0, r5, #11
20000ec8:	e1800aae 	orr	r0, r0, lr, lsr #21
20000ecc:	e1a0e58e 	lsl	lr, lr, #11
20000ed0:	e254c0fd 	subs	ip, r4, #253	; 0xfd
20000ed4:	835c0c07 	cmphi	ip, #1792	; 0x700
20000ed8:	8a000011 	bhi	20000f24 <__aeabi_dmul+0xec>
20000edc:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
20000ee0:	01b0e0a0 	lsrseq	lr, r0, #1
20000ee4:	e2b00000 	adcs	r0, r0, #0
20000ee8:	e0a11a04 	adc	r1, r1, r4, lsl #20
20000eec:	e8bd4070 	pop	{r4, r5, r6, lr}
20000ef0:	e12fff1e 	bx	lr
20000ef4:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
20000ef8:	e1861001 	orr	r1, r6, r1
20000efc:	e1800002 	orr	r0, r0, r2
20000f00:	e0211003 	eor	r1, r1, r3
20000f04:	e05440ac 	subs	r4, r4, ip, lsr #1
20000f08:	c074500c 	rsbsgt	r5, r4, ip
20000f0c:	c1811a04 	orrgt	r1, r1, r4, lsl #20
20000f10:	c8bd4070 	popgt	{r4, r5, r6, lr}
20000f14:	c12fff1e 	bxgt	lr
20000f18:	e3811601 	orr	r1, r1, #1048576	; 0x100000
20000f1c:	e3a0e000 	mov	lr, #0
20000f20:	e2544001 	subs	r4, r4, #1
20000f24:	ca00005d 	bgt	200010a0 <__aeabi_dmul+0x268>
20000f28:	e3740036 	cmn	r4, #54	; 0x36
20000f2c:	d3a00000 	movle	r0, #0
20000f30:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
20000f34:	d8bd4070 	pople	{r4, r5, r6, lr}
20000f38:	d12fff1e 	bxle	lr
20000f3c:	e2644000 	rsb	r4, r4, #0
20000f40:	e2544020 	subs	r4, r4, #32
20000f44:	aa00001a 	bge	20000fb4 <__aeabi_dmul+0x17c>
20000f48:	e294400c 	adds	r4, r4, #12
20000f4c:	ca00000c 	bgt	20000f84 <__aeabi_dmul+0x14c>
20000f50:	e2844014 	add	r4, r4, #20
20000f54:	e2645020 	rsb	r5, r4, #32
20000f58:	e1a03510 	lsl	r3, r0, r5
20000f5c:	e1a00430 	lsr	r0, r0, r4
20000f60:	e1800511 	orr	r0, r0, r1, lsl r5
20000f64:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
20000f68:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
20000f6c:	e0900fa3 	adds	r0, r0, r3, lsr #31
20000f70:	e0a21431 	adc	r1, r2, r1, lsr r4
20000f74:	e19ee083 	orrs	lr, lr, r3, lsl #1
20000f78:	01c00fa3 	biceq	r0, r0, r3, lsr #31
20000f7c:	e8bd4070 	pop	{r4, r5, r6, lr}
20000f80:	e12fff1e 	bx	lr
20000f84:	e264400c 	rsb	r4, r4, #12
20000f88:	e2645020 	rsb	r5, r4, #32
20000f8c:	e1a03410 	lsl	r3, r0, r4
20000f90:	e1a00530 	lsr	r0, r0, r5
20000f94:	e1800411 	orr	r0, r0, r1, lsl r4
20000f98:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
20000f9c:	e0900fa3 	adds	r0, r0, r3, lsr #31
20000fa0:	e2a11000 	adc	r1, r1, #0
20000fa4:	e19ee083 	orrs	lr, lr, r3, lsl #1
20000fa8:	01c00fa3 	biceq	r0, r0, r3, lsr #31
20000fac:	e8bd4070 	pop	{r4, r5, r6, lr}
20000fb0:	e12fff1e 	bx	lr
20000fb4:	e2645020 	rsb	r5, r4, #32
20000fb8:	e18ee510 	orr	lr, lr, r0, lsl r5
20000fbc:	e1a03430 	lsr	r3, r0, r4
20000fc0:	e1833511 	orr	r3, r3, r1, lsl r5
20000fc4:	e1a00431 	lsr	r0, r1, r4
20000fc8:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
20000fcc:	e1c00431 	bic	r0, r0, r1, lsr r4
20000fd0:	e0800fa3 	add	r0, r0, r3, lsr #31
20000fd4:	e19ee083 	orrs	lr, lr, r3, lsl #1
20000fd8:	01c00fa3 	biceq	r0, r0, r3, lsr #31
20000fdc:	e8bd4070 	pop	{r4, r5, r6, lr}
20000fe0:	e12fff1e 	bx	lr
20000fe4:	e3340000 	teq	r4, #0
20000fe8:	1a000008 	bne	20001010 <__aeabi_dmul+0x1d8>
20000fec:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
20000ff0:	e1b00080 	lsls	r0, r0, #1
20000ff4:	e0a11001 	adc	r1, r1, r1
20000ff8:	e3110601 	tst	r1, #1048576	; 0x100000
20000ffc:	02444001 	subeq	r4, r4, #1
20001000:	0afffffa 	beq	20000ff0 <__aeabi_dmul+0x1b8>
20001004:	e1811006 	orr	r1, r1, r6
20001008:	e3350000 	teq	r5, #0
2000100c:	112fff1e 	bxne	lr
20001010:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
20001014:	e1b02082 	lsls	r2, r2, #1
20001018:	e0a33003 	adc	r3, r3, r3
2000101c:	e3130601 	tst	r3, #1048576	; 0x100000
20001020:	02455001 	subeq	r5, r5, #1
20001024:	0afffffa 	beq	20001014 <__aeabi_dmul+0x1dc>
20001028:	e1833006 	orr	r3, r3, r6
2000102c:	e12fff1e 	bx	lr
20001030:	e134000c 	teq	r4, ip
20001034:	e00c5a23 	and	r5, ip, r3, lsr #20
20001038:	1135000c 	teqne	r5, ip
2000103c:	0a000007 	beq	20001060 <__aeabi_dmul+0x228>
20001040:	e1906081 	orrs	r6, r0, r1, lsl #1
20001044:	11926083 	orrsne	r6, r2, r3, lsl #1
20001048:	1affffe5 	bne	20000fe4 <__aeabi_dmul+0x1ac>
2000104c:	e0211003 	eor	r1, r1, r3
20001050:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
20001054:	e3a00000 	mov	r0, #0
20001058:	e8bd4070 	pop	{r4, r5, r6, lr}
2000105c:	e12fff1e 	bx	lr
20001060:	e1906081 	orrs	r6, r0, r1, lsl #1
20001064:	01a00002 	moveq	r0, r2
20001068:	01a01003 	moveq	r1, r3
2000106c:	11926083 	orrsne	r6, r2, r3, lsl #1
20001070:	0a000010 	beq	200010b8 <__aeabi_dmul+0x280>
20001074:	e134000c 	teq	r4, ip
20001078:	1a000001 	bne	20001084 <__aeabi_dmul+0x24c>
2000107c:	e1906601 	orrs	r6, r0, r1, lsl #12
20001080:	1a00000c 	bne	200010b8 <__aeabi_dmul+0x280>
20001084:	e135000c 	teq	r5, ip
20001088:	1a000003 	bne	2000109c <__aeabi_dmul+0x264>
2000108c:	e1926603 	orrs	r6, r2, r3, lsl #12
20001090:	11a00002 	movne	r0, r2
20001094:	11a01003 	movne	r1, r3
20001098:	1a000006 	bne	200010b8 <__aeabi_dmul+0x280>
2000109c:	e0211003 	eor	r1, r1, r3
200010a0:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
200010a4:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
200010a8:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
200010ac:	e3a00000 	mov	r0, #0
200010b0:	e8bd4070 	pop	{r4, r5, r6, lr}
200010b4:	e12fff1e 	bx	lr
200010b8:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
200010bc:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
200010c0:	e8bd4070 	pop	{r4, r5, r6, lr}
200010c4:	e12fff1e 	bx	lr
200010c8:	e3a0c0ff 	mov	ip, #255	; 0xff
200010cc:	e01c2ba0 	ands	r2, ip, r0, lsr #23
200010d0:	101c3ba1 	andsne	r3, ip, r1, lsr #23
200010d4:	1132000c 	teqne	r2, ip
200010d8:	1133000c 	teqne	r3, ip
200010dc:	0a00003e 	beq	200011dc <__aeabi_dmul+0x3a4>
200010e0:	e0822003 	add	r2, r2, r3
200010e4:	e020c001 	eor	ip, r0, r1
200010e8:	e1b00480 	lsls	r0, r0, #9
200010ec:	11b01481 	lslsne	r1, r1, #9
200010f0:	0a000010 	beq	20001138 <__aeabi_dmul+0x300>
200010f4:	e3a03302 	mov	r3, #134217728	; 0x8000000
200010f8:	e18302a0 	orr	r0, r3, r0, lsr #5
200010fc:	e18312a1 	orr	r1, r3, r1, lsr #5
20001100:	e0813190 	umull	r3, r1, r0, r1
20001104:	e20c0102 	and	r0, ip, #-2147483648	; 0x80000000
20001108:	e3510502 	cmp	r1, #8388608	; 0x800000
2000110c:	31a01081 	lslcc	r1, r1, #1
20001110:	31811fa3 	orrcc	r1, r1, r3, lsr #31
20001114:	31a03083 	lslcc	r3, r3, #1
20001118:	e1800001 	orr	r0, r0, r1
2000111c:	e2c2207f 	sbc	r2, r2, #127	; 0x7f
20001120:	e35200fd 	cmp	r2, #253	; 0xfd
20001124:	8a00000f 	bhi	20001168 <__aeabi_dmul+0x330>
20001128:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
2000112c:	e0a00b82 	adc	r0, r0, r2, lsl #23
20001130:	03c00001 	biceq	r0, r0, #1
20001134:	e12fff1e 	bx	lr
20001138:	e3300000 	teq	r0, #0
2000113c:	e20cc102 	and	ip, ip, #-2147483648	; 0x80000000
20001140:	01a01481 	lsleq	r1, r1, #9
20001144:	e18c04a0 	orr	r0, ip, r0, lsr #9
20001148:	e18004a1 	orr	r0, r0, r1, lsr #9
2000114c:	e252207f 	subs	r2, r2, #127	; 0x7f
20001150:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
20001154:	c1800b82 	orrgt	r0, r0, r2, lsl #23
20001158:	c12fff1e 	bxgt	lr
2000115c:	e3800502 	orr	r0, r0, #8388608	; 0x800000
20001160:	e3a03000 	mov	r3, #0
20001164:	e2522001 	subs	r2, r2, #1
20001168:	ca000035 	bgt	20001244 <__aeabi_dmul+0x40c>
2000116c:	e3720019 	cmn	r2, #25
20001170:	d2000102 	andle	r0, r0, #-2147483648	; 0x80000000
20001174:	d12fff1e 	bxle	lr
20001178:	e2622000 	rsb	r2, r2, #0
2000117c:	e1b01080 	lsls	r1, r0, #1
20001180:	e1a01231 	lsr	r1, r1, r2
20001184:	e2622020 	rsb	r2, r2, #32
20001188:	e1a0c210 	lsl	ip, r0, r2
2000118c:	e1b00061 	rrxs	r0, r1
20001190:	e2a00000 	adc	r0, r0, #0
20001194:	e193308c 	orrs	r3, r3, ip, lsl #1
20001198:	01c00fac 	biceq	r0, r0, ip, lsr #31
2000119c:	e12fff1e 	bx	lr
200011a0:	e3320000 	teq	r2, #0
200011a4:	e200c102 	and	ip, r0, #-2147483648	; 0x80000000
200011a8:	01a00080 	lsleq	r0, r0, #1
200011ac:	03100502 	tsteq	r0, #8388608	; 0x800000
200011b0:	02422001 	subeq	r2, r2, #1
200011b4:	0afffffb 	beq	200011a8 <__aeabi_dmul+0x370>
200011b8:	e180000c 	orr	r0, r0, ip
200011bc:	e3330000 	teq	r3, #0
200011c0:	e201c102 	and	ip, r1, #-2147483648	; 0x80000000
200011c4:	01a01081 	lsleq	r1, r1, #1
200011c8:	03110502 	tsteq	r1, #8388608	; 0x800000
200011cc:	02433001 	subeq	r3, r3, #1
200011d0:	0afffffb 	beq	200011c4 <__aeabi_dmul+0x38c>
200011d4:	e181100c 	orr	r1, r1, ip
200011d8:	eaffffc0 	b	200010e0 <__aeabi_dmul+0x2a8>
200011dc:	e00c3ba1 	and	r3, ip, r1, lsr #23
200011e0:	e132000c 	teq	r2, ip
200011e4:	1133000c 	teqne	r3, ip
200011e8:	0a000005 	beq	20001204 <__aeabi_dmul+0x3cc>
200011ec:	e3d0c102 	bics	ip, r0, #-2147483648	; 0x80000000
200011f0:	13d1c102 	bicsne	ip, r1, #-2147483648	; 0x80000000
200011f4:	1affffe9 	bne	200011a0 <__aeabi_dmul+0x368>
200011f8:	e0200001 	eor	r0, r0, r1
200011fc:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
20001200:	e12fff1e 	bx	lr
20001204:	e3300000 	teq	r0, #0
20001208:	13300102 	teqne	r0, #-2147483648	; 0x80000000
2000120c:	01a00001 	moveq	r0, r1
20001210:	13310000 	teqne	r1, #0
20001214:	13310102 	teqne	r1, #-2147483648	; 0x80000000
20001218:	0a00000d 	beq	20001254 <__aeabi_dmul+0x41c>
2000121c:	e132000c 	teq	r2, ip
20001220:	1a000001 	bne	2000122c <__aeabi_dmul+0x3f4>
20001224:	e1b02480 	lsls	r2, r0, #9
20001228:	1a000009 	bne	20001254 <__aeabi_dmul+0x41c>
2000122c:	e133000c 	teq	r3, ip
20001230:	1a000002 	bne	20001240 <__aeabi_dmul+0x408>
20001234:	e1b03481 	lsls	r3, r1, #9
20001238:	11a00001 	movne	r0, r1
2000123c:	1a000004 	bne	20001254 <__aeabi_dmul+0x41c>
20001240:	e0200001 	eor	r0, r0, r1
20001244:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
20001248:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
2000124c:	e3800502 	orr	r0, r0, #8388608	; 0x800000
20001250:	e12fff1e 	bx	lr
20001254:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
20001258:	e3800503 	orr	r0, r0, #12582912	; 0xc00000
2000125c:	e12fff1e 	bx	lr

20001260 <__aeabi_drsub>:
20001260:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
20001264:	ea000000 	b	2000126c <__adddf3>

20001268 <__aeabi_dsub>:
20001268:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

2000126c <__adddf3>:
2000126c:	e92d4030 	push	{r4, r5, lr}
20001270:	e1a04081 	lsl	r4, r1, #1
20001274:	e1a05083 	lsl	r5, r3, #1
20001278:	e1340005 	teq	r4, r5
2000127c:	01300002 	teqeq	r0, r2
20001280:	1194c000 	orrsne	ip, r4, r0
20001284:	1195c002 	orrsne	ip, r5, r2
20001288:	11f0cac4 	mvnsne	ip, r4, asr #21
2000128c:	11f0cac5 	mvnsne	ip, r5, asr #21
20001290:	0a00008c 	beq	200014c8 <__adddf3+0x25c>
20001294:	e1a04aa4 	lsr	r4, r4, #21
20001298:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
2000129c:	b2655000 	rsblt	r5, r5, #0
200012a0:	da000006 	ble	200012c0 <__adddf3+0x54>
200012a4:	e0844005 	add	r4, r4, r5
200012a8:	e0202002 	eor	r2, r0, r2
200012ac:	e0213003 	eor	r3, r1, r3
200012b0:	e0220000 	eor	r0, r2, r0
200012b4:	e0231001 	eor	r1, r3, r1
200012b8:	e0202002 	eor	r2, r0, r2
200012bc:	e0213003 	eor	r3, r1, r3
200012c0:	e3550036 	cmp	r5, #54	; 0x36
200012c4:	88bd4030 	pophi	{r4, r5, lr}
200012c8:	812fff1e 	bxhi	lr
200012cc:	e3110102 	tst	r1, #-2147483648	; 0x80000000
200012d0:	e1a01601 	lsl	r1, r1, #12
200012d4:	e3a0c601 	mov	ip, #1048576	; 0x100000
200012d8:	e18c1621 	orr	r1, ip, r1, lsr #12
200012dc:	0a000001 	beq	200012e8 <__adddf3+0x7c>
200012e0:	e2700000 	rsbs	r0, r0, #0
200012e4:	e2e11000 	rsc	r1, r1, #0
200012e8:	e3130102 	tst	r3, #-2147483648	; 0x80000000
200012ec:	e1a03603 	lsl	r3, r3, #12
200012f0:	e18c3623 	orr	r3, ip, r3, lsr #12
200012f4:	0a000001 	beq	20001300 <__adddf3+0x94>
200012f8:	e2722000 	rsbs	r2, r2, #0
200012fc:	e2e33000 	rsc	r3, r3, #0
20001300:	e1340005 	teq	r4, r5
20001304:	0a000069 	beq	200014b0 <__adddf3+0x244>
20001308:	e2444001 	sub	r4, r4, #1
2000130c:	e275e020 	rsbs	lr, r5, #32
20001310:	ba000005 	blt	2000132c <__adddf3+0xc0>
20001314:	e1a0ce12 	lsl	ip, r2, lr
20001318:	e0900532 	adds	r0, r0, r2, lsr r5
2000131c:	e2a11000 	adc	r1, r1, #0
20001320:	e0900e13 	adds	r0, r0, r3, lsl lr
20001324:	e0b11553 	adcs	r1, r1, r3, asr r5
20001328:	ea000006 	b	20001348 <__adddf3+0xdc>
2000132c:	e2455020 	sub	r5, r5, #32
20001330:	e28ee020 	add	lr, lr, #32
20001334:	e3520001 	cmp	r2, #1
20001338:	e1a0ce13 	lsl	ip, r3, lr
2000133c:	238cc002 	orrcs	ip, ip, #2
20001340:	e0900553 	adds	r0, r0, r3, asr r5
20001344:	e0b11fc3 	adcs	r1, r1, r3, asr #31
20001348:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
2000134c:	5a000002 	bpl	2000135c <__adddf3+0xf0>
20001350:	e27cc000 	rsbs	ip, ip, #0
20001354:	e2f00000 	rscs	r0, r0, #0
20001358:	e2e11000 	rsc	r1, r1, #0
2000135c:	e3510601 	cmp	r1, #1048576	; 0x100000
20001360:	3a00000f 	bcc	200013a4 <__adddf3+0x138>
20001364:	e3510602 	cmp	r1, #2097152	; 0x200000
20001368:	3a000006 	bcc	20001388 <__adddf3+0x11c>
2000136c:	e1b010a1 	lsrs	r1, r1, #1
20001370:	e1b00060 	rrxs	r0, r0
20001374:	e1a0c06c 	rrx	ip, ip
20001378:	e2844001 	add	r4, r4, #1
2000137c:	e1a02a84 	lsl	r2, r4, #21
20001380:	e3720501 	cmn	r2, #4194304	; 0x400000
20001384:	2a00006b 	bcs	20001538 <__adddf3+0x2cc>
20001388:	e35c0102 	cmp	ip, #-2147483648	; 0x80000000
2000138c:	01b0c0a0 	lsrseq	ip, r0, #1
20001390:	e2b00000 	adcs	r0, r0, #0
20001394:	e0a11a04 	adc	r1, r1, r4, lsl #20
20001398:	e1811005 	orr	r1, r1, r5
2000139c:	e8bd4030 	pop	{r4, r5, lr}
200013a0:	e12fff1e 	bx	lr
200013a4:	e1b0c08c 	lsls	ip, ip, #1
200013a8:	e0b00000 	adcs	r0, r0, r0
200013ac:	e0a11001 	adc	r1, r1, r1
200013b0:	e2544001 	subs	r4, r4, #1
200013b4:	23510601 	cmpcs	r1, #1048576	; 0x100000
200013b8:	2afffff2 	bcs	20001388 <__adddf3+0x11c>
200013bc:	e3310000 	teq	r1, #0
200013c0:	13a03014 	movne	r3, #20
200013c4:	03a03034 	moveq	r3, #52	; 0x34
200013c8:	01a01000 	moveq	r1, r0
200013cc:	03a00000 	moveq	r0, #0
200013d0:	e1a02001 	mov	r2, r1
200013d4:	e3520801 	cmp	r2, #65536	; 0x10000
200013d8:	21a02822 	lsrcs	r2, r2, #16
200013dc:	22433010 	subcs	r3, r3, #16
200013e0:	e3520c01 	cmp	r2, #256	; 0x100
200013e4:	21a02422 	lsrcs	r2, r2, #8
200013e8:	22433008 	subcs	r3, r3, #8
200013ec:	e3520010 	cmp	r2, #16
200013f0:	21a02222 	lsrcs	r2, r2, #4
200013f4:	22433004 	subcs	r3, r3, #4
200013f8:	e3520004 	cmp	r2, #4
200013fc:	22433002 	subcs	r3, r3, #2
20001400:	304330a2 	subcc	r3, r3, r2, lsr #1
20001404:	e04331a2 	sub	r3, r3, r2, lsr #3
20001408:	e2532020 	subs	r2, r3, #32
2000140c:	aa000007 	bge	20001430 <__adddf3+0x1c4>
20001410:	e292200c 	adds	r2, r2, #12
20001414:	da000004 	ble	2000142c <__adddf3+0x1c0>
20001418:	e282c014 	add	ip, r2, #20
2000141c:	e262200c 	rsb	r2, r2, #12
20001420:	e1a00c11 	lsl	r0, r1, ip
20001424:	e1a01231 	lsr	r1, r1, r2
20001428:	ea000004 	b	20001440 <__adddf3+0x1d4>
2000142c:	e2822014 	add	r2, r2, #20
20001430:	d262c020 	rsble	ip, r2, #32
20001434:	e1a01211 	lsl	r1, r1, r2
20001438:	d1811c30 	orrle	r1, r1, r0, lsr ip
2000143c:	d1a00210 	lslle	r0, r0, r2
20001440:	e0544003 	subs	r4, r4, r3
20001444:	a0811a04 	addge	r1, r1, r4, lsl #20
20001448:	a1811005 	orrge	r1, r1, r5
2000144c:	a8bd4030 	popge	{r4, r5, lr}
20001450:	a12fff1e 	bxge	lr
20001454:	e1e04004 	mvn	r4, r4
20001458:	e254401f 	subs	r4, r4, #31
2000145c:	aa00000f 	bge	200014a0 <__adddf3+0x234>
20001460:	e294400c 	adds	r4, r4, #12
20001464:	ca000006 	bgt	20001484 <__adddf3+0x218>
20001468:	e2844014 	add	r4, r4, #20
2000146c:	e2642020 	rsb	r2, r4, #32
20001470:	e1a00430 	lsr	r0, r0, r4
20001474:	e1800211 	orr	r0, r0, r1, lsl r2
20001478:	e1851431 	orr	r1, r5, r1, lsr r4
2000147c:	e8bd4030 	pop	{r4, r5, lr}
20001480:	e12fff1e 	bx	lr
20001484:	e264400c 	rsb	r4, r4, #12
20001488:	e2642020 	rsb	r2, r4, #32
2000148c:	e1a00230 	lsr	r0, r0, r2
20001490:	e1800411 	orr	r0, r0, r1, lsl r4
20001494:	e1a01005 	mov	r1, r5
20001498:	e8bd4030 	pop	{r4, r5, lr}
2000149c:	e12fff1e 	bx	lr
200014a0:	e1a00431 	lsr	r0, r1, r4
200014a4:	e1a01005 	mov	r1, r5
200014a8:	e8bd4030 	pop	{r4, r5, lr}
200014ac:	e12fff1e 	bx	lr
200014b0:	e3340000 	teq	r4, #0
200014b4:	e2233601 	eor	r3, r3, #1048576	; 0x100000
200014b8:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
200014bc:	02844001 	addeq	r4, r4, #1
200014c0:	12455001 	subne	r5, r5, #1
200014c4:	eaffff8f 	b	20001308 <__adddf3+0x9c>
200014c8:	e1f0cac4 	mvns	ip, r4, asr #21
200014cc:	11f0cac5 	mvnsne	ip, r5, asr #21
200014d0:	0a00001d 	beq	2000154c <__adddf3+0x2e0>
200014d4:	e1340005 	teq	r4, r5
200014d8:	01300002 	teqeq	r0, r2
200014dc:	0a000004 	beq	200014f4 <__adddf3+0x288>
200014e0:	e194c000 	orrs	ip, r4, r0
200014e4:	01a01003 	moveq	r1, r3
200014e8:	01a00002 	moveq	r0, r2
200014ec:	e8bd4030 	pop	{r4, r5, lr}
200014f0:	e12fff1e 	bx	lr
200014f4:	e1310003 	teq	r1, r3
200014f8:	13a01000 	movne	r1, #0
200014fc:	13a00000 	movne	r0, #0
20001500:	18bd4030 	popne	{r4, r5, lr}
20001504:	112fff1e 	bxne	lr
20001508:	e1b0caa4 	lsrs	ip, r4, #21
2000150c:	1a000004 	bne	20001524 <__adddf3+0x2b8>
20001510:	e1b00080 	lsls	r0, r0, #1
20001514:	e0b11001 	adcs	r1, r1, r1
20001518:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
2000151c:	e8bd4030 	pop	{r4, r5, lr}
20001520:	e12fff1e 	bx	lr
20001524:	e2944501 	adds	r4, r4, #4194304	; 0x400000
20001528:	32811601 	addcc	r1, r1, #1048576	; 0x100000
2000152c:	38bd4030 	popcc	{r4, r5, lr}
20001530:	312fff1e 	bxcc	lr
20001534:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
20001538:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
2000153c:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
20001540:	e3a00000 	mov	r0, #0
20001544:	e8bd4030 	pop	{r4, r5, lr}
20001548:	e12fff1e 	bx	lr
2000154c:	e1f0cac4 	mvns	ip, r4, asr #21
20001550:	11a01003 	movne	r1, r3
20001554:	11a00002 	movne	r0, r2
20001558:	01f0cac5 	mvnseq	ip, r5, asr #21
2000155c:	11a03001 	movne	r3, r1
20001560:	11a02000 	movne	r2, r0
20001564:	e1904601 	orrs	r4, r0, r1, lsl #12
20001568:	01925603 	orrseq	r5, r2, r3, lsl #12
2000156c:	01310003 	teqeq	r1, r3
20001570:	13811702 	orrne	r1, r1, #524288	; 0x80000
20001574:	e8bd4030 	pop	{r4, r5, lr}
20001578:	e12fff1e 	bx	lr

2000157c <__aeabi_ui2d>:
2000157c:	e3300000 	teq	r0, #0
20001580:	03a01000 	moveq	r1, #0
20001584:	012fff1e 	bxeq	lr
20001588:	e92d4030 	push	{r4, r5, lr}
2000158c:	e3a04b01 	mov	r4, #1024	; 0x400
20001590:	e2844032 	add	r4, r4, #50	; 0x32
20001594:	e3a05000 	mov	r5, #0
20001598:	e3a01000 	mov	r1, #0
2000159c:	eaffff86 	b	200013bc <__adddf3+0x150>

200015a0 <__aeabi_i2d>:
200015a0:	e3300000 	teq	r0, #0
200015a4:	03a01000 	moveq	r1, #0
200015a8:	012fff1e 	bxeq	lr
200015ac:	e92d4030 	push	{r4, r5, lr}
200015b0:	e3a04b01 	mov	r4, #1024	; 0x400
200015b4:	e2844032 	add	r4, r4, #50	; 0x32
200015b8:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
200015bc:	42600000 	rsbmi	r0, r0, #0
200015c0:	e3a01000 	mov	r1, #0
200015c4:	eaffff7c 	b	200013bc <__adddf3+0x150>

200015c8 <__aeabi_f2d>:
200015c8:	e1b02080 	lsls	r2, r0, #1
200015cc:	e1a011c2 	asr	r1, r2, #3
200015d0:	e1a01061 	rrx	r1, r1
200015d4:	e1a00e02 	lsl	r0, r2, #28
200015d8:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
200015dc:	133304ff 	teqne	r3, #-16777216	; 0xff000000
200015e0:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
200015e4:	112fff1e 	bxne	lr
200015e8:	e3d224ff 	bics	r2, r2, #-16777216	; 0xff000000
200015ec:	012fff1e 	bxeq	lr
200015f0:	e33304ff 	teq	r3, #-16777216	; 0xff000000
200015f4:	03811702 	orreq	r1, r1, #524288	; 0x80000
200015f8:	012fff1e 	bxeq	lr
200015fc:	e92d4030 	push	{r4, r5, lr}
20001600:	e3a04d0e 	mov	r4, #896	; 0x380
20001604:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
20001608:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
2000160c:	eaffff6a 	b	200013bc <__adddf3+0x150>

20001610 <__aeabi_ul2d>:
20001610:	e1902001 	orrs	r2, r0, r1
20001614:	012fff1e 	bxeq	lr
20001618:	e92d4030 	push	{r4, r5, lr}
2000161c:	e3a05000 	mov	r5, #0
20001620:	ea000006 	b	20001640 <__aeabi_l2d+0x1c>

20001624 <__aeabi_l2d>:
20001624:	e1902001 	orrs	r2, r0, r1
20001628:	012fff1e 	bxeq	lr
2000162c:	e92d4030 	push	{r4, r5, lr}
20001630:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
20001634:	5a000001 	bpl	20001640 <__aeabi_l2d+0x1c>
20001638:	e2700000 	rsbs	r0, r0, #0
2000163c:	e2e11000 	rsc	r1, r1, #0
20001640:	e3a04b01 	mov	r4, #1024	; 0x400
20001644:	e2844032 	add	r4, r4, #50	; 0x32
20001648:	e1b0cb21 	lsrs	ip, r1, #22
2000164c:	0affff42 	beq	2000135c <__adddf3+0xf0>
20001650:	e3a02003 	mov	r2, #3
20001654:	e1b0c1ac 	lsrs	ip, ip, #3
20001658:	12822003 	addne	r2, r2, #3
2000165c:	e1b0c1ac 	lsrs	ip, ip, #3
20001660:	12822003 	addne	r2, r2, #3
20001664:	e08221ac 	add	r2, r2, ip, lsr #3
20001668:	e2623020 	rsb	r3, r2, #32
2000166c:	e1a0c310 	lsl	ip, r0, r3
20001670:	e1a00230 	lsr	r0, r0, r2
20001674:	e1800311 	orr	r0, r0, r1, lsl r3
20001678:	e1a01231 	lsr	r1, r1, r2
2000167c:	e0844002 	add	r4, r4, r2
20001680:	eaffff35 	b	2000135c <__adddf3+0xf0>

20001684 <__aeabi_d2f>:
20001684:	e1a02081 	lsl	r2, r1, #1
20001688:	e2523207 	subs	r3, r2, #1879048192	; 0x70000000
2000168c:	2253c602 	subscs	ip, r3, #2097152	; 0x200000
20001690:	227cc57f 	rsbscs	ip, ip, #532676608	; 0x1fc00000
20001694:	9a000006 	bls	200016b4 <__aeabi_d2f+0x30>
20001698:	e201c102 	and	ip, r1, #-2147483648	; 0x80000000
2000169c:	e1a02180 	lsl	r2, r0, #3
200016a0:	e18c0ea0 	orr	r0, ip, r0, lsr #29
200016a4:	e3520102 	cmp	r2, #-2147483648	; 0x80000000
200016a8:	e0a00103 	adc	r0, r0, r3, lsl #2
200016ac:	03c00001 	biceq	r0, r0, #1
200016b0:	e12fff1e 	bx	lr
200016b4:	e3110101 	tst	r1, #1073741824	; 0x40000000
200016b8:	1a00000f 	bne	200016fc <__aeabi_d2f+0x78>
200016bc:	e293262e 	adds	r2, r3, #48234496	; 0x2e00000
200016c0:	b2010102 	andlt	r0, r1, #-2147483648	; 0x80000000
200016c4:	b12fff1e 	bxlt	lr
200016c8:	e3811601 	orr	r1, r1, #1048576	; 0x100000
200016cc:	e1a02aa2 	lsr	r2, r2, #21
200016d0:	e2622018 	rsb	r2, r2, #24
200016d4:	e262c020 	rsb	ip, r2, #32
200016d8:	e1b03c10 	lsls	r3, r0, ip
200016dc:	e1a00230 	lsr	r0, r0, r2
200016e0:	13800001 	orrne	r0, r0, #1
200016e4:	e1a03581 	lsl	r3, r1, #11
200016e8:	e1a035a3 	lsr	r3, r3, #11
200016ec:	e1800c13 	orr	r0, r0, r3, lsl ip
200016f0:	e1a03233 	lsr	r3, r3, r2
200016f4:	e1a03083 	lsl	r3, r3, #1
200016f8:	eaffffe6 	b	20001698 <__aeabi_d2f+0x14>
200016fc:	e1f03ac2 	mvns	r3, r2, asr #21
20001700:	1a000003 	bne	20001714 <__aeabi_d2f+0x90>
20001704:	e1903601 	orrs	r3, r0, r1, lsl #12
20001708:	13a0047f 	movne	r0, #2130706432	; 0x7f000000
2000170c:	13800503 	orrne	r0, r0, #12582912	; 0xc00000
20001710:	112fff1e 	bxne	lr
20001714:	e2010102 	and	r0, r1, #-2147483648	; 0x80000000
20001718:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
2000171c:	e3800502 	orr	r0, r0, #8388608	; 0x800000
20001720:	e12fff1e 	bx	lr

20001724 <__aeabi_frsub>:
20001724:	e2200102 	eor	r0, r0, #-2147483648	; 0x80000000
20001728:	ea000000 	b	20001730 <__addsf3>

2000172c <__aeabi_fsub>:
2000172c:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000

20001730 <__addsf3>:
20001730:	e1b02080 	lsls	r2, r0, #1
20001734:	11b03081 	lslsne	r3, r1, #1
20001738:	11320003 	teqne	r2, r3
2000173c:	11f0cc42 	mvnsne	ip, r2, asr #24
20001740:	11f0cc43 	mvnsne	ip, r3, asr #24
20001744:	0a000047 	beq	20001868 <__addsf3+0x138>
20001748:	e1a02c22 	lsr	r2, r2, #24
2000174c:	e0723c23 	rsbs	r3, r2, r3, lsr #24
20001750:	c0822003 	addgt	r2, r2, r3
20001754:	c0201001 	eorgt	r1, r0, r1
20001758:	c0210000 	eorgt	r0, r1, r0
2000175c:	c0201001 	eorgt	r1, r0, r1
20001760:	b2633000 	rsblt	r3, r3, #0
20001764:	e3530019 	cmp	r3, #25
20001768:	812fff1e 	bxhi	lr
2000176c:	e3100102 	tst	r0, #-2147483648	; 0x80000000
20001770:	e3800502 	orr	r0, r0, #8388608	; 0x800000
20001774:	e3c004ff 	bic	r0, r0, #-16777216	; 0xff000000
20001778:	12600000 	rsbne	r0, r0, #0
2000177c:	e3110102 	tst	r1, #-2147483648	; 0x80000000
20001780:	e3811502 	orr	r1, r1, #8388608	; 0x800000
20001784:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
20001788:	12611000 	rsbne	r1, r1, #0
2000178c:	e1320003 	teq	r2, r3
20001790:	0a00002e 	beq	20001850 <__addsf3+0x120>
20001794:	e2422001 	sub	r2, r2, #1
20001798:	e0900351 	adds	r0, r0, r1, asr r3
2000179c:	e2633020 	rsb	r3, r3, #32
200017a0:	e1a01311 	lsl	r1, r1, r3
200017a4:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
200017a8:	5a000001 	bpl	200017b4 <__addsf3+0x84>
200017ac:	e2711000 	rsbs	r1, r1, #0
200017b0:	e2e00000 	rsc	r0, r0, #0
200017b4:	e3500502 	cmp	r0, #8388608	; 0x800000
200017b8:	3a00000b 	bcc	200017ec <__addsf3+0xbc>
200017bc:	e3500401 	cmp	r0, #16777216	; 0x1000000
200017c0:	3a000004 	bcc	200017d8 <__addsf3+0xa8>
200017c4:	e1b000a0 	lsrs	r0, r0, #1
200017c8:	e1a01061 	rrx	r1, r1
200017cc:	e2822001 	add	r2, r2, #1
200017d0:	e35200fe 	cmp	r2, #254	; 0xfe
200017d4:	2a000038 	bcs	200018bc <__addsf3+0x18c>
200017d8:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
200017dc:	e0a00b82 	adc	r0, r0, r2, lsl #23
200017e0:	03c00001 	biceq	r0, r0, #1
200017e4:	e1800003 	orr	r0, r0, r3
200017e8:	e12fff1e 	bx	lr
200017ec:	e1b01081 	lsls	r1, r1, #1
200017f0:	e0a00000 	adc	r0, r0, r0
200017f4:	e2522001 	subs	r2, r2, #1
200017f8:	23500502 	cmpcs	r0, #8388608	; 0x800000
200017fc:	2afffff5 	bcs	200017d8 <__addsf3+0xa8>
20001800:	e1b0c620 	lsrs	ip, r0, #12
20001804:	01a00600 	lsleq	r0, r0, #12
20001808:	0242200c 	subeq	r2, r2, #12
2000180c:	e31008ff 	tst	r0, #16711680	; 0xff0000
20001810:	01a00400 	lsleq	r0, r0, #8
20001814:	02422008 	subeq	r2, r2, #8
20001818:	e310060f 	tst	r0, #15728640	; 0xf00000
2000181c:	01a00200 	lsleq	r0, r0, #4
20001820:	02422004 	subeq	r2, r2, #4
20001824:	e3100503 	tst	r0, #12582912	; 0xc00000
20001828:	01a00100 	lsleq	r0, r0, #2
2000182c:	02422002 	subeq	r2, r2, #2
20001830:	e3500502 	cmp	r0, #8388608	; 0x800000
20001834:	31a00080 	lslcc	r0, r0, #1
20001838:	e2d22000 	sbcs	r2, r2, #0
2000183c:	a0800b82 	addge	r0, r0, r2, lsl #23
20001840:	b2622000 	rsblt	r2, r2, #0
20001844:	a1800003 	orrge	r0, r0, r3
20001848:	b1830230 	orrlt	r0, r3, r0, lsr r2
2000184c:	e12fff1e 	bx	lr
20001850:	e3320000 	teq	r2, #0
20001854:	e2211502 	eor	r1, r1, #8388608	; 0x800000
20001858:	02200502 	eoreq	r0, r0, #8388608	; 0x800000
2000185c:	02822001 	addeq	r2, r2, #1
20001860:	12433001 	subne	r3, r3, #1
20001864:	eaffffca 	b	20001794 <__addsf3+0x64>
20001868:	e1a03081 	lsl	r3, r1, #1
2000186c:	e1f0cc42 	mvns	ip, r2, asr #24
20001870:	11f0cc43 	mvnsne	ip, r3, asr #24
20001874:	0a000013 	beq	200018c8 <__addsf3+0x198>
20001878:	e1320003 	teq	r2, r3
2000187c:	0a000002 	beq	2000188c <__addsf3+0x15c>
20001880:	e3320000 	teq	r2, #0
20001884:	01a00001 	moveq	r0, r1
20001888:	e12fff1e 	bx	lr
2000188c:	e1300001 	teq	r0, r1
20001890:	13a00000 	movne	r0, #0
20001894:	112fff1e 	bxne	lr
20001898:	e31204ff 	tst	r2, #-16777216	; 0xff000000
2000189c:	1a000002 	bne	200018ac <__addsf3+0x17c>
200018a0:	e1b00080 	lsls	r0, r0, #1
200018a4:	23800102 	orrcs	r0, r0, #-2147483648	; 0x80000000
200018a8:	e12fff1e 	bx	lr
200018ac:	e2922402 	adds	r2, r2, #33554432	; 0x2000000
200018b0:	32800502 	addcc	r0, r0, #8388608	; 0x800000
200018b4:	312fff1e 	bxcc	lr
200018b8:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
200018bc:	e383047f 	orr	r0, r3, #2130706432	; 0x7f000000
200018c0:	e3800502 	orr	r0, r0, #8388608	; 0x800000
200018c4:	e12fff1e 	bx	lr
200018c8:	e1f02c42 	mvns	r2, r2, asr #24
200018cc:	11a00001 	movne	r0, r1
200018d0:	01f03c43 	mvnseq	r3, r3, asr #24
200018d4:	11a01000 	movne	r1, r0
200018d8:	e1b02480 	lsls	r2, r0, #9
200018dc:	01b03481 	lslseq	r3, r1, #9
200018e0:	01300001 	teqeq	r0, r1
200018e4:	13800501 	orrne	r0, r0, #4194304	; 0x400000
200018e8:	e12fff1e 	bx	lr

200018ec <__aeabi_ui2f>:
200018ec:	e3a03000 	mov	r3, #0
200018f0:	ea000001 	b	200018fc <__aeabi_i2f+0x8>

200018f4 <__aeabi_i2f>:
200018f4:	e2103102 	ands	r3, r0, #-2147483648	; 0x80000000
200018f8:	42600000 	rsbmi	r0, r0, #0
200018fc:	e1b0c000 	movs	ip, r0
20001900:	012fff1e 	bxeq	lr
20001904:	e383344b 	orr	r3, r3, #1258291200	; 0x4b000000
20001908:	e1a01000 	mov	r1, r0
2000190c:	e3a00000 	mov	r0, #0
20001910:	ea00000f 	b	20001954 <__aeabi_l2f+0x30>

20001914 <__aeabi_ul2f>:
20001914:	e1902001 	orrs	r2, r0, r1
20001918:	012fff1e 	bxeq	lr
2000191c:	e3a03000 	mov	r3, #0
20001920:	ea000005 	b	2000193c <__aeabi_l2f+0x18>

20001924 <__aeabi_l2f>:
20001924:	e1902001 	orrs	r2, r0, r1
20001928:	012fff1e 	bxeq	lr
2000192c:	e2113102 	ands	r3, r1, #-2147483648	; 0x80000000
20001930:	5a000001 	bpl	2000193c <__aeabi_l2f+0x18>
20001934:	e2700000 	rsbs	r0, r0, #0
20001938:	e2e11000 	rsc	r1, r1, #0
2000193c:	e1b0c001 	movs	ip, r1
20001940:	01a0c000 	moveq	ip, r0
20001944:	01a01000 	moveq	r1, r0
20001948:	03a00000 	moveq	r0, #0
2000194c:	e383345b 	orr	r3, r3, #1526726656	; 0x5b000000
20001950:	02433201 	subeq	r3, r3, #268435456	; 0x10000000
20001954:	e2433502 	sub	r3, r3, #8388608	; 0x800000
20001958:	e3a02017 	mov	r2, #23
2000195c:	e35c0801 	cmp	ip, #65536	; 0x10000
20001960:	21a0c82c 	lsrcs	ip, ip, #16
20001964:	22422010 	subcs	r2, r2, #16
20001968:	e35c0c01 	cmp	ip, #256	; 0x100
2000196c:	21a0c42c 	lsrcs	ip, ip, #8
20001970:	22422008 	subcs	r2, r2, #8
20001974:	e35c0010 	cmp	ip, #16
20001978:	21a0c22c 	lsrcs	ip, ip, #4
2000197c:	22422004 	subcs	r2, r2, #4
20001980:	e35c0004 	cmp	ip, #4
20001984:	22422002 	subcs	r2, r2, #2
20001988:	304220ac 	subcc	r2, r2, ip, lsr #1
2000198c:	e05221ac 	subs	r2, r2, ip, lsr #3
20001990:	e0433b82 	sub	r3, r3, r2, lsl #23
20001994:	ba000006 	blt	200019b4 <__aeabi_l2f+0x90>
20001998:	e0833211 	add	r3, r3, r1, lsl r2
2000199c:	e1a0c210 	lsl	ip, r0, r2
200019a0:	e2622020 	rsb	r2, r2, #32
200019a4:	e35c0102 	cmp	ip, #-2147483648	; 0x80000000
200019a8:	e0a30230 	adc	r0, r3, r0, lsr r2
200019ac:	03c00001 	biceq	r0, r0, #1
200019b0:	e12fff1e 	bx	lr
200019b4:	e2822020 	add	r2, r2, #32
200019b8:	e1a0c211 	lsl	ip, r1, r2
200019bc:	e2622020 	rsb	r2, r2, #32
200019c0:	e190008c 	orrs	r0, r0, ip, lsl #1
200019c4:	e0a30231 	adc	r0, r3, r1, lsr r2
200019c8:	01c00fac 	biceq	r0, r0, ip, lsr #31
200019cc:	e12fff1e 	bx	lr

200019d0 <__aeabi_fmul>:
200019d0:	e3a0c0ff 	mov	ip, #255	; 0xff
200019d4:	e01c2ba0 	ands	r2, ip, r0, lsr #23
200019d8:	101c3ba1 	andsne	r3, ip, r1, lsr #23
200019dc:	1132000c 	teqne	r2, ip
200019e0:	1133000c 	teqne	r3, ip
200019e4:	0a00003e 	beq	20001ae4 <__aeabi_fmul+0x114>
200019e8:	e0822003 	add	r2, r2, r3
200019ec:	e020c001 	eor	ip, r0, r1
200019f0:	e1b00480 	lsls	r0, r0, #9
200019f4:	11b01481 	lslsne	r1, r1, #9
200019f8:	0a000010 	beq	20001a40 <__aeabi_fmul+0x70>
200019fc:	e3a03302 	mov	r3, #134217728	; 0x8000000
20001a00:	e18302a0 	orr	r0, r3, r0, lsr #5
20001a04:	e18312a1 	orr	r1, r3, r1, lsr #5
20001a08:	e0813190 	umull	r3, r1, r0, r1
20001a0c:	e20c0102 	and	r0, ip, #-2147483648	; 0x80000000
20001a10:	e3510502 	cmp	r1, #8388608	; 0x800000
20001a14:	31a01081 	lslcc	r1, r1, #1
20001a18:	31811fa3 	orrcc	r1, r1, r3, lsr #31
20001a1c:	31a03083 	lslcc	r3, r3, #1
20001a20:	e1800001 	orr	r0, r0, r1
20001a24:	e2c2207f 	sbc	r2, r2, #127	; 0x7f
20001a28:	e35200fd 	cmp	r2, #253	; 0xfd
20001a2c:	8a00000f 	bhi	20001a70 <__aeabi_fmul+0xa0>
20001a30:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
20001a34:	e0a00b82 	adc	r0, r0, r2, lsl #23
20001a38:	03c00001 	biceq	r0, r0, #1
20001a3c:	e12fff1e 	bx	lr
20001a40:	e3300000 	teq	r0, #0
20001a44:	e20cc102 	and	ip, ip, #-2147483648	; 0x80000000
20001a48:	01a01481 	lsleq	r1, r1, #9
20001a4c:	e18c04a0 	orr	r0, ip, r0, lsr #9
20001a50:	e18004a1 	orr	r0, r0, r1, lsr #9
20001a54:	e252207f 	subs	r2, r2, #127	; 0x7f
20001a58:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
20001a5c:	c1800b82 	orrgt	r0, r0, r2, lsl #23
20001a60:	c12fff1e 	bxgt	lr
20001a64:	e3800502 	orr	r0, r0, #8388608	; 0x800000
20001a68:	e3a03000 	mov	r3, #0
20001a6c:	e2522001 	subs	r2, r2, #1
20001a70:	ca000035 	bgt	20001b4c <__aeabi_fmul+0x17c>
20001a74:	e3720019 	cmn	r2, #25
20001a78:	d2000102 	andle	r0, r0, #-2147483648	; 0x80000000
20001a7c:	d12fff1e 	bxle	lr
20001a80:	e2622000 	rsb	r2, r2, #0
20001a84:	e1b01080 	lsls	r1, r0, #1
20001a88:	e1a01231 	lsr	r1, r1, r2
20001a8c:	e2622020 	rsb	r2, r2, #32
20001a90:	e1a0c210 	lsl	ip, r0, r2
20001a94:	e1b00061 	rrxs	r0, r1
20001a98:	e2a00000 	adc	r0, r0, #0
20001a9c:	e193308c 	orrs	r3, r3, ip, lsl #1
20001aa0:	01c00fac 	biceq	r0, r0, ip, lsr #31
20001aa4:	e12fff1e 	bx	lr
20001aa8:	e3320000 	teq	r2, #0
20001aac:	e200c102 	and	ip, r0, #-2147483648	; 0x80000000
20001ab0:	01a00080 	lsleq	r0, r0, #1
20001ab4:	03100502 	tsteq	r0, #8388608	; 0x800000
20001ab8:	02422001 	subeq	r2, r2, #1
20001abc:	0afffffb 	beq	20001ab0 <__aeabi_fmul+0xe0>
20001ac0:	e180000c 	orr	r0, r0, ip
20001ac4:	e3330000 	teq	r3, #0
20001ac8:	e201c102 	and	ip, r1, #-2147483648	; 0x80000000
20001acc:	01a01081 	lsleq	r1, r1, #1
20001ad0:	03110502 	tsteq	r1, #8388608	; 0x800000
20001ad4:	02433001 	subeq	r3, r3, #1
20001ad8:	0afffffb 	beq	20001acc <__aeabi_fmul+0xfc>
20001adc:	e181100c 	orr	r1, r1, ip
20001ae0:	eaffffc0 	b	200019e8 <__aeabi_fmul+0x18>
20001ae4:	e00c3ba1 	and	r3, ip, r1, lsr #23
20001ae8:	e132000c 	teq	r2, ip
20001aec:	1133000c 	teqne	r3, ip
20001af0:	0a000005 	beq	20001b0c <__aeabi_fmul+0x13c>
20001af4:	e3d0c102 	bics	ip, r0, #-2147483648	; 0x80000000
20001af8:	13d1c102 	bicsne	ip, r1, #-2147483648	; 0x80000000
20001afc:	1affffe9 	bne	20001aa8 <__aeabi_fmul+0xd8>
20001b00:	e0200001 	eor	r0, r0, r1
20001b04:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
20001b08:	e12fff1e 	bx	lr
20001b0c:	e3300000 	teq	r0, #0
20001b10:	13300102 	teqne	r0, #-2147483648	; 0x80000000
20001b14:	01a00001 	moveq	r0, r1
20001b18:	13310000 	teqne	r1, #0
20001b1c:	13310102 	teqne	r1, #-2147483648	; 0x80000000
20001b20:	0a00000d 	beq	20001b5c <__aeabi_fmul+0x18c>
20001b24:	e132000c 	teq	r2, ip
20001b28:	1a000001 	bne	20001b34 <__aeabi_fmul+0x164>
20001b2c:	e1b02480 	lsls	r2, r0, #9
20001b30:	1a000009 	bne	20001b5c <__aeabi_fmul+0x18c>
20001b34:	e133000c 	teq	r3, ip
20001b38:	1a000002 	bne	20001b48 <__aeabi_fmul+0x178>
20001b3c:	e1b03481 	lsls	r3, r1, #9
20001b40:	11a00001 	movne	r0, r1
20001b44:	1a000004 	bne	20001b5c <__aeabi_fmul+0x18c>
20001b48:	e0200001 	eor	r0, r0, r1
20001b4c:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
20001b50:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
20001b54:	e3800502 	orr	r0, r0, #8388608	; 0x800000
20001b58:	e12fff1e 	bx	lr
20001b5c:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
20001b60:	e3800503 	orr	r0, r0, #12582912	; 0xc00000
20001b64:	e12fff1e 	bx	lr

20001b68 <__aeabi_fdiv>:
20001b68:	e3a0c0ff 	mov	ip, #255	; 0xff
20001b6c:	e01c2ba0 	ands	r2, ip, r0, lsr #23
20001b70:	101c3ba1 	andsne	r3, ip, r1, lsr #23
20001b74:	1132000c 	teqne	r2, ip
20001b78:	1133000c 	teqne	r3, ip
20001b7c:	0a00003a 	beq	20001c6c <__aeabi_fdiv+0x104>
20001b80:	e0422003 	sub	r2, r2, r3
20001b84:	e020c001 	eor	ip, r0, r1
20001b88:	e1b01481 	lsls	r1, r1, #9
20001b8c:	e1a00480 	lsl	r0, r0, #9
20001b90:	0a00001c 	beq	20001c08 <__aeabi_fdiv+0xa0>
20001b94:	e3a03201 	mov	r3, #268435456	; 0x10000000
20001b98:	e1831221 	orr	r1, r3, r1, lsr #4
20001b9c:	e1833220 	orr	r3, r3, r0, lsr #4
20001ba0:	e20c0102 	and	r0, ip, #-2147483648	; 0x80000000
20001ba4:	e1530001 	cmp	r3, r1
20001ba8:	31a03083 	lslcc	r3, r3, #1
20001bac:	e2a2207d 	adc	r2, r2, #125	; 0x7d
20001bb0:	e3a0c502 	mov	ip, #8388608	; 0x800000
20001bb4:	e1530001 	cmp	r3, r1
20001bb8:	20433001 	subcs	r3, r3, r1
20001bbc:	2180000c 	orrcs	r0, r0, ip
20001bc0:	e15300a1 	cmp	r3, r1, lsr #1
20001bc4:	204330a1 	subcs	r3, r3, r1, lsr #1
20001bc8:	218000ac 	orrcs	r0, r0, ip, lsr #1
20001bcc:	e1530121 	cmp	r3, r1, lsr #2
20001bd0:	20433121 	subcs	r3, r3, r1, lsr #2
20001bd4:	2180012c 	orrcs	r0, r0, ip, lsr #2
20001bd8:	e15301a1 	cmp	r3, r1, lsr #3
20001bdc:	204331a1 	subcs	r3, r3, r1, lsr #3
20001be0:	218001ac 	orrcs	r0, r0, ip, lsr #3
20001be4:	e1b03203 	lsls	r3, r3, #4
20001be8:	11b0c22c 	lsrsne	ip, ip, #4
20001bec:	1afffff0 	bne	20001bb4 <__aeabi_fdiv+0x4c>
20001bf0:	e35200fd 	cmp	r2, #253	; 0xfd
20001bf4:	8affff9d 	bhi	20001a70 <__aeabi_fmul+0xa0>
20001bf8:	e1530001 	cmp	r3, r1
20001bfc:	e0a00b82 	adc	r0, r0, r2, lsl #23
20001c00:	03c00001 	biceq	r0, r0, #1
20001c04:	e12fff1e 	bx	lr
20001c08:	e20cc102 	and	ip, ip, #-2147483648	; 0x80000000
20001c0c:	e18c04a0 	orr	r0, ip, r0, lsr #9
20001c10:	e292207f 	adds	r2, r2, #127	; 0x7f
20001c14:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
20001c18:	c1800b82 	orrgt	r0, r0, r2, lsl #23
20001c1c:	c12fff1e 	bxgt	lr
20001c20:	e3800502 	orr	r0, r0, #8388608	; 0x800000
20001c24:	e3a03000 	mov	r3, #0
20001c28:	e2522001 	subs	r2, r2, #1
20001c2c:	eaffff8f 	b	20001a70 <__aeabi_fmul+0xa0>
20001c30:	e3320000 	teq	r2, #0
20001c34:	e200c102 	and	ip, r0, #-2147483648	; 0x80000000
20001c38:	01a00080 	lsleq	r0, r0, #1
20001c3c:	03100502 	tsteq	r0, #8388608	; 0x800000
20001c40:	02422001 	subeq	r2, r2, #1
20001c44:	0afffffb 	beq	20001c38 <__aeabi_fdiv+0xd0>
20001c48:	e180000c 	orr	r0, r0, ip
20001c4c:	e3330000 	teq	r3, #0
20001c50:	e201c102 	and	ip, r1, #-2147483648	; 0x80000000
20001c54:	01a01081 	lsleq	r1, r1, #1
20001c58:	03110502 	tsteq	r1, #8388608	; 0x800000
20001c5c:	02433001 	subeq	r3, r3, #1
20001c60:	0afffffb 	beq	20001c54 <__aeabi_fdiv+0xec>
20001c64:	e181100c 	orr	r1, r1, ip
20001c68:	eaffffc4 	b	20001b80 <__aeabi_fdiv+0x18>
20001c6c:	e00c3ba1 	and	r3, ip, r1, lsr #23
20001c70:	e132000c 	teq	r2, ip
20001c74:	1a000005 	bne	20001c90 <__aeabi_fdiv+0x128>
20001c78:	e1b02480 	lsls	r2, r0, #9
20001c7c:	1affffb6 	bne	20001b5c <__aeabi_fmul+0x18c>
20001c80:	e133000c 	teq	r3, ip
20001c84:	1affffaf 	bne	20001b48 <__aeabi_fmul+0x178>
20001c88:	e1a00001 	mov	r0, r1
20001c8c:	eaffffb2 	b	20001b5c <__aeabi_fmul+0x18c>
20001c90:	e133000c 	teq	r3, ip
20001c94:	1a000003 	bne	20001ca8 <__aeabi_fdiv+0x140>
20001c98:	e1b03481 	lsls	r3, r1, #9
20001c9c:	0affff97 	beq	20001b00 <__aeabi_fmul+0x130>
20001ca0:	e1a00001 	mov	r0, r1
20001ca4:	eaffffac 	b	20001b5c <__aeabi_fmul+0x18c>
20001ca8:	e3d0c102 	bics	ip, r0, #-2147483648	; 0x80000000
20001cac:	13d1c102 	bicsne	ip, r1, #-2147483648	; 0x80000000
20001cb0:	1affffde 	bne	20001c30 <__aeabi_fdiv+0xc8>
20001cb4:	e3d02102 	bics	r2, r0, #-2147483648	; 0x80000000
20001cb8:	1affffa2 	bne	20001b48 <__aeabi_fmul+0x178>
20001cbc:	e3d13102 	bics	r3, r1, #-2147483648	; 0x80000000
20001cc0:	1affff8e 	bne	20001b00 <__aeabi_fmul+0x130>
20001cc4:	eaffffa4 	b	20001b5c <__aeabi_fmul+0x18c>

20001cc8 <__gesf2>:
20001cc8:	e3e0c000 	mvn	ip, #0
20001ccc:	ea000002 	b	20001cdc <__cmpsf2+0x4>

20001cd0 <__lesf2>:
20001cd0:	e3a0c001 	mov	ip, #1
20001cd4:	ea000000 	b	20001cdc <__cmpsf2+0x4>

20001cd8 <__cmpsf2>:
20001cd8:	e3a0c001 	mov	ip, #1
20001cdc:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
20001ce0:	e1a02080 	lsl	r2, r0, #1
20001ce4:	e1a03081 	lsl	r3, r1, #1
20001ce8:	e1f0cc42 	mvns	ip, r2, asr #24
20001cec:	11f0cc43 	mvnsne	ip, r3, asr #24
20001cf0:	0a000007 	beq	20001d14 <__cmpsf2+0x3c>
20001cf4:	e28dd004 	add	sp, sp, #4
20001cf8:	e192c0a3 	orrs	ip, r2, r3, lsr #1
20001cfc:	11300001 	teqne	r0, r1
20001d00:	50520003 	subspl	r0, r2, r3
20001d04:	81a00fc1 	asrhi	r0, r1, #31
20001d08:	31e00fc1 	mvncc	r0, r1, asr #31
20001d0c:	13800001 	orrne	r0, r0, #1
20001d10:	e12fff1e 	bx	lr
20001d14:	e1f0cc42 	mvns	ip, r2, asr #24
20001d18:	1a000001 	bne	20001d24 <__cmpsf2+0x4c>
20001d1c:	e1b0c480 	lsls	ip, r0, #9
20001d20:	1a000003 	bne	20001d34 <__cmpsf2+0x5c>
20001d24:	e1f0cc43 	mvns	ip, r3, asr #24
20001d28:	1afffff1 	bne	20001cf4 <__cmpsf2+0x1c>
20001d2c:	e1b0c481 	lsls	ip, r1, #9
20001d30:	0affffef 	beq	20001cf4 <__cmpsf2+0x1c>
20001d34:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
20001d38:	e12fff1e 	bx	lr

20001d3c <__aeabi_cfrcmple>:
20001d3c:	e1a0c000 	mov	ip, r0
20001d40:	e1a00001 	mov	r0, r1
20001d44:	e1a0100c 	mov	r1, ip
20001d48:	eaffffff 	b	20001d4c <__aeabi_cfcmpeq>

20001d4c <__aeabi_cfcmpeq>:
20001d4c:	e92d400f 	push	{r0, r1, r2, r3, lr}
20001d50:	ebffffe0 	bl	20001cd8 <__cmpsf2>
20001d54:	e3500000 	cmp	r0, #0
20001d58:	43700000 	cmnmi	r0, #0
20001d5c:	e8bd400f 	pop	{r0, r1, r2, r3, lr}
20001d60:	e12fff1e 	bx	lr

20001d64 <__aeabi_fcmpeq>:
20001d64:	e52de008 	str	lr, [sp, #-8]!
20001d68:	ebfffff7 	bl	20001d4c <__aeabi_cfcmpeq>
20001d6c:	03a00001 	moveq	r0, #1
20001d70:	13a00000 	movne	r0, #0
20001d74:	e49de008 	ldr	lr, [sp], #8
20001d78:	e12fff1e 	bx	lr

20001d7c <__aeabi_fcmplt>:
20001d7c:	e52de008 	str	lr, [sp, #-8]!
20001d80:	ebfffff1 	bl	20001d4c <__aeabi_cfcmpeq>
20001d84:	33a00001 	movcc	r0, #1
20001d88:	23a00000 	movcs	r0, #0
20001d8c:	e49de008 	ldr	lr, [sp], #8
20001d90:	e12fff1e 	bx	lr

20001d94 <__aeabi_fcmple>:
20001d94:	e52de008 	str	lr, [sp, #-8]!
20001d98:	ebffffeb 	bl	20001d4c <__aeabi_cfcmpeq>
20001d9c:	93a00001 	movls	r0, #1
20001da0:	83a00000 	movhi	r0, #0
20001da4:	e49de008 	ldr	lr, [sp], #8
20001da8:	e12fff1e 	bx	lr

20001dac <__aeabi_fcmpge>:
20001dac:	e52de008 	str	lr, [sp, #-8]!
20001db0:	ebffffe1 	bl	20001d3c <__aeabi_cfrcmple>
20001db4:	93a00001 	movls	r0, #1
20001db8:	83a00000 	movhi	r0, #0
20001dbc:	e49de008 	ldr	lr, [sp], #8
20001dc0:	e12fff1e 	bx	lr

20001dc4 <__aeabi_fcmpgt>:
20001dc4:	e52de008 	str	lr, [sp, #-8]!
20001dc8:	ebffffdb 	bl	20001d3c <__aeabi_cfrcmple>
20001dcc:	33a00001 	movcc	r0, #1
20001dd0:	23a00000 	movcs	r0, #0
20001dd4:	e49de008 	ldr	lr, [sp], #8
20001dd8:	e12fff1e 	bx	lr

20001ddc <__aeabi_f2uiz>:
20001ddc:	e1b02080 	lsls	r2, r0, #1
20001de0:	2a000008 	bcs	20001e08 <__aeabi_f2uiz+0x2c>
20001de4:	e352047f 	cmp	r2, #2130706432	; 0x7f000000
20001de8:	3a000006 	bcc	20001e08 <__aeabi_f2uiz+0x2c>
20001dec:	e3a0309e 	mov	r3, #158	; 0x9e
20001df0:	e0532c22 	subs	r2, r3, r2, lsr #24
20001df4:	4a000005 	bmi	20001e10 <__aeabi_f2uiz+0x34>
20001df8:	e1a03400 	lsl	r3, r0, #8
20001dfc:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
20001e00:	e1a00233 	lsr	r0, r3, r2
20001e04:	e12fff1e 	bx	lr
20001e08:	e3a00000 	mov	r0, #0
20001e0c:	e12fff1e 	bx	lr
20001e10:	e3720061 	cmn	r2, #97	; 0x61
20001e14:	1a000001 	bne	20001e20 <__aeabi_f2uiz+0x44>
20001e18:	e1b02480 	lsls	r2, r0, #9
20001e1c:	1a000001 	bne	20001e28 <__aeabi_f2uiz+0x4c>
20001e20:	e3e00000 	mvn	r0, #0
20001e24:	e12fff1e 	bx	lr
20001e28:	e3a00000 	mov	r0, #0
20001e2c:	e12fff1e 	bx	lr

20001e30 <buffer>:
	...

20002230 <boids>:
	...

20002284 <buffer>:
	...
20002684:	0a030201 	beq	200c2e90 <buffer+0xc0c0c>
20002688:	0b060504 	bleq	20183aa0 <buffer+0x18181c>
2000268c:	0c090807 	stceq	8, cr0, [r9], {7}
20002690:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20002660 <buffer+0x3dc>
20002694:	4f5b063f 	svcmi	0x005b063f
20002698:	077d6d66 	ldrbeq	r6, [sp, -r6, ror #26]!
2000269c:	7c776f7f 	ldclvc	15, cr6, [r7], #-508	; 0xfffffe04
200026a0:	71795e39 	cmnvc	r9, r9, lsr lr

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	000003bb 			; <UNDEFINED> instruction: 0x000003bb
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000065 	andeq	r0, r0, r5, rrx
  10:	0000f80c 	andeq	pc, r0, ip, lsl #16
  14:	0001e600 	andeq	lr, r1, r0, lsl #12
	...
  24:	01680200 	cmneq	r8, r0, lsl #4
  28:	01020000 	mrseq	r0, (UNDEF: 2)
  2c:	00003117 	andeq	r3, r0, r7, lsl r1
  30:	08010300 	stmdaeq	r1, {r8, r9}
  34:	00000052 	andeq	r0, r0, r2, asr r0
  38:	00002504 	andeq	r2, r0, r4, lsl #10
  3c:	00004e00 	andeq	r4, r0, r0, lsl #28
  40:	004e0500 	subeq	r0, lr, r0, lsl #10
  44:	05070000 	streq	r0, [r7, #-0]
  48:	0000004e 	andeq	r0, r0, lr, asr #32
  4c:	0403007f 	streq	r0, [r3], #-127	; 0xffffff81
  50:	00015b07 	andeq	r5, r1, r7, lsl #22
  54:	03bb0600 			; <UNDEFINED> instruction: 0x03bb0600
  58:	02020000 	andeq	r0, r2, #0
  5c:	00003810 	andeq	r3, r0, r0, lsl r8
  60:	30030500 	andcc	r0, r3, r0, lsl #10
  64:	0720001e 			; <UNDEFINED> instruction: 0x0720001e
  68:	000001ad 	andeq	r0, r0, sp, lsr #3
  6c:	1013011c 	andsne	r0, r3, ip, lsl r1
  70:	000000cc 	andeq	r0, r0, ip, asr #1
  74:	01007808 	tsteq	r0, r8, lsl #16
  78:	00cc0814 	sbceq	r0, ip, r4, lsl r8
  7c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
  80:	14010079 	strne	r0, [r1], #-121	; 0xffffff87
  84:	0000cc0b 	andeq	ip, r0, fp, lsl #24
  88:	bb090400 	bllt	241090 <startup-0x1fdbef70>
  8c:	01000001 	tsteq	r0, r1
  90:	00cc0815 	sbceq	r0, ip, r5, lsl r8
  94:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
  98:	00000228 	andeq	r0, r0, r8, lsr #4
  9c:	cc0e1501 	cfstr32gt	mvfx1, [lr], {1}
  a0:	0c000000 	stceq	0, cr0, [r0], {-0}
  a4:	00006009 	andeq	r6, r0, r9
  a8:	0d170100 	ldfeqs	f0, [r7, #-0]
  ac:	000000e4 	andeq	r0, r0, r4, ror #1
  b0:	00480910 	subeq	r0, r8, r0, lsl r9
  b4:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
  b8:	0000e40d 	andeq	lr, r0, sp, lsl #8
  bc:	08091400 	stmdaeq	r9, {sl, ip}
  c0:	01000000 	mrseq	r0, (UNDEF: 0)
  c4:	00e40d19 	rsceq	r0, r4, r9, lsl sp
  c8:	00180000 	andseq	r0, r8, r0
  cc:	32040403 	andcc	r0, r4, #50331648	; 0x3000000
  d0:	0a000000 	beq	d8 <startup-0x1fffff28>
  d4:	000000de 	ldrdeq	r0, [r0], -lr
  d8:	0000de0b 	andeq	sp, r0, fp, lsl #28
  dc:	040c0000 	streq	r0, [ip], #-0
  e0:	00000067 	andeq	r0, r0, r7, rrx
  e4:	00d3040c 	sbcseq	r0, r3, ip, lsl #8
  e8:	7d020000 	stcvc	0, cr0, [r2, #-0]
  ec:	01000001 	tsteq	r0, r1
  f0:	0067031a 	rsbeq	r0, r7, sl, lsl r3
  f4:	7c020000 	stcvc	0, cr0, [r2], {-0}
  f8:	01000001 	tsteq	r0, r1
  fc:	00de0a1a 	sbcseq	r0, lr, sl, lsl sl
 100:	ea040000 	b	100108 <startup-0x1feffef8>
 104:	12000000 	andne	r0, r0, #0
 108:	05000001 	streq	r0, [r0, #-1]
 10c:	0000004e 	andeq	r0, r0, lr, asr #32
 110:	f2060002 	vhadd.s8	d0, d6, d2
 114:	01000000 	mrseq	r0, (UNDEF: 0)
 118:	01020d23 	tsteq	r2, r3, lsr #26
 11c:	03050000 	movweq	r0, #20480	; 0x5000
 120:	20002230 	andcs	r2, r0, r0, lsr r2
 124:	0001440d 	andeq	r4, r1, sp, lsl #8
 128:	066e0100 	strbteq	r0, [lr], -r0, lsl #2
 12c:	20000480 	andcs	r0, r0, r0, lsl #9
 130:	000000b8 	strheq	r0, [r0], -r8
 134:	01899c01 	orreq	r9, r9, r1, lsl #24
 138:	960e0000 	strls	r0, [lr], -r0
 13c:	9a200004 	bls	800154 <startup-0x1f7ffeac>
 140:	0f000000 	svceq	0x00000000
 144:	000001c0 	andeq	r0, r0, r0, asr #3
 148:	89038201 	stmdbhi	r3, {r0, r9, pc}
 14c:	55000001 	strpl	r0, [r0, #-1]
 150:	10000001 	andne	r0, r0, r1
 154:	04961100 	ldreq	r1, [r6], #256	; 0x100
 158:	00362000 	eorseq	r2, r6, r0
 15c:	01700000 	cmneq	r0, r0
 160:	69120000 	ldmdbvs	r2, {}	; <UNPREDICTABLE>
 164:	12790100 	rsbsne	r0, r9, #0, 2
 168:	00000189 	andeq	r0, r0, r9, lsl #3
 16c:	00749102 	rsbseq	r9, r4, r2, lsl #2
 170:	0004cc0e 	andeq	ip, r4, lr, lsl #24
 174:	00005a20 	andeq	r5, r0, r0, lsr #20
 178:	00691200 	rsbeq	r1, r9, r0, lsl #4
 17c:	89127c01 	ldmdbhi	r2, {r0, sl, fp, ip, sp, lr}
 180:	02000001 	andeq	r0, r0, #1
 184:	00007091 	muleq	r0, r1, r0
 188:	05041300 	streq	r1, [r4, #-768]	; 0xfffffd00
 18c:	00746e69 	rsbseq	r6, r4, r9, ror #28
 190:	00017014 	andeq	r7, r1, r4, lsl r0
 194:	065f0100 	ldrbeq	r0, [pc], -r0, lsl #2
 198:	20000390 	mulcs	r0, r0, r3
 19c:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 1a0:	01be9c01 			; <UNDEFINED> instruction: 0x01be9c01
 1a4:	960e0000 	strls	r0, [lr], -r0
 1a8:	c2200003 	eorgt	r0, r0, #3
 1ac:	12000000 	andne	r0, r0, #0
 1b0:	60010069 	andvs	r0, r1, r9, rrx
 1b4:	0001890e 	andeq	r8, r1, lr, lsl #18
 1b8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 1bc:	080d0000 	stmdaeq	sp, {}	; <UNPREDICTABLE>
 1c0:	01000000 	mrseq	r0, (UNDEF: 0)
 1c4:	00de062e 	sbcseq	r0, lr, lr, lsr #12
 1c8:	02b22000 	adcseq	r2, r2, #0
 1cc:	9c010000 	stcls	0, cr0, [r1], {-0}
 1d0:	0000030b 	andeq	r0, r0, fp, lsl #6
 1d4:	00015615 	andeq	r5, r1, r5, lsl r6
 1d8:	162e0100 	strtne	r0, [lr], -r0, lsl #2
 1dc:	000000f6 	strdeq	r0, [r0], -r6
 1e0:	7fa49103 	svcvc	0x00a49103
 1e4:	0001a106 	andeq	sl, r1, r6, lsl #2
 1e8:	092f0100 	stmdbeq	pc!, {r8}	; <UNPREDICTABLE>
 1ec:	00000189 	andeq	r0, r0, r9, lsl #3
 1f0:	066c9102 	strbteq	r9, [ip], -r2, lsl #2
 1f4:	000000e1 	andeq	r0, r0, r1, ror #1
 1f8:	cc0b3001 	stcgt	0, cr3, [fp], {1}
 1fc:	02000000 	andeq	r0, r0, #0
 200:	20066891 	mulcs	r6, r1, r8
 204:	01000002 	tsteq	r0, r2
 208:	00cc1830 	sbceq	r1, ip, r0, lsr r8
 20c:	91020000 	mrsls	r0, (UNDEF: 2)
 210:	013c0664 	teqeq	ip, r4, ror #12
 214:	31010000 	mrscc	r0, (UNDEF: 1)
 218:	0000cc0b 	andeq	ip, r0, fp, lsl #24
 21c:	60910200 	addsvs	r0, r1, r0, lsl #4
 220:	00018206 	andeq	r8, r1, r6, lsl #4
 224:	18310100 	ldmdane	r1!, {r8}
 228:	000000cc 	andeq	r0, r0, ip, asr #1
 22c:	06509102 	ldrbeq	r9, [r0], -r2, lsl #2
 230:	00000149 	andeq	r0, r0, r9, asr #2
 234:	cc0b3201 	sfmgt	f3, 4, [fp], {1}
 238:	02000000 	andeq	r0, r0, #0
 23c:	25065c91 	strcs	r5, [r6, #-3217]	; 0xfffff36f
 240:	01000000 	mrseq	r0, (UNDEF: 0)
 244:	00cc1d32 	sbceq	r1, ip, r2, lsr sp
 248:	91020000 	mrsls	r0, (UNDEF: 2)
 24c:	01b30658 			; <UNDEFINED> instruction: 0x01b30658
 250:	4d010000 	stcmi	0, cr0, [r1, #-0]
 254:	0000cc0b 	andeq	ip, r0, fp, lsl #24
 258:	4c910200 	lfmmi	f0, 4, [r1], {0}
 25c:	00001d06 	andeq	r1, r0, r6, lsl #26
 260:	0b4e0100 	bleq	1380668 <startup-0x1ec7f998>
 264:	000000cc 	andeq	r0, r0, ip, asr #1
 268:	06489102 	strbeq	r9, [r8], -r2, lsl #2
 26c:	00000012 	andeq	r0, r0, r2, lsl r0
 270:	cc0b5001 	stcgt	0, cr5, [fp], {1}
 274:	02000000 	andeq	r0, r0, #0
 278:	8a064491 	bhi	1914c4 <startup-0x1fe6eb3c>
 27c:	01000001 	tsteq	r0, r1
 280:	00cc0b51 	sbceq	r0, ip, r1, asr fp
 284:	91020000 	mrsls	r0, (UNDEF: 2)
 288:	01cc0640 	biceq	r0, ip, r0, asr #12
 28c:	54010000 	strpl	r0, [r1], #-0
 290:	0000cc0b 	andeq	ip, r0, fp, lsl #24
 294:	bc910300 	ldclt	3, cr0, [r1], {0}
 298:	022d067f 	eoreq	r0, sp, #133169152	; 0x7f00000
 29c:	55010000 	strpl	r0, [r1, #-0]
 2a0:	0000cc0b 	andeq	ip, r0, fp, lsl #24
 2a4:	b8910300 	ldmlt	r1, {r8, r9}
 2a8:	01da067f 	bicseq	r0, sl, pc, ror r6
 2ac:	57010000 	strpl	r0, [r1, -r0]
 2b0:	0000cc0b 	andeq	ip, r0, fp, lsl #24
 2b4:	b4910300 	ldrlt	r0, [r1], #768	; 0x300
 2b8:	0195067f 	orrseq	r0, r5, pc, ror r6
 2bc:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
 2c0:	0000cc0b 	andeq	ip, r0, fp, lsl #24
 2c4:	b0910300 	addslt	r0, r1, r0, lsl #6
 2c8:	01020e7f 	tsteq	r2, pc, ror lr
 2cc:	00e62000 	rsceq	r2, r6, r0
 2d0:	69120000 	ldmdbvs	r2, {}	; <UNPREDICTABLE>
 2d4:	0e340100 	rsfeqs	f0, f4, f0
 2d8:	00000189 	andeq	r0, r0, r9, lsl #3
 2dc:	0e549102 	logeqs	f1, f2
 2e0:	20000108 	andcs	r0, r0, r8, lsl #2
 2e4:	000000d4 	ldrdeq	r0, [r0], -r4
 2e8:	0001d406 	andeq	sp, r1, r6, lsl #8
 2ec:	0f350100 	svceq	0x00350100
 2f0:	000000f6 	strdeq	r0, [r0], -r6
 2f4:	7fac9103 	svcvc	0x00ac9103
 2f8:	0000e906 	andeq	lr, r0, r6, lsl #18
 2fc:	0f360100 	svceq	0x00360100
 300:	000000cc 	andeq	r0, r0, ip, asr #1
 304:	7fa89103 	svcvc	0x00a89103
 308:	0d000000 	stceq	0, cr0, [r0, #-0]
 30c:	00000048 	andeq	r0, r0, r8, asr #32
 310:	9e062901 	vmlals.f16	s4, s12, s2	; <UNPREDICTABLE>
 314:	40200000 	eormi	r0, r0, r0
 318:	01000000 	mrseq	r0, (UNDEF: 0)
 31c:	0003319c 	muleq	r3, ip, r1
 320:	01561500 	cmpeq	r6, r0, lsl #10
 324:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
 328:	0000f616 	andeq	pc, r0, r6, lsl r6	; <UNPREDICTABLE>
 32c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 330:	00600d00 	rsbeq	r0, r0, r0, lsl #26
 334:	25010000 	strcs	r0, [r1, #-0]
 338:	00006806 	andeq	r6, r0, r6, lsl #16
 33c:	00003620 	andeq	r3, r0, r0, lsr #12
 340:	579c0100 	ldrpl	r0, [ip, r0, lsl #2]
 344:	15000003 	strne	r0, [r0, #-3]
 348:	00000156 	andeq	r0, r0, r6, asr r1
 34c:	f6112501 			; <UNDEFINED> instruction: 0xf6112501
 350:	02000000 	andeq	r0, r0, #0
 354:	16006c91 			; <UNDEFINED> instruction: 0x16006c91
 358:	00000038 	andeq	r0, r0, r8, lsr r0
 35c:	cc071c01 	stcgt	12, cr1, [r7], {1}
 360:	10000000 	andne	r0, r0, r0
 364:	58200000 	stmdapl	r0!, {}	; <UNPREDICTABLE>
 368:	01000000 	mrseq	r0, (UNDEF: 0)
 36c:	0003ac9c 	muleq	r3, ip, ip
 370:	6e6f1700 	cdpvs	7, 6, cr1, cr15, cr0, {0}
 374:	1c010065 	stcne	0, cr0, [r1], {101}	; 0x65
 378:	0000f61d 	andeq	pc, r0, sp, lsl r6	; <UNPREDICTABLE>
 37c:	6c910200 	lfmvs	f0, 4, [r1], {0}
 380:	6f777417 	svcvs	0x00777417
 384:	281c0100 	ldmdacs	ip, {r8}
 388:	000000f6 	strdeq	r0, [r0], -r6
 38c:	12689102 	rsbne	r9, r8, #-2147483648	; 0x80000000
 390:	01004478 	tsteq	r0, r8, ror r4
 394:	00cc0b1d 	sbceq	r0, ip, sp, lsl fp
 398:	91020000 	mrsls	r0, (UNDEF: 2)
 39c:	44791274 	ldrbtmi	r1, [r9], #-628	; 0xfffffd8c
 3a0:	0b1e0100 	bleq	7807a8 <startup-0x1f87f858>
 3a4:	000000cc 	andeq	r0, r0, ip, asr #1
 3a8:	00709102 	rsbseq	r9, r0, r2, lsl #2
 3ac:	00000018 	andeq	r0, r0, r8, lsl r0
 3b0:	06040100 	streq	r0, [r4], -r0, lsl #2
 3b4:	20000000 	andcs	r0, r0, r0
 3b8:	0000000c 	andeq	r0, r0, ip
 3bc:	43009c01 	movwmi	r9, #3073	; 0xc01
 3c0:	04000005 	streq	r0, [r0], #-5
 3c4:	00017700 	andeq	r7, r1, r0, lsl #14
 3c8:	65010400 	strvs	r0, [r1, #-1024]	; 0xfffffc00
 3cc:	0c000000 	stceq	0, cr0, [r0], {-0}
 3d0:	0000032b 	andeq	r0, r0, fp, lsr #6
 3d4:	000001e6 	andeq	r0, r0, r6, ror #3
 3d8:	20000538 	andcs	r0, r0, r8, lsr r5
 3dc:	00000900 	andeq	r0, r0, r0, lsl #18
 3e0:	0000025f 	andeq	r0, r0, pc, asr r2
 3e4:	00016802 	andeq	r6, r1, r2, lsl #16
 3e8:	17010200 	strne	r0, [r1, -r0, lsl #4]
 3ec:	00000031 	andeq	r0, r0, r1, lsr r0
 3f0:	52080103 	andpl	r0, r8, #-1073741824	; 0xc0000000
 3f4:	04000000 	streq	r0, [r0], #-0
 3f8:	00000025 	andeq	r0, r0, r5, lsr #32
 3fc:	0000004e 	andeq	r0, r0, lr, asr #32
 400:	00004e05 	andeq	r4, r0, r5, lsl #28
 404:	4e050700 	cdpmi	7, 0, cr0, cr5, cr0, {0}
 408:	7f000000 	svcvc	0x00000000
 40c:	07040300 	streq	r0, [r4, -r0, lsl #6]
 410:	0000015b 	andeq	r0, r0, fp, asr r1
 414:	0003bb06 	andeq	fp, r3, r6, lsl #22
 418:	10020200 	andne	r0, r2, r0, lsl #4
 41c:	00000038 	andeq	r0, r0, r8, lsr r0
 420:	22840305 	addcs	r0, r4, #335544320	; 0x14000000
 424:	10072000 	andne	r2, r7, r0
 428:	01000003 	tsteq	r0, r3
 42c:	e8060151 	stmda	r6, {r0, r4, r6, r8}
 430:	5020000d 	eorpl	r0, r0, sp
 434:	01000000 	mrseq	r0, (UNDEF: 0)
 438:	0000b79c 	muleq	r0, ip, r7
 43c:	00630800 	rsbeq	r0, r3, r0, lsl #16
 440:	1c015101 	stfnes	f5, [r1], {1}
 444:	00000031 	andeq	r0, r0, r1, lsr r0
 448:	094f9102 	stmdbeq	pc, {r1, r8, ip, pc}^	; <UNPREDICTABLE>
 44c:	0074756f 	rsbseq	r7, r4, pc, ror #10
 450:	0a015201 	beq	54c5c <startup-0x1ffab3a4>
 454:	000000b7 	strheq	r0, [r0], -r7
 458:	0a679102 	beq	19e4868 <startup-0x1e61b798>
 45c:	20000e04 	andcs	r0, r0, r4, lsl #28
 460:	0000001a 	andeq	r0, r0, sl, lsl r0
 464:	00023a0b 	andeq	r3, r2, fp, lsl #20
 468:	01540100 	cmpeq	r4, r0, lsl #2
 46c:	0000be0e 	andeq	fp, r0, lr, lsl #28
 470:	54910200 	ldrpl	r0, [r1], #512	; 0x200
 474:	01030000 	mrseq	r0, (UNDEF: 3)
 478:	00005b08 	andeq	r5, r0, r8, lsl #22
 47c:	00b70400 	adcseq	r0, r7, r0, lsl #8
 480:	00ce0000 	sbceq	r0, lr, r0
 484:	4e050000 	cdpmi	0, 0, cr0, cr5, cr0, {0}
 488:	0f000000 	svceq	0x00000000
 48c:	036f0c00 	cmneq	pc, #0, 24
 490:	33010000 	movwcc	r0, #4096	; 0x1000
 494:	00310f01 	eorseq	r0, r1, r1, lsl #30
 498:	0cd40000 	ldcleq	0, cr0, [r4], {0}
 49c:	01142000 	tsteq	r4, r0
 4a0:	9c010000 	stcls	0, cr0, [r1], {-0}
 4a4:	00000178 	andeq	r0, r0, r8, ror r1
 4a8:	0003b00b 	andeq	fp, r3, fp
 4ac:	01340100 	teqeq	r4, r0, lsl #2
 4b0:	00017813 	andeq	r7, r1, r3, lsl r8
 4b4:	58910200 	ldmpl	r1, {r9}
 4b8:	00030a0b 	andeq	r0, r3, fp, lsl #20
 4bc:	01380100 	teqeq	r8, r0, lsl #2
 4c0:	0000b70a 	andeq	fp, r0, sl, lsl #14
 4c4:	6f910200 	svcvs	0x00910200
 4c8:	00028b0b 	andeq	r8, r2, fp, lsl #22
 4cc:	01390100 	teqeq	r9, r0, lsl #2
 4d0:	0000b70a 	andeq	fp, r0, sl, lsl #14
 4d4:	6c910200 	lfmvs	f0, 4, [r1], {0}
 4d8:	000cf60a 	andeq	pc, ip, sl, lsl #12
 4dc:	0000be20 	andeq	fp, r0, r0, lsr #28
 4e0:	6f720900 	svcvs	0x00720900
 4e4:	3a010077 	bcc	406c8 <startup-0x1ffbf938>
 4e8:	00b70f01 	adcseq	r0, r7, r1, lsl #30
 4ec:	91020000 	mrsls	r0, (UNDEF: 2)
 4f0:	0d000a6e 	vstreq	s0, [r0, #-440]	; 0xfffffe48
 4f4:	009e2000 	addseq	r2, lr, r0
 4f8:	600b0000 	andvs	r0, fp, r0
 4fc:	01000002 	tsteq	r0, r2
 500:	b70e013b 	smladxlt	lr, fp, r1, r0
 504:	02000000 	andeq	r0, r0, #0
 508:	ff0b6b91 			; <UNDEFINED> instruction: 0xff0b6b91
 50c:	01000002 	tsteq	r0, r2
 510:	b70e013d 	smladxlt	lr, sp, r1, r0
 514:	02000000 	andeq	r0, r0, #0
 518:	340a6a91 	strcc	r6, [sl], #-2705	; 0xfffff56f
 51c:	6a20000d 	bvs	800558 <startup-0x1f7ffaa8>
 520:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 524:	006c6f63 	rsbeq	r6, ip, r3, ror #30
 528:	12013f01 	andne	r3, r1, #1, 30
 52c:	000000b7 	strheq	r0, [r0], -r7
 530:	006d9102 	rsbeq	r9, sp, r2, lsl #2
 534:	04000000 	streq	r0, [r0], #-0
 538:	00000031 	andeq	r0, r0, r1, lsr r0
 53c:	00000188 	andeq	r0, r0, r8, lsl #3
 540:	00004e05 	andeq	r4, r0, r5, lsl #28
 544:	0d000f00 	stceq	15, cr0, [r0, #-0]
 548:	0000025b 	andeq	r0, r0, fp, asr r2
 54c:	06011501 	streq	r1, [r1], -r1, lsl #10
 550:	20000c30 	andcs	r0, r0, r0, lsr ip
 554:	000000a4 	andeq	r0, r0, r4, lsr #1
 558:	970e9c01 	strls	r9, [lr, -r1, lsl #24]
 55c:	01000003 	tsteq	r0, r3
 560:	0b0c06fd 	bleq	30215c <startup-0x1fcfdea4>
 564:	01242000 			; <UNDEFINED> instruction: 0x01242000
 568:	9c010000 	stcls	0, cr0, [r1], {-0}
 56c:	00000214 	andeq	r0, r0, r4, lsl r2
 570:	000b120f 	andeq	r1, fp, pc, lsl #4
 574:	00008220 	andeq	r8, r0, r0, lsr #4
 578:	0001e300 	andeq	lr, r1, r0, lsl #6
 57c:	00791000 	rsbseq	r1, r9, r0
 580:	250ffe01 	strcs	pc, [pc, #-3585]	; fffff787 <buffer+0xdfffd503>
 584:	02000000 	andeq	r0, r0, #0
 588:	1a0a7791 	bne	29e3d4 <startup-0x1fd61c2c>
 58c:	6820000b 	stmdavs	r0!, {r0, r1, r3}
 590:	10000000 	andne	r0, r0, r0
 594:	ff010078 			; <UNDEFINED> instruction: 0xff010078
 598:	00002510 	andeq	r2, r0, r0, lsl r5
 59c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 5a0:	940a0000 	strls	r0, [sl], #-0
 5a4:	8c20000b 	stchi	0, cr0, [r0], #-44	; 0xffffffd4
 5a8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 5ac:	08010079 	stmdaeq	r1, {r0, r3, r4, r5, r6}
 5b0:	00250f01 	eoreq	r0, r5, r1, lsl #30
 5b4:	91020000 	mrsls	r0, (UNDEF: 2)
 5b8:	0b9c0a75 	bleq	fe702f94 <buffer+0xde700d10>
 5bc:	00722000 	rsbseq	r2, r2, r0
 5c0:	78090000 	stmdavc	r9, {}	; <UNPREDICTABLE>
 5c4:	01090100 	mrseq	r0, (UNDEF: 25)
 5c8:	00002510 	andeq	r2, r0, r0, lsl r5
 5cc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 5d0:	11000000 	mrsne	r0, (UNDEF: 0)
 5d4:	000003b5 			; <UNDEFINED> instruction: 0x000003b5
 5d8:	b006f501 	andlt	pc, r6, r1, lsl #10
 5dc:	5c20000a 	stcpl	0, cr0, [r0], #-40	; 0xffffffd8
 5e0:	01000000 	mrseq	r0, (UNDEF: 0)
 5e4:	0002599c 	muleq	r2, ip, r9
 5e8:	0ab60a00 	beq	fed82df0 <buffer+0xded80b6c>
 5ec:	00482000 	subeq	r2, r8, r0
 5f0:	79100000 	ldmdbvc	r0, {}	; <UNPREDICTABLE>
 5f4:	0ff60100 	svceq	0x00f60100
 5f8:	00000025 	andeq	r0, r0, r5, lsr #32
 5fc:	0a779102 	beq	1de4a0c <startup-0x1e21b5f4>
 600:	20000abe 			; <UNDEFINED> instruction: 0x20000abe
 604:	0000002e 	andeq	r0, r0, lr, lsr #32
 608:	01007810 	tsteq	r0, r0, lsl r8
 60c:	002510f7 	strdeq	r1, [r5], -r7	; <UNPREDICTABLE>
 610:	91020000 	mrsls	r0, (UNDEF: 2)
 614:	00000076 	andeq	r0, r0, r6, ror r0
 618:	00027912 	andeq	r7, r2, r2, lsl r9
 61c:	06e90100 	strbteq	r0, [r9], r0, lsl #2
 620:	200009ec 	andcs	r0, r0, ip, ror #19
 624:	000000c4 	andeq	r0, r0, r4, asr #1
 628:	02a89c01 	adceq	r9, r8, #256	; 0x100
 62c:	78130000 	ldmdavc	r3, {}	; <UNPREDICTABLE>
 630:	14e90100 	strbtne	r0, [r9], #256	; 0x100
 634:	00000025 	andeq	r0, r0, r5, lsr #32
 638:	13679102 	cmnne	r7, #-2147483648	; 0x80000000
 63c:	e9010079 	stmdb	r1, {r0, r3, r4, r5, r6}
 640:	0000251f 	andeq	r2, r0, pc, lsl r5
 644:	66910200 	ldrvs	r0, [r1], r0, lsl #4
 648:	74657313 	strbtvc	r7, [r5], #-787	; 0xfffffced
 64c:	2ae90100 	bcs	ffa40a54 <buffer+0xdfa3e7d0>
 650:	00000025 	andeq	r0, r0, r5, lsr #32
 654:	06659102 	strbteq	r9, [r5], -r2, lsl #2
 658:	00000305 	andeq	r0, r0, r5, lsl #6
 65c:	250dec01 	strcs	lr, [sp, #-3073]	; 0xfffff3ff
 660:	02000000 	andeq	r0, r0, #0
 664:	14006f91 	strne	r6, [r0], #-3985	; 0xfffff06f
 668:	00000382 	andeq	r0, r0, r2, lsl #7
 66c:	840dda01 	strhi	sp, [sp], #-2561	; 0xfffff5ff
 670:	68200009 	stmdavs	r0!, {r0, r3}
 674:	01000000 	mrseq	r0, (UNDEF: 0)
 678:	0002f19c 	muleq	r2, ip, r1
 67c:	098a0a00 	stmibeq	sl, {r9, fp}
 680:	00582000 	subseq	r2, r8, r0
 684:	35060000 	strcc	r0, [r6, #-0]
 688:	01000002 	tsteq	r0, r2
 68c:	002512db 	ldrdeq	r1, [r5], -fp	; <UNPREDICTABLE>
 690:	91020000 	mrsls	r0, (UNDEF: 2)
 694:	09ae0a77 	stmibeq	lr!, {r0, r1, r2, r4, r5, r6, r9, fp}
 698:	00222000 	eoreq	r2, r2, r0
 69c:	61100000 	tstvs	r0, r0
 6a0:	01006464 	tsteq	r0, r4, ror #8
 6a4:	002516de 	ldrdeq	r1, [r5], -lr	; <UNPREDICTABLE>
 6a8:	91020000 	mrsls	r0, (UNDEF: 2)
 6ac:	00000076 	andeq	r0, r0, r6, ror r0
 6b0:	0002a815 	andeq	sl, r2, r5, lsl r8
 6b4:	0dca0100 	stfeqe	f0, [sl]
 6b8:	2000092e 	andcs	r0, r0, lr, lsr #18
 6bc:	00000056 	andeq	r0, r0, r6, asr r0
 6c0:	67169c01 	ldrvs	r9, [r6, -r1, lsl #24]
 6c4:	01000002 	tsteq	r0, r2
 6c8:	002510c5 	eoreq	r1, r5, r5, asr #1
 6cc:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
 6d0:	002a2000 	eoreq	r2, sl, r0
 6d4:	9c010000 	stcls	0, cr0, [r1], {-0}
 6d8:	0000032d 	andeq	r0, r0, sp, lsr #6
 6dc:	00025017 	andeq	r5, r2, r7, lsl r0
 6e0:	2ac50100 	bcs	ff140ae8 <buffer+0xdf13e864>
 6e4:	00000025 	andeq	r0, r0, r5, lsr #32
 6e8:	00779102 	rsbseq	r9, r7, r2, lsl #2
 6ec:	00031818 	andeq	r1, r3, r8, lsl r8
 6f0:	0dbd0100 	ldfeqs	f0, [sp]
 6f4:	200008be 			; <UNDEFINED> instruction: 0x200008be
 6f8:	00000046 	andeq	r0, r0, r6, asr #32
 6fc:	03629c01 	cmneq	r2, #256	; 0x100
 700:	74170000 	ldrvc	r0, [r7], #-0
 704:	01000002 	tsteq	r0, r2
 708:	002528bd 	strhteq	r2, [r5], -sp
 70c:	91020000 	mrsls	r0, (UNDEF: 2)
 710:	02501777 	subseq	r1, r0, #31195136	; 0x1dc0000
 714:	bd010000 	stclt	0, cr0, [r1, #-0]
 718:	00002536 	andeq	r2, r0, r6, lsr r5
 71c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 720:	03c21800 	biceq	r1, r2, #0, 16
 724:	b5010000 	strlt	r0, [r1, #-0]
 728:	0008780d 	andeq	r7, r8, sp, lsl #16
 72c:	00004620 	andeq	r4, r0, r0, lsr #12
 730:	979c0100 	ldrls	r0, [ip, r0, lsl #2]
 734:	17000003 	strne	r0, [r0, -r3]
 738:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 73c:	252bb501 	strcs	fp, [fp, #-1281]!	; 0xfffffaff
 740:	02000000 	andeq	r0, r0, #0
 744:	50177791 	mulspl	r7, r1, r7
 748:	01000002 	tsteq	r0, r2
 74c:	00253cb5 	strhteq	r3, [r5], -r5
 750:	91020000 	mrsls	r0, (UNDEF: 2)
 754:	74180076 	ldrvc	r0, [r8], #-118	; 0xffffff8a
 758:	01000003 	tsteq	r0, r3
 75c:	08040da3 	stmdaeq	r4, {r0, r1, r5, r7, r8, sl, fp}
 760:	00742000 	rsbseq	r2, r4, r0
 764:	9c010000 	stcls	0, cr0, [r1], {-0}
 768:	000003cc 	andeq	r0, r0, ip, asr #7
 76c:	00024317 	andeq	r4, r2, r7, lsl r3
 770:	23a30100 			; <UNDEFINED> instruction: 0x23a30100
 774:	00000025 	andeq	r0, r0, r5, lsr #32
 778:	17779102 	ldrbne	r9, [r7, -r2, lsl #2]!
 77c:	00000250 	andeq	r0, r0, r0, asr r2
 780:	2532a301 	ldrcs	sl, [r2, #-769]!	; 0xfffffcff
 784:	02000000 	andeq	r0, r0, #0
 788:	16007691 			; <UNDEFINED> instruction: 0x16007691
 78c:	000003a3 	andeq	r0, r0, r3, lsr #7
 790:	25109001 	ldrcs	r9, [r0, #-1]
 794:	74000000 	strvc	r0, [r0], #-0
 798:	90200007 	eorls	r0, r0, r7
 79c:	01000000 	mrseq	r0, (UNDEF: 0)
 7a0:	0004049c 	muleq	r4, ip, r4
 7a4:	02501700 	subseq	r1, r0, #0, 14
 7a8:	90010000 	andls	r0, r1, r0
 7ac:	00002525 	andeq	r2, r0, r5, lsr #10
 7b0:	6f910200 	svcvs	0x00910200
 7b4:	00767210 	rsbseq	r7, r6, r0, lsl r2
 7b8:	250d9901 	strcs	r9, [sp, #-2305]	; 0xfffff6ff
 7bc:	02000000 	andeq	r0, r0, #0
 7c0:	18007791 	stmdane	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
 7c4:	00000290 	muleq	r0, r0, r2
 7c8:	040d7a01 	streq	r7, [sp], #-2561	; 0xfffff5ff
 7cc:	70200007 	eorvc	r0, r0, r7
 7d0:	01000000 	mrseq	r0, (UNDEF: 0)
 7d4:	0004349c 	muleq	r4, ip, r4
 7d8:	07260a00 	streq	r0, [r6, -r0, lsl #20]!
 7dc:	002a2000 	eoreq	r2, sl, r0
 7e0:	a3060000 	movwge	r0, #24576	; 0x6000
 7e4:	01000002 	tsteq	r0, r2
 7e8:	00251186 	eoreq	r1, r5, r6, lsl #3
 7ec:	91020000 	mrsls	r0, (UNDEF: 2)
 7f0:	19000077 	stmdbne	r0, {r0, r1, r2, r4, r5, r6}
 7f4:	00000249 	andeq	r0, r0, r9, asr #4
 7f8:	9c0d6f01 	stcls	15, cr6, [sp], {1}
 7fc:	68200006 	stmdavs	r0!, {r1, r2}
 800:	01000000 	mrseq	r0, (UNDEF: 0)
 804:	0004769c 	muleq	r4, ip, r6
 808:	02501700 	subseq	r1, r0, #0, 14
 80c:	6f010000 	svcvs	0x00010000
 810:	00002527 	andeq	r2, r0, r7, lsr #10
 814:	6f910200 	svcvs	0x00910200
 818:	00030506 	andeq	r0, r3, r6, lsl #10
 81c:	0d700100 	ldfeqe	f0, [r0, #-0]
 820:	00000025 	andeq	r0, r0, r5, lsr #32
 824:	10779102 	rsbsne	r9, r7, r2, lsl #2
 828:	73010063 	movwvc	r0, #4195	; 0x1063
 82c:	0000250d 	andeq	r2, r0, sp, lsl #10
 830:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 834:	02bb1900 	adcseq	r1, fp, #0, 18
 838:	67010000 	strvs	r0, [r1, -r0]
 83c:	00064c0d 	andeq	r4, r6, sp, lsl #24
 840:	00005020 	andeq	r5, r0, r0, lsr #32
 844:	a79c0100 	ldrge	r0, [ip, r0, lsl #2]
 848:	13000004 	movwne	r0, #4
 84c:	67010078 	smlsdxvs	r1, r8, r0, r0
 850:	0000252c 	andeq	r2, r0, ip, lsr #10
 854:	6f910200 	svcvs	0x00910200
 858:	01006310 	tsteq	r0, r0, lsl r3
 85c:	00250d68 	eoreq	r0, r5, r8, ror #26
 860:	91020000 	mrsls	r0, (UNDEF: 2)
 864:	d2190077 	andsle	r0, r9, #119	; 0x77
 868:	01000002 	tsteq	r0, r2
 86c:	05fa0d5f 	ldrbeq	r0, [sl, #3423]!	; 0xd5f
 870:	00522000 	subseq	r2, r2, r0
 874:	9c010000 	stcls	0, cr0, [r1], {-0}
 878:	000004d8 	ldrdeq	r0, [r0], -r8
 87c:	01007813 	tsteq	r0, r3, lsl r8
 880:	00252a5f 	eoreq	r2, r5, pc, asr sl
 884:	91020000 	mrsls	r0, (UNDEF: 2)
 888:	0063106f 	rsbeq	r1, r3, pc, rrx
 88c:	250d6001 	strcs	r6, [sp, #-1]
 890:	02000000 	andeq	r0, r0, #0
 894:	1a007791 	bne	1e6e0 <startup-0x1ffe1920>
 898:	000001c0 	andeq	r0, r0, r0, asr #3
 89c:	cc065201 	sfmgt	f5, 4, [r6], {1}
 8a0:	2e200005 	cdpcs	0, 2, cr0, cr0, cr5, {0}
 8a4:	01000000 	mrseq	r0, (UNDEF: 0)
 8a8:	0004fd9c 	muleq	r4, ip, sp
 8ac:	736d1300 	cmnvc	sp, #0, 6
 8b0:	1f520100 	svcne	0x00520100
 8b4:	0000004e 	andeq	r0, r0, lr, asr #32
 8b8:	00749102 	rsbseq	r9, r4, r2, lsl #2
 8bc:	0002e71a 	andeq	lr, r2, sl, lsl r7
 8c0:	06430100 	strbeq	r0, [r3], -r0, lsl #2
 8c4:	2000058e 	andcs	r0, r0, lr, lsl #11
 8c8:	0000003e 	andeq	r0, r0, lr, lsr r0
 8cc:	05229c01 	streq	r9, [r2, #-3073]!	; 0xfffff3ff
 8d0:	75130000 	ldrvc	r0, [r3, #-0]
 8d4:	43010073 	movwmi	r0, #4211	; 0x1073
 8d8:	00004e1f 	andeq	r4, r0, pc, lsl lr
 8dc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 8e0:	027f1b00 	rsbseq	r1, pc, #0, 22
 8e4:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
 8e8:	00057c0d 	andeq	r7, r5, sp, lsl #24
 8ec:	00001220 	andeq	r1, r0, r0, lsr #4
 8f0:	1c9c0100 	ldfnes	f0, [ip], {0}
 8f4:	000002f3 	strdeq	r0, [r0], -r3
 8f8:	380d3501 	stmdacc	sp, {r0, r8, sl, ip, sp}
 8fc:	44200005 	strtmi	r0, [r0], #-5
 900:	01000000 	mrseq	r0, (UNDEF: 0)
 904:	Address 0x00000904 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	13490b39 	movtne	r0, #39737	; 0x9b39
  20:	24030000 	strcs	r0, [r3], #-0
  24:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  28:	000e030b 	andeq	r0, lr, fp, lsl #6
  2c:	01010400 	tsteq	r1, r0, lsl #8
  30:	13011349 	movwne	r1, #4937	; 0x1349
  34:	21050000 	mrscs	r0, (UNDEF: 5)
  38:	2f134900 	svccs	0x00134900
  3c:	0600000b 	streq	r0, [r0], -fp
  40:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  44:	0b3b0b3a 	bleq	ec2d34 <startup-0x1f13d2cc>
  48:	13490b39 	movtne	r0, #39737	; 0x9b39
  4c:	00001802 	andeq	r1, r0, r2, lsl #16
  50:	03011307 	movweq	r1, #4871	; 0x1307
  54:	3a0b0b0e 	bcc	2c2c94 <startup-0x1fd3d36c>
  58:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  5c:	0013010b 	andseq	r0, r3, fp, lsl #2
  60:	000d0800 	andeq	r0, sp, r0, lsl #16
  64:	0b3a0803 	bleq	e82078 <startup-0x1f17df88>
  68:	0b390b3b 	bleq	e42d5c <startup-0x1f1bd2a4>
  6c:	0b381349 	bleq	e04d98 <startup-0x1f1fb268>
  70:	0d090000 	stceq	0, cr0, [r9, #-0]
  74:	3a0e0300 	bcc	380c7c <startup-0x1fc7f384>
  78:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  7c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  80:	0a00000b 	beq	b4 <startup-0x1fffff4c>
  84:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
  88:	00001301 	andeq	r1, r0, r1, lsl #6
  8c:	4900050b 	stmdbmi	r0, {r0, r1, r3, r8, sl}
  90:	0c000013 	stceq	0, cr0, [r0], {19}
  94:	0b0b000f 	bleq	2c00d8 <startup-0x1fd3ff28>
  98:	00001349 	andeq	r1, r0, r9, asr #6
  9c:	3f012e0d 	svccc	0x00012e0d
  a0:	3a0e0319 	bcc	380d0c <startup-0x1fc7f2f4>
  a4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  a8:	1119270b 	tstne	r9, fp, lsl #14
  ac:	40061201 	andmi	r1, r6, r1, lsl #4
  b0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  b4:	00001301 	andeq	r1, r0, r1, lsl #6
  b8:	11010b0e 	tstne	r1, lr, lsl #22
  bc:	00061201 	andeq	r1, r6, r1, lsl #4
  c0:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
  c4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  c8:	0b3b0b3a 	bleq	ec2db8 <startup-0x1f13d248>
  cc:	13490b39 	movtne	r0, #39737	; 0x9b39
  d0:	1301193c 	movwne	r1, #6460	; 0x193c
  d4:	18100000 	ldmdane	r0, {}	; <UNPREDICTABLE>
  d8:	11000000 	mrsne	r0, (UNDEF: 0)
  dc:	0111010b 	tsteq	r1, fp, lsl #2
  e0:	13010612 	movwne	r0, #5650	; 0x1612
  e4:	34120000 	ldrcc	r0, [r2], #-0
  e8:	3a080300 	bcc	200cf0 <startup-0x1fdff310>
  ec:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  f0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  f4:	13000018 	movwne	r0, #24
  f8:	0b0b0024 	bleq	2c0190 <startup-0x1fd3fe70>
  fc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 100:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
 104:	03193f01 	tsteq	r9, #1, 30
 108:	3b0b3a0e 	blcc	2ce948 <startup-0x1fd316b8>
 10c:	110b390b 	tstne	fp, fp, lsl #18
 110:	40061201 	andmi	r1, r6, r1, lsl #4
 114:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 118:	00001301 	andeq	r1, r0, r1, lsl #6
 11c:	03000515 	movweq	r0, #1301	; 0x515
 120:	3b0b3a0e 	blcc	2ce960 <startup-0x1fd316a0>
 124:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 128:	00180213 	andseq	r0, r8, r3, lsl r2
 12c:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
 130:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 134:	0b3b0b3a 	bleq	ec2e24 <startup-0x1f13d1dc>
 138:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 13c:	01111349 	tsteq	r1, r9, asr #6
 140:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 144:	01194296 			; <UNDEFINED> instruction: 0x01194296
 148:	17000013 	smladne	r0, r3, r0, r0
 14c:	08030005 	stmdaeq	r3, {r0, r2}
 150:	0b3b0b3a 	bleq	ec2e40 <startup-0x1f13d1c0>
 154:	13490b39 	movtne	r0, #39737	; 0x9b39
 158:	00001802 	andeq	r1, r0, r2, lsl #16
 15c:	3f002e18 	svccc	0x00002e18
 160:	3a0e0319 	bcc	380dcc <startup-0x1fc7f234>
 164:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 168:	1119270b 	tstne	r9, fp, lsl #14
 16c:	40061201 	andmi	r1, r6, r1, lsl #4
 170:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 174:	01000000 	mrseq	r0, (UNDEF: 0)
 178:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 17c:	0e030b13 	vmoveq.32	d3[0], r0
 180:	01110e1b 	tsteq	r1, fp, lsl lr
 184:	17100612 			; <UNDEFINED> instruction: 0x17100612
 188:	16020000 	strne	r0, [r2], -r0
 18c:	3a0e0300 	bcc	380d94 <startup-0x1fc7f26c>
 190:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 194:	0013490b 	andseq	r4, r3, fp, lsl #18
 198:	00240300 	eoreq	r0, r4, r0, lsl #6
 19c:	0b3e0b0b 	bleq	f82dd0 <startup-0x1f07d230>
 1a0:	00000e03 	andeq	r0, r0, r3, lsl #28
 1a4:	49010104 	stmdbmi	r1, {r2, r8}
 1a8:	00130113 	andseq	r0, r3, r3, lsl r1
 1ac:	00210500 	eoreq	r0, r1, r0, lsl #10
 1b0:	0b2f1349 	bleq	bc4edc <startup-0x1f43b124>
 1b4:	34060000 	strcc	r0, [r6], #-0
 1b8:	3a0e0300 	bcc	380dc0 <startup-0x1fc7f240>
 1bc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1c0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 1c4:	07000018 	smladeq	r0, r8, r0, r0
 1c8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 1cc:	0b3a0e03 	bleq	e839e0 <startup-0x1f17c620>
 1d0:	0b39053b 	bleq	e416c4 <startup-0x1f1be93c>
 1d4:	01111927 	tsteq	r1, r7, lsr #18
 1d8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1dc:	01194297 			; <UNDEFINED> instruction: 0x01194297
 1e0:	08000013 	stmdaeq	r0, {r0, r1, r4}
 1e4:	08030005 	stmdaeq	r3, {r0, r2}
 1e8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 1ec:	13490b39 	movtne	r0, #39737	; 0x9b39
 1f0:	00001802 	andeq	r1, r0, r2, lsl #16
 1f4:	03003409 	movweq	r3, #1033	; 0x409
 1f8:	3b0b3a08 	blcc	2cea20 <startup-0x1fd315e0>
 1fc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 200:	00180213 	andseq	r0, r8, r3, lsl r2
 204:	010b0a00 	tsteq	fp, r0, lsl #20
 208:	06120111 			; <UNDEFINED> instruction: 0x06120111
 20c:	340b0000 	strcc	r0, [fp], #-0
 210:	3a0e0300 	bcc	380e18 <startup-0x1fc7f1e8>
 214:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 218:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 21c:	0c000018 	stceq	0, cr0, [r0], {24}
 220:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 224:	0b3a0e03 	bleq	e83a38 <startup-0x1f17c5c8>
 228:	0b39053b 	bleq	e4171c <startup-0x1f1be8e4>
 22c:	13491927 	movtne	r1, #39207	; 0x9927
 230:	06120111 			; <UNDEFINED> instruction: 0x06120111
 234:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 238:	00130119 	andseq	r0, r3, r9, lsl r1
 23c:	002e0d00 	eoreq	r0, lr, r0, lsl #26
 240:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 244:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 248:	01110b39 	tsteq	r1, r9, lsr fp
 24c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 250:	00194296 	mulseq	r9, r6, r2
 254:	012e0e00 			; <UNDEFINED> instruction: 0x012e0e00
 258:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 25c:	0b3b0b3a 	bleq	ec2f4c <startup-0x1f13d0b4>
 260:	01110b39 	tsteq	r1, r9, lsr fp
 264:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 268:	01194296 			; <UNDEFINED> instruction: 0x01194296
 26c:	0f000013 	svceq	0x00000013
 270:	0111010b 	tsteq	r1, fp, lsl #2
 274:	13010612 	movwne	r0, #5650	; 0x1612
 278:	34100000 	ldrcc	r0, [r0], #-0
 27c:	3a080300 	bcc	200e84 <startup-0x1fdff17c>
 280:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 284:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 288:	11000018 	tstne	r0, r8, lsl r0
 28c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 290:	0b3a0e03 	bleq	e83aa4 <startup-0x1f17c55c>
 294:	0b390b3b 	bleq	e42f88 <startup-0x1f1bd078>
 298:	06120111 			; <UNDEFINED> instruction: 0x06120111
 29c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 2a0:	00130119 	andseq	r0, r3, r9, lsl r1
 2a4:	012e1200 			; <UNDEFINED> instruction: 0x012e1200
 2a8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2ac:	0b3b0b3a 	bleq	ec2f9c <startup-0x1f13d064>
 2b0:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 2b4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2b8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 2bc:	00130119 	andseq	r0, r3, r9, lsl r1
 2c0:	00051300 	andeq	r1, r5, r0, lsl #6
 2c4:	0b3a0803 	bleq	e822d8 <startup-0x1f17dd28>
 2c8:	0b390b3b 	bleq	e42fbc <startup-0x1f1bd044>
 2cc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 2d0:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
 2d4:	3a0e0301 	bcc	380ee0 <startup-0x1fc7f120>
 2d8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2dc:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 2e0:	96184006 	ldrls	r4, [r8], -r6
 2e4:	13011942 	movwne	r1, #6466	; 0x1942
 2e8:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
 2ec:	3a0e0300 	bcc	380ef4 <startup-0x1fc7f10c>
 2f0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2f4:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 2f8:	96184006 	ldrls	r4, [r8], -r6
 2fc:	00001942 	andeq	r1, r0, r2, asr #18
 300:	03012e16 	movweq	r2, #7702	; 0x1e16
 304:	3b0b3a0e 	blcc	2ceb44 <startup-0x1fd314bc>
 308:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 30c:	11134919 	tstne	r3, r9, lsl r9
 310:	40061201 	andmi	r1, r6, r1, lsl #4
 314:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 318:	00001301 	andeq	r1, r0, r1, lsl #6
 31c:	03000517 	movweq	r0, #1303	; 0x517
 320:	3b0b3a0e 	blcc	2ceb60 <startup-0x1fd314a0>
 324:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 328:	00180213 	andseq	r0, r8, r3, lsl r2
 32c:	012e1800 			; <UNDEFINED> instruction: 0x012e1800
 330:	0b3a0e03 	bleq	e83b44 <startup-0x1f17c4bc>
 334:	0b390b3b 	bleq	e43028 <startup-0x1f1bcfd8>
 338:	01111927 	tsteq	r1, r7, lsr #18
 33c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 340:	01194296 			; <UNDEFINED> instruction: 0x01194296
 344:	19000013 	stmdbne	r0, {r0, r1, r4}
 348:	0e03012e 	adfeqsp	f0, f3, #0.5
 34c:	0b3b0b3a 	bleq	ec303c <startup-0x1f13cfc4>
 350:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 354:	06120111 			; <UNDEFINED> instruction: 0x06120111
 358:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 35c:	00130119 	andseq	r0, r3, r9, lsl r1
 360:	012e1a00 			; <UNDEFINED> instruction: 0x012e1a00
 364:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 368:	0b3b0b3a 	bleq	ec3058 <startup-0x1f13cfa8>
 36c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 370:	06120111 			; <UNDEFINED> instruction: 0x06120111
 374:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 378:	00130119 	andseq	r0, r3, r9, lsl r1
 37c:	002e1b00 	eoreq	r1, lr, r0, lsl #22
 380:	0b3a0e03 	bleq	e83b94 <startup-0x1f17c46c>
 384:	0b390b3b 	bleq	e43078 <startup-0x1f1bcf88>
 388:	01111927 	tsteq	r1, r7, lsr #18
 38c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 390:	00194296 	mulseq	r9, r6, r2
 394:	002e1c00 	eoreq	r1, lr, r0, lsl #24
 398:	0b3a0e03 	bleq	e83bac <startup-0x1f17c454>
 39c:	0b390b3b 	bleq	e43090 <startup-0x1f1bcf70>
 3a0:	01111927 	tsteq	r1, r7, lsr #18
 3a4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 3a8:	00194297 	mulseq	r9, r7, r2
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000528 	andeq	r0, r0, r8, lsr #10
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	03bf0002 			; <UNDEFINED> instruction: 0x03bf0002
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000538 	andcs	r0, r0, r8, lsr r5
  3c:	00000900 	andeq	r0, r0, r0, lsl #18
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000538 	andcs	r0, r0, r8, lsr r5
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0000025b 	andeq	r0, r0, fp, asr r2
   4:	00670003 	rsbeq	r0, r7, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	6b697245 	blvs	1a5c940 <startup-0x1e5a36c0>
  28:	6e6f7373 	mcrvs	3, 3, r7, cr15, cr3, {3}
  2c:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
  30:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
  34:	432f7374 			; <UNDEFINED> instruction: 0x432f7374
  38:	6d6c6168 	stfvse	f6, [ip, #-416]!	; 0xfffffe60
  3c:	2f737265 	svccs	0x00737265
  40:	2f504f4d 	svccs	0x00504f4d
  44:	64696f42 	strbtvs	r6, [r9], #-3906	; 0xfffff0be
  48:	69532d73 	ldmdbvs	r3, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
  4c:	616c756d 	cmnvs	ip, sp, ror #10
  50:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
  54:	74730000 	ldrbtvc	r0, [r3], #-0
  58:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  5c:	00632e70 	rsbeq	r2, r3, r0, ror lr
  60:	64000001 	strvs	r0, [r0], #-1
  64:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
  68:	682e7372 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}
  6c:	00000100 	andeq	r0, r0, r0, lsl #2
  70:	00010500 	andeq	r0, r1, r0, lsl #10
  74:	00000205 	andeq	r0, r0, r5, lsl #4
  78:	13162000 	tstne	r6, #0
  7c:	212f2121 			; <UNDEFINED> instruction: 0x212f2121
  80:	01000302 	tsteq	r0, r2, lsl #6
  84:	002d0501 	eoreq	r0, sp, r1, lsl #10
  88:	00100205 	andseq	r0, r0, r5, lsl #4
  8c:	1b032000 	blne	c8094 <startup-0x1ff37f6c>
  90:	59130501 	ldmdbpl	r3, {r0, r8, sl}
  94:	052e1c05 	streq	r1, [lr, #-3077]!	; 0xfffff3fb
  98:	13052e0b 	movwne	r2, #24075	; 0x5e0b
  9c:	2e1c0567 	cfmsc32cs	mvfx0, mvfx12, mvfx7
  a0:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
  a4:	1405670f 	strne	r6, [r5], #-1807	; 0xfffff8f1
  a8:	58190558 	ldmdapl	r9, {r3, r4, r6, r8, sl}
  ac:	05590105 	ldrbeq	r0, [r9, #-261]	; 0xfffffefb
  b0:	19054f17 	stmdbne	r5, {r0, r1, r2, r4, r8, r9, sl, fp, lr}
  b4:	2e05054b 	cfsh32cs	mvfx0, mvfx5, #43
  b8:	05582c05 	ldrbeq	r2, [r8, #-3077]	; 0xfffff3fb
  bc:	01052e05 	tsteq	r5, r5, lsl #28
  c0:	4c1c059f 	cfldr32mi	mvfx0, [ip], {159}	; 0x9f
  c4:	054b0d05 	strbeq	r0, [fp, #-3333]	; 0xfffff2fb
  c8:	0d052e14 	stceq	14, cr2, [r5, #-80]	; 0xffffffb0
  cc:	1405832e 	strne	r8, [r5], #-814	; 0xfffffcd2
  d0:	2e0d052e 	cfsh32cs	mvfx0, mvfx13, #30
  d4:	05830105 	streq	r0, [r3, #261]	; 0x105
  d8:	09054c1c 	stmdbeq	r5, {r2, r3, r4, sl, fp, lr}
  dc:	2f0b054b 	svccs	0x000b054b
  e0:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
  e4:	18052f0b 	stmdane	r5, {r0, r1, r3, r8, r9, sl, fp, sp}
  e8:	2f0b052e 	svccs	0x000b052e
  ec:	052e1d05 	streq	r1, [lr, #-3333]!	; 0xfffff2fb
  f0:	0505300e 	streq	r3, [r5, #-14]
  f4:	210f052e 	tstcs	pc, lr, lsr #10
  f8:	05831a05 	streq	r1, [r3, #2565]	; 0xa05
  fc:	0577830c 	ldrbeq	r8, [r7, #-780]!	; 0xfffffcf4
 100:	19054d14 	stmdbne	r5, {r2, r4, r8, sl, fp, lr}
 104:	2e11053f 	mrccs	5, 0, r0, cr1, cr15, {1}
 108:	05671905 	strbeq	r1, [r7, #-2309]!	; 0xfffff6fb
 10c:	19052e11 	stmdbne	r5, {r0, r4, r9, sl, fp, sp}
 110:	2e110569 	cfmsc32cs	mvfx0, mvfx1, mvfx9
 114:	05671905 	strbeq	r1, [r7, #-2309]!	; 0xfffff6fb
 118:	1e052e11 	mcrne	14, 0, r2, cr5, cr1, {0}
 11c:	2e290569 	cfsh64cs	mvdx0, mvdx9, #57
 120:	052e2205 	streq	r2, [lr, #-517]!	; 0xfffffdfb
 124:	1605582e 	strne	r5, [r5], -lr, lsr #16
 128:	671e0558 			; <UNDEFINED> instruction: 0x671e0558
 12c:	052e2905 	streq	r2, [lr, #-2309]!	; 0xfffff6fb
 130:	2e052e22 	cdpcs	14, 0, cr2, cr5, cr2, {1}
 134:	58160558 	ldmdapl	r6, {r3, r4, r6, r8, sl}
 138:	6f030d05 	svcvs	0x00030d05
 13c:	26053174 			; <UNDEFINED> instruction: 0x26053174
 140:	02040200 	andeq	r0, r4, #0, 4
 144:	05207903 	streq	r7, [r0, #-2307]!	; 0xfffff6fd
 148:	04020005 	streq	r0, [r2], #-5
 14c:	1d053c01 	stcne	12, cr3, [r5, #-4]
 150:	053c1903 	ldreq	r1, [ip, #-2307]!	; 0xfffff6fd
 154:	1d054a0b 	vstrne	s8, [r5, #-44]	; 0xffffffd4
 158:	4a0b0567 	bmi	2c16fc <startup-0x1fd3e904>
 15c:	05682605 	strbeq	r2, [r8, #-1541]!	; 0xfffff9fb
 160:	26052e0b 	strcs	r2, [r5], -fp, lsl #28
 164:	2e0b0567 	cfsh32cs	mvfx0, mvfx11, #55
 168:	05691d05 	strbeq	r1, [r9, #-3333]!	; 0xfffff2fb
 16c:	1d054a0b 	vstrne	s8, [r5, #-44]	; 0xffffffd4
 170:	4a0b0567 	bmi	2c1714 <startup-0x1fd3e8ec>
 174:	05682705 	strbeq	r2, [r8, #-1797]!	; 0xfffff8fb
 178:	27052e0b 	strcs	r2, [r5, -fp, lsl #28]
 17c:	2e0b0567 	cfsh32cs	mvfx0, mvfx11, #55
 180:	05691005 	strbeq	r1, [r9, #-5]!
 184:	3f057420 	svccc	0x00057420
 188:	903205ac 	eorsls	r0, r2, ip, lsr #11
 18c:	05825d05 	streq	r5, [r2, #3333]	; 0xd05
 190:	1005904f 	andne	r9, r5, pc, asr #32
 194:	2005c966 	andcs	ip, r5, r6, ror #18
 198:	ac3f0574 	cfldr32ge	mvfx0, [pc], #-464	; ffffffd0 <buffer+0xdfffdd4c>
 19c:	05903205 	ldreq	r3, [r0, #517]	; 0x205
 1a0:	4f05825d 	svcmi	0x0005825d
 1a4:	66100590 			; <UNDEFINED> instruction: 0x66100590
 1a8:	05c90105 	strbeq	r0, [r9, #261]	; 0x105
 1ac:	0e05d814 	mcreq	8, 0, sp, cr5, cr4, {0}
 1b0:	2e05053d 	mcrcs	5, 0, r0, cr5, cr13, {1}
 1b4:	02001405 	andeq	r1, r0, #83886080	; 0x5000000
 1b8:	05220304 	streq	r0, [r2, #-772]!	; 0xfffffcfc
 1bc:	0402001a 	streq	r0, [r2], #-26	; 0xffffffe6
 1c0:	1205ac03 	andne	sl, r5, #768	; 0x300
 1c4:	03040200 	movweq	r0, #16896	; 0x4200
 1c8:	0026059d 	mlaeq	r6, sp, r5, r0
 1cc:	02030402 	andeq	r0, r3, #33554432	; 0x2000000
 1d0:	05051143 	streq	r1, [r5, #-323]	; 0xfffffebd
 1d4:	01040200 	mrseq	r0, R12_usr
 1d8:	0301053c 	movweq	r0, #5436	; 0x153c
 1dc:	11053c0b 	tstne	r5, fp, lsl #24
 1e0:	02053f08 	andeq	r3, r5, #8, 30
 1e4:	05302f3d 	ldreq	r2, [r0, #-3901]!	; 0xfffff0c3
 1e8:	12053105 	andne	r3, r5, #1073741825	; 0x40000001
 1ec:	2e090532 	mcrcs	5, 0, r0, cr9, cr2, {1}
 1f0:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
 1f4:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 1f8:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
 1fc:	0d059003 	stceq	0, cr9, [r5, #-12]
 200:	03040200 	movweq	r0, #16896	; 0x4200
 204:	002a0574 	eoreq	r0, sl, r4, ror r5
 208:	2d030402 	cfstrscs	mvf0, [r3, #-8]
 20c:	02000905 	andeq	r0, r0, #81920	; 0x14000
 210:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 214:	09053f12 	stmdbeq	r5, {r1, r4, r8, r9, sl, fp, ip, sp}
 218:	0015052e 	andseq	r0, r5, lr, lsr #10
 21c:	21030402 	tstcs	r3, r2, lsl #8
 220:	02002005 	andeq	r2, r0, #5
 224:	05900304 	ldreq	r0, [r0, #772]	; 0x304
 228:	0402000d 	streq	r0, [r2], #-13
 22c:	15057403 	strne	r7, [r5, #-1027]	; 0xfffffbfd
 230:	03040200 	movweq	r0, #16896	; 0x4200
 234:	001b052f 	andseq	r0, fp, pc, lsr #10
 238:	90030402 	andls	r0, r3, r2, lsl #8
 23c:	02000d05 	andeq	r0, r0, #320	; 0x140
 240:	05740304 	ldrbeq	r0, [r4, #-772]!	; 0xfffffcfc
 244:	0402002a 	streq	r0, [r2], #-42	; 0xffffffd6
 248:	09052c03 	stmdbeq	r5, {r0, r1, sl, fp, sp}
 24c:	01040200 	mrseq	r0, R12_usr
 250:	0305413c 	movweq	r4, #20796	; 0x513c
 254:	030f052f 	movweq	r0, #62767	; 0xf52f
 258:	04023c76 	streq	r3, [r2], #-3190	; 0xfffff38a
 25c:	0b010100 	bleq	40664 <startup-0x1ffbf99c>
 260:	03000004 	movweq	r0, #4
 264:	00006700 	andeq	r6, r0, r0, lsl #14
 268:	fb010200 	blx	40a72 <startup-0x1ffbf58e>
 26c:	01000d0e 	tsteq	r0, lr, lsl #26
 270:	00010101 	andeq	r0, r1, r1, lsl #2
 274:	00010000 	andeq	r0, r1, r0
 278:	3a430100 	bcc	10c0680 <startup-0x1ef3f980>
 27c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 280:	452f7372 	strmi	r7, [pc, #-882]!	; ffffff16 <buffer+0xdfffdc92>
 284:	736b6972 	cmnvc	fp, #1867776	; 0x1c8000
 288:	2f6e6f73 	svccs	0x006e6f73
 28c:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 290:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 294:	68432f73 	stmdavs	r3, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp}^
 298:	656d6c61 	strbvs	r6, [sp, #-3169]!	; 0xfffff39f
 29c:	4d2f7372 	stcmi	3, cr7, [pc, #-456]!	; dc <startup-0x1fffff24>
 2a0:	422f504f 	eormi	r5, pc, #79	; 0x4f
 2a4:	7364696f 	cmnvc	r4, #1818624	; 0x1bc000
 2a8:	6d69532d 	stclvs	3, cr5, [r9, #-180]!	; 0xffffff4c
 2ac:	74616c75 	strbtvc	r6, [r1], #-3189	; 0xfffff38b
 2b0:	006e6f69 	rsbeq	r6, lr, r9, ror #30
 2b4:	69726400 	ldmdbvs	r2!, {sl, sp, lr}^
 2b8:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 2bc:	0100632e 	tsteq	r0, lr, lsr #6
 2c0:	72640000 	rsbvc	r0, r4, #0
 2c4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 2c8:	00682e73 	rsbeq	r2, r8, r3, ror lr
 2cc:	00000001 	andeq	r0, r0, r1
 2d0:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
 2d4:	00053802 	andeq	r3, r5, r2, lsl #16
 2d8:	01340320 	teqeq	r4, r0, lsr #6
 2dc:	052f0505 	streq	r0, [pc, #-1285]!	; fffffddf <buffer+0xdfffdb5b>
 2e0:	0505200f 	streq	r2, [r5, #-15]
 2e4:	200f052f 	andcs	r0, pc, pc, lsr #10
 2e8:	052f0505 	streq	r0, [pc, #-1285]!	; fffffdeb <buffer+0xdfffdb67>
 2ec:	0505200e 	streq	r2, [r5, #-14]
 2f0:	200f052f 	andcs	r0, pc, pc, lsr #10
 2f4:	052f0a05 	streq	r0, [pc, #-2565]!	; fffff8f7 <buffer+0xdfffd673>
 2f8:	0402000c 	streq	r0, [r2], #-12
 2fc:	16052001 	strne	r2, [r5], -r1
 300:	01040200 	mrseq	r0, R12_usr
 304:	000a052e 	andeq	r0, sl, lr, lsr #10
 308:	3c010402 	cfstrscc	mvf0, [r1], {2}
 30c:	05210505 	streq	r0, [r1, #-1285]!	; 0xfffffafb
 310:	0105200f 	tsteq	r5, pc
 314:	a01f052f 	andsge	r0, pc, pc, lsr #10
 318:	2f2f0505 	svccs	0x002f0505
 31c:	052f0105 	streq	r0, [pc, #-261]!	; 21f <startup-0x1ffffde1>
 320:	0c053e23 	stceq	14, cr3, [r5], {35}	; 0x23
 324:	5910054c 	ldmdbpl	r0, {r2, r3, r6, r8, sl}
 328:	05310b05 	ldreq	r0, [r1, #-2821]!	; 0xfffff4fb
 32c:	2f2f2109 	svccs	0x002f2109
 330:	2f0b052f 	svccs	0x000b052f
 334:	43010537 	movwmi	r0, #5431	; 0x1537
 338:	055a2305 	ldrbeq	r2, [sl, #-773]	; 0xfffffcfb
 33c:	0b054c0c 	bleq	153374 <startup-0x1feacc8c>
 340:	21090530 	tstcs	r9, r0, lsr r5
 344:	3a590b05 	bcc	1642f60 <startup-0x1e9bd0a0>
 348:	05400105 	strbeq	r0, [r0, #-261]	; 0xfffffefb
 34c:	09055d2d 	stmdbeq	r5, {r0, r2, r3, r5, r8, sl, fp, ip, lr}
 350:	20070568 	andcs	r0, r7, r8, ror #10
 354:	6715054b 	ldrvs	r0, [r5, -fp, asr #10]
 358:	05660705 	strbeq	r0, [r6, #-1797]!	; 0xfffff8fb
 35c:	11057505 	tstne	r5, r5, lsl #10
 360:	3d010520 	cfstr32cc	mvfx0, [r1, #-128]	; 0xffffff80
 364:	05762f05 	ldrbeq	r2, [r6, #-3845]!	; 0xfffff0fb
 368:	07056809 	streq	r6, [r5, -r9, lsl #16]
 36c:	05674b20 	strbeq	r4, [r7, #-2848]!	; 0xfffff4e0
 370:	1105bb05 	tstne	r5, r5, lsl #22
 374:	3d010520 	cfstr32cc	mvfx0, [r1, #-128]	; 0xffffff80
 378:	05763305 	ldrbeq	r3, [r6, #-773]!	; 0xfffffcfb
 37c:	1005670d 	andne	r6, r5, sp, lsl #14
 380:	7709054b 	strvc	r0, [r9, -fp, asr #10]
 384:	4b200705 	blmi	801fa0 <startup-0x1f7fe060>
 388:	830505bb 	movwhi	r0, #21947	; 0x55bb
 38c:	05201105 	streq	r1, [r0, #-261]!	; 0xfffffefb
 390:	26053d01 	strcs	r3, [r5], -r1, lsl #26
 394:	3d050568 	cfstr32cc	mvfx0, [r5, #-416]	; 0xfffffe60
 398:	2010053d 	andscs	r0, r0, sp, lsr r5
 39c:	3d2f0505 	cfstr32cc	mvfx0, [pc, #-20]!	; 390 <startup-0x1ffffc70>
 3a0:	3109053d 	tstcc	r9, sp, lsr r5
 3a4:	053d2f3d 	ldreq	r2, [sp, #-3901]!	; 0xfffff0c3
 3a8:	11052f18 	tstne	r5, r8, lsl pc
 3ac:	3d0e0520 	cfstr32cc	mvfx0, [lr, #-128]	; 0xffffff80
 3b0:	05680d05 	strbeq	r0, [r8, #-3333]!	; 0xfffff2fb
 3b4:	053d2305 	ldreq	r2, [sp, #-773]!	; 0xfffffcfb
 3b8:	01052010 	tsteq	r5, r0, lsl r0
 3bc:	bc31052f 	cfldr32lt	mvfx0, [r1], #-188	; 0xffffff44
 3c0:	3d670505 	cfstr64cc	mvdx0, [r7, #-20]!	; 0xffffffec
 3c4:	05201005 	streq	r1, [r0, #-5]!
 3c8:	3d3d2f05 	ldccc	15, cr2, [sp, #-20]!	; 0xffffffec
 3cc:	053d2f59 	ldreq	r2, [sp, #-3929]!	; 0xfffff0a7
 3d0:	0d052f12 	stceq	15, cr2, [r5, #-72]	; 0xffffffb8
 3d4:	4b050520 	blmi	14185c <startup-0x1febe7a4>
 3d8:	2010053d 	andscs	r0, r0, sp, lsr r5
 3dc:	052f0805 	streq	r0, [pc, #-2053]!	; fffffbdf <buffer+0xdfffd95b>
 3e0:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
 3e4:	09054a01 	stmdbeq	r5, {r0, r9, fp, lr}
 3e8:	0c05594b 			; <UNDEFINED> instruction: 0x0c05594b
 3ec:	3d010530 	cfstr32cc	mvfx0, [r1, #-192]	; 0xffffff40
 3f0:	05ca3e05 	strbeq	r3, [sl, #3589]	; 0xe05
 3f4:	12059105 	andne	r9, r5, #1073741825	; 0x40000001
 3f8:	3d050520 	cfstr32cc	mvfx0, [r5, #-128]	; 0xffffff80
 3fc:	2f3d2f59 	svccs	0x003d2f59
 400:	053e0805 	ldreq	r0, [lr, #-2053]!	; 0xfffff7fb
 404:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
 408:	09054a01 	stmdbeq	r5, {r0, r9, fp, lr}
 40c:	0505594b 	streq	r5, [r5, #-2379]	; 0xfffff6b5
 410:	20120531 	andscs	r0, r2, r1, lsr r5
 414:	3d2f0505 	cfstr32cc	mvfx0, [pc, #-20]!	; 408 <startup-0x1ffffbf8>
 418:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 41c:	05056848 	streq	r6, [r5, #-2120]	; 0xfffff7b8
 420:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 424:	8301053d 	movwhi	r0, #5437	; 0x153d
 428:	054c4205 	strbeq	r4, [ip, #-517]	; 0xfffffdfb
 42c:	593d9105 	ldmdbpl	sp!, {r0, r2, r8, ip, pc}
 430:	01053d3d 	tsteq	r5, sp, lsr sp
 434:	4c360583 	cfldr32mi	mvfx0, [r6], #-524	; 0xfffffdf4
 438:	05670505 	strbeq	r0, [r7, #-1285]!	; 0xfffffafb
 43c:	0105590c 	tsteq	r5, ip, lsl #18
 440:	4c220567 	cfstr32mi	mvfx0, [r2], #-412	; 0xfffffe64
 444:	3d2f0505 	cfstr32cc	mvfx0, [pc, #-20]!	; 438 <startup-0x1ffffbc8>
 448:	3e3d3d3d 	mrccc	13, 1, r3, cr13, cr13, {1}
 44c:	4b4b4b4b 	blmi	12d3180 <startup-0x1ed2ce80>
 450:	3d01054c 	cfstr32cc	mvfx0, [r1, #-304]	; 0xfffffed0
 454:	053e2405 	ldreq	r2, [lr, #-1029]!	; 0xfffffbfb
 458:	05053d12 	streq	r3, [r5, #-3346]	; 0xfffff2ee
 45c:	2109053c 	tstcs	r9, ip, lsr r5
 460:	4b16059f 	blmi	581ae4 <startup-0x1fa7e51c>
 464:	053c0905 	ldreq	r0, [ip, #-2309]!	; 0xfffff6fb
 468:	0402000d 	streq	r0, [r2], #-13
 46c:	2c052103 	stfcss	f2, [r5], {3}
 470:	03040200 	movweq	r0, #16896	; 0x4200
 474:	00090549 	andeq	r0, r9, r9, asr #10
 478:	58010402 	stmdapl	r1, {r1, sl}
 47c:	02002a05 	andeq	r2, r0, #20480	; 0x5000
 480:	05470204 	strbeq	r0, [r7, #-516]	; 0xfffffdfc
 484:	04020005 	streq	r0, [r2], #-5
 488:	01055801 	tsteq	r5, r1, lsl #16
 48c:	5f2f0551 	svcpl	0x002f0551
 490:	05e50705 	strbeq	r0, [r5, #1797]!	; 0x705
 494:	0c053c05 	stceq	12, cr3, [r5], {5}
 498:	02040200 	andeq	r0, r4, #0, 4
 49c:	4c1c052e 	cfldr32mi	mvfx0, [ip], {46}	; 0x2e
 4a0:	054a1605 	strbeq	r1, [sl, #-1541]	; 0xfffff9fb
 4a4:	05052e0d 	streq	r2, [r5, #-3597]	; 0xfffff1f3
 4a8:	4b12053e 	blmi	4819a8 <startup-0x1fb7e658>
 4ac:	15057608 	strne	r7, [r5, #-1544]	; 0xfffff9f8
 4b0:	c8087903 	stmdagt	r8, {r0, r1, r8, fp, ip, sp, lr}
 4b4:	09030105 	stmdbeq	r3, {r0, r2, r8}
 4b8:	68150520 	ldmdavs	r5, {r5, r8, sl}
 4bc:	053d0f05 	ldreq	r0, [sp, #-3845]!	; 0xfffff0fb
 4c0:	10053c02 	andne	r3, r5, r2, lsl #24
 4c4:	3c030521 	cfstr32cc	mvfx0, [r3], {33}	; 0x21
 4c8:	02000d05 	andeq	r0, r0, #320	; 0x140
 4cc:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 4d0:	04020011 	streq	r0, [r2], #-17	; 0xffffffef
 4d4:	1f054a03 	svcne	0x00054a03
 4d8:	03040200 	movweq	r0, #16896	; 0x4200
 4dc:	00180557 	andseq	r0, r8, r7, asr r5
 4e0:	58010402 	stmdapl	r1, {r1, sl}
 4e4:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 4e8:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 4ec:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
 4f0:	02052d02 	andeq	r2, r5, #2, 26	; 0x80
 4f4:	01040200 	mrseq	r0, R12_usr
 4f8:	4f010558 	svcmi	0x00010558
 4fc:	05761405 	ldrbeq	r1, [r6, #-1029]!	; 0xfffffbfb
 500:	02053d0f 	andeq	r3, r5, #960	; 0x3c0
 504:	2110053c 	tstcs	r0, ip, lsr r5
 508:	053c0305 	ldreq	r0, [ip, #-773]!	; 0xfffffcfb
 50c:	04020004 	streq	r0, [r2], #-4
 510:	02002103 	andeq	r2, r0, #-1073741824	; 0xc0000000
 514:	00910304 	addseq	r0, r1, r4, lsl #6
 518:	9f030402 	svcls	0x00030402
 51c:	03040200 	movweq	r0, #16896	; 0x4200
 520:	040200bc 	streq	r0, [r2], #-188	; 0xffffff44
 524:	1e054b03 	vmlane.f64	d4, d5, d3
 528:	03040200 	movweq	r0, #16896	; 0x4200
 52c:	054a7a03 	strbeq	r7, [sl, #-2563]	; 0xfffff5fd
 530:	04020003 	streq	r0, [r2], #-3
 534:	1c055801 	stcne	8, cr5, [r5], {1}
 538:	02040200 	andeq	r0, r4, #0, 4
 53c:	00020549 	andeq	r0, r2, r9, asr #10
 540:	58010402 	stmdapl	r1, {r1, sl}
 544:	0a030f05 	beq	c4160 <startup-0x1ff3bea0>
 548:	3c02054a 	cfstr32cc	mvfx0, [r2], {74}	; 0x4a
 54c:	05211005 	streq	r1, [r1, #-5]!
 550:	29053c03 	stmdbcs	r5, {r0, r1, sl, fp, ip, sp}
 554:	03040200 	movweq	r0, #16896	; 0x4200
 558:	00260521 	eoreq	r0, r6, r1, lsr #10
 55c:	58030402 	stmdapl	r3, {r1, sl}
 560:	02000405 	andeq	r0, r0, #83886080	; 0x5000000
 564:	003c0304 	eorseq	r0, ip, r4, lsl #6
 568:	59030402 	stmdbpl	r3, {r1, sl}
 56c:	03040200 	movweq	r0, #16896	; 0x4200
 570:	0402009f 	streq	r0, [r2], #-159	; 0xffffff61
 574:	0200bc03 	andeq	fp, r0, #768	; 0x300
 578:	054b0304 	strbeq	r0, [fp, #-772]	; 0xfffffcfc
 57c:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
 580:	4a7a0303 	bmi	1e81194 <startup-0x1e17ee6c>
 584:	02001905 	andeq	r1, r0, #81920	; 0x14000
 588:	05580104 	ldrbeq	r0, [r8, #-260]	; 0xfffffefc
 58c:	04020003 	streq	r0, [r2], #-3
 590:	1c053c01 	stcne	12, cr3, [r5], {1}
 594:	02040200 	andeq	r0, r4, #0, 4
 598:	0002052d 	andeq	r0, r2, sp, lsr #10
 59c:	58010402 	stmdapl	r1, {r1, sl}
 5a0:	0a030105 	beq	c09bc <startup-0x1ff3f644>
 5a4:	850d054a 	strhi	r0, [sp, #-1354]	; 0xfffffab6
 5a8:	05330505 	ldreq	r0, [r3, #-1285]!	; 0xfffffafb
 5ac:	02052010 	andeq	r2, r5, #16
 5b0:	20220530 	eorcs	r0, r2, r0, lsr r5
 5b4:	67311305 	ldrvs	r1, [r1, -r5, lsl #6]!
 5b8:	67761405 	ldrbvs	r1, [r6, -r5, lsl #8]!
 5bc:	67771305 	ldrbvs	r1, [r7, -r5, lsl #6]!
 5c0:	0505676a 	streq	r6, [r5, #-1898]	; 0xfffff896
 5c4:	2f010569 	svccs	0x00010569
 5c8:	5b081a05 	blpl	206de4 <startup-0x1fdf921c>
 5cc:	053d1305 	ldreq	r1, [sp, #-773]!	; 0xfffffcfb
 5d0:	054b6a0a 	strbeq	r6, [fp, #-2570]	; 0xfffff5f6
 5d4:	05054b0f 	streq	r4, [r5, #-2831]	; 0xfffff4f1
 5d8:	211c054a 	tstcs	ip, sl, asr #10
 5dc:	05740e05 	ldrbeq	r0, [r4, #-3589]!	; 0xfffff1fb
 5e0:	11053d09 	tstne	r5, r9, lsl #26
 5e4:	3d1d0520 	cfldr32cc	mvfx0, [sp, #-128]	; 0xffffff80
 5e8:	053c0e05 	ldreq	r0, [ip, #-3589]!	; 0xfffff1fb
 5ec:	1705590c 	strne	r5, [r5, -ip, lsl #18]
 5f0:	4a10054c 	bmi	401b28 <startup-0x1fbfe4d8>
 5f4:	02002305 	andeq	r2, r0, #335544320	; 0x14000000
 5f8:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 5fc:	10054b17 	andne	r4, r5, r7, lsl fp
 600:	00230558 	eoreq	r0, r3, r8, asr r5
 604:	20010402 	andcs	r0, r1, r2, lsl #8
 608:	054b1705 	strbeq	r1, [fp, #-1797]	; 0xfffff8fb
 60c:	23055810 	movwcs	r5, #22544	; 0x5810
 610:	01040200 	mrseq	r0, R12_usr
 614:	4b170520 	blmi	5c1a9c <startup-0x1fa3e564>
 618:	05581005 	ldrbeq	r1, [r8, #-5]
 61c:	04020023 	streq	r0, [r2], #-35	; 0xffffffdd
 620:	1a052001 	bne	14862c <startup-0x1feb79d4>
 624:	9e13054c 	cfmac32ls	mvfx0, mvfx3, mvfx12
 628:	02002205 	andeq	r2, r0, #1342177280	; 0x50000000
 62c:	75030204 	strvc	r0, [r3, #-516]	; 0xfffffdfc
 630:	0005054a 	andeq	r0, r5, sl, asr #10
 634:	66010402 	strvs	r0, [r1], -r2, lsl #8
 638:	05580e03 	ldrbeq	r0, [r8, #-3587]	; 0xfffff1fd
 63c:	0805200d 	stmdaeq	r5, {r0, r2, r3, sp}
 640:	5910052f 	ldmdbpl	r0, {r0, r1, r2, r3, r5, r8, sl}
 644:	05301405 	ldreq	r1, [r0, #-1029]!	; 0xfffffbfb
 648:	04020001 	streq	r0, [r2], #-1
 64c:	1f055a01 	svcne	0x00055a01
 650:	670a05af 	strvs	r0, [sl, -pc, lsr #11]
 654:	054b0805 	strbeq	r0, [fp, #-2053]	; 0xfffff7fb
 658:	17054b0e 	strne	r4, [r5, -lr, lsl #22]
 65c:	2e0d0575 	cfrshl64cs	mvdx13, mvdx5, r0
 660:	054c0505 	strbeq	r0, [ip, #-1285]	; 0xfffffafb
 664:	0105200e 	tsteq	r5, lr
 668:	0008024b 	andeq	r0, r8, fp, asr #4
 66c:	Address 0x0000066c is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
   4:	00707574 	rsbseq	r7, r0, r4, ror r5
   8:	61647075 	smcvs	18181	; 0x4705
   c:	65566574 	ldrbvs	r6, [r6, #-1396]	; 0xfffffa8c
  10:	5864006c 	stmdapl	r4!, {r2, r3, r5, r6}^
  14:	65686f43 	strbvs	r6, [r8, #-3907]!	; 0xfffff0bd
  18:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  1c:	67766100 	ldrbvs	r6, [r6, -r0, lsl #2]!
  20:	736f5059 	cmnvc	pc, #89	; 0x59
  24:	53596400 	cmppl	r9, #0, 8
  28:	72617065 	rsbvc	r7, r1, #101	; 0x65
  2c:	6f697461 	svcvs	0x00697461
  30:	6c66006e 	stclvs	0, cr0, [r6], #-440	; 0xfffffe48
  34:	0074616f 	rsbseq	r6, r4, pc, ror #2
  38:	61757173 	cmnvs	r5, r3, ror r1
  3c:	44646572 	strbtmi	r6, [r4], #-1394	; 0xfffffa8e
  40:	61747369 	cmnvs	r4, r9, ror #6
  44:	0065636e 	rsbeq	r6, r5, lr, ror #6
  48:	61647075 	smcvs	18181	; 0x4705
  4c:	6f506574 	svcvs	0x00506574
  50:	6e750073 	mrcvs	0, 3, r0, cr5, cr3, {3}
  54:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
  58:	63206465 			; <UNDEFINED> instruction: 0x63206465
  5c:	00726168 	rsbseq	r6, r2, r8, ror #2
  60:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
  64:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
  68:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
  6c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  70:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  74:	31393130 	teqcc	r9, r0, lsr r1
  78:	20353230 	eorscs	r3, r5, r0, lsr r2
  7c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  80:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  84:	415b2029 	cmpmi	fp, r9, lsr #32
  88:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  8c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  90:	6172622d 	cmnvs	r2, sp, lsr #4
  94:	2068636e 	rsbcs	r6, r8, lr, ror #6
  98:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  9c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  a0:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  a4:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
  a8:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
  ac:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
  b0:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
  b4:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
  b8:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
  bc:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
  c0:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
  c4:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
  c8:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  cc:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
  d0:	20672d20 	rsbcs	r2, r7, r0, lsr #26
  d4:	20304f2d 	eorscs	r4, r0, sp, lsr #30
  d8:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
  dc:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
  e0:	6d757300 	ldclvs	3, cr7, [r5, #-0]
  e4:	736f5058 	cmnvc	pc, #88	; 0x58
  e8:	71536400 	cmpvc	r3, r0, lsl #8
  ec:	65726175 	ldrbvs	r6, [r2, #-373]!	; 0xfffffe8b
  f0:	6f620064 	svcvs	0x00620064
  f4:	00736469 	rsbseq	r6, r3, r9, ror #8
  f8:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff6bd <buffer+0xdfffd439>
  fc:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 100:	6972452f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r8, sl, lr}^
 104:	6f73736b 	svcvs	0x0073736b
 108:	6f442f6e 	svcvs	0x00442f6e
 10c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 110:	2f73746e 	svccs	0x0073746e
 114:	6c616843 	stclvs	8, cr6, [r1], #-268	; 0xfffffef4
 118:	7372656d 	cmnvc	r2, #457179136	; 0x1b400000
 11c:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 120:	696f422f 	stmdbvs	pc!, {r0, r1, r2, r3, r5, r9, lr}^	; <UNPREDICTABLE>
 124:	532d7364 			; <UNDEFINED> instruction: 0x532d7364
 128:	6c756d69 	ldclvs	13, cr6, [r5], #-420	; 0xfffffe5c
 12c:	6f697461 	svcvs	0x00697461
 130:	74732f6e 	ldrbtvc	r2, [r3], #-3950	; 0xfffff092
 134:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 138:	00632e70 	rsbeq	r2, r3, r0, ror lr
 13c:	586d7573 	stmdapl	sp!, {r0, r1, r4, r5, r6, r8, sl, ip, sp, lr}^
 140:	006c6556 	rsbeq	r6, ip, r6, asr r5
 144:	6e69616d 	powvsez	f6, f1, #5.0
 148:	53586400 	cmppl	r8, #0, 8
 14c:	72617065 	rsbvc	r7, r1, #101	; 0x65
 150:	6f697461 	svcvs	0x00697461
 154:	6573006e 	ldrbvs	r0, [r3, #-110]!	; 0xffffff92
 158:	7500666c 	strvc	r6, [r0, #-1644]	; 0xfffff994
 15c:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 160:	2064656e 	rsbcs	r6, r4, lr, ror #10
 164:	00746e69 	rsbseq	r6, r4, r9, ror #28
 168:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 16c:	00745f38 	rsbseq	r5, r4, r8, lsr pc
 170:	61657263 	cmnvs	r5, r3, ror #4
 174:	6f426574 	svcvs	0x00426574
 178:	00736469 	rsbseq	r6, r3, r9, ror #8
 17c:	494f4270 	stmdbmi	pc, {r4, r5, r6, r9, lr}^	; <UNPREDICTABLE>
 180:	75730044 	ldrbvc	r0, [r3, #-68]!	; 0xffffffbc
 184:	6556596d 	ldrbvs	r5, [r6, #-2413]	; 0xfffff693
 188:	5964006c 	stmdbpl	r4!, {r2, r3, r5, r6}^
 18c:	65686f43 	strbvs	r6, [r8, #-3907]!	; 0xfffff0bd
 190:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 194:	41596400 	cmpmi	r9, r0, lsl #8
 198:	6e67696c 	vnmulvs.f16	s13, s14, s25	; <UNPREDICTABLE>
 19c:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 1a0:	61656e00 	cmnvs	r5, r0, lsl #28
 1a4:	43796272 	cmnmi	r9, #536870919	; 0x20000007
 1a8:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
 1ac:	6f427400 	svcvs	0x00427400
 1b0:	61006469 	tstvs	r0, r9, ror #8
 1b4:	50586776 	subspl	r6, r8, r6, ror r7
 1b8:	7800736f 	stmdavc	r0, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}
 1bc:	006c6556 	rsbeq	r6, ip, r6, asr r5
 1c0:	616c6564 	cmnvs	ip, r4, ror #10
 1c4:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 1c8:	00696c6c 	rsbeq	r6, r9, ip, ror #24
 1cc:	58677661 	stmdapl	r7!, {r0, r5, r6, r9, sl, ip, sp, lr}^
 1d0:	006c6556 	rsbeq	r6, ip, r6, asr r5
 1d4:	6568746f 	strbvs	r7, [r8, #-1135]!	; 0xfffffb91
 1d8:	58640072 	stmdapl	r4!, {r1, r4, r5, r6}^
 1dc:	67696c41 	strbvs	r6, [r9, -r1, asr #24]!
 1e0:	6e656d6e 	cdpvs	13, 6, cr6, cr5, cr14, {3}
 1e4:	3a430074 	bcc	10c03bc <startup-0x1ef3fc44>
 1e8:	6573555c 	ldrbvs	r5, [r3, #-1372]!	; 0xfffffaa4
 1ec:	455c7372 	ldrbmi	r7, [ip, #-882]	; 0xfffffc8e
 1f0:	736b6972 	cmnvc	fp, #1867776	; 0x1c8000
 1f4:	5c6e6f73 	stclpl	15, cr6, [lr], #-460	; 0xfffffe34
 1f8:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 1fc:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 200:	68435c73 	stmdavs	r3, {r0, r1, r4, r5, r6, sl, fp, ip, lr}^
 204:	656d6c61 	strbvs	r6, [sp, #-3169]!	; 0xfffff39f
 208:	4d5c7372 	ldclmi	3, cr7, [ip, #-456]	; 0xfffffe38
 20c:	425c504f 	subsmi	r5, ip, #79	; 0x4f
 210:	7364696f 	cmnvc	r4, #1818624	; 0x1bc000
 214:	6d69532d 	stclvs	3, cr5, [r9, #-180]!	; 0xffffff4c
 218:	74616c75 	strbtvc	r6, [r1], #-3189	; 0xfffff38b
 21c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
 220:	596d7573 	stmdbpl	sp!, {r0, r1, r4, r5, r6, r8, sl, ip, sp, lr}^
 224:	00736f50 	rsbseq	r6, r3, r0, asr pc
 228:	6c655679 	stclvs	6, cr5, [r5], #-484	; 0xfffffe1c
 22c:	67766100 	ldrbvs	r6, [r6, -r0, lsl #2]!
 230:	6c655659 	stclvs	6, cr5, [r5], #-356	; 0xfffffe9c
 234:	67617000 	strbvs	r7, [r1, -r0]!
 238:	65730065 	ldrbvs	r0, [r3, #-101]!	; 0xffffff9b
 23c:	646f4367 	strbtvs	r4, [pc], #-871	; 244 <startup-0x1ffffdbc>
 240:	76007365 	strvc	r7, [r0], -r5, ror #6
 244:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 248:	6c657300 	stclvs	3, cr7, [r5], #-0
 24c:	5f746365 	svcpl	0x00746365
 250:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 254:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 258:	69007265 	stmdbvs	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
 25c:	0074696e 	rsbseq	r6, r4, lr, ror #18
 260:	5674756f 	ldrbtpl	r7, [r4], -pc, ror #10
 264:	67006c61 	strvs	r6, [r0, -r1, ror #24]
 268:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 26c:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
 270:	5f646165 	svcpl	0x00646165
 274:	61746164 	cmnvs	r4, r4, ror #2
 278:	78697000 	stmdavc	r9!, {ip, sp, lr}^
 27c:	64006c65 	strvs	r6, [r0], #-3173	; 0xfffff39b
 280:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 284:	3030355f 	eorscc	r3, r0, pc, asr r5
 288:	6200736e 	andvs	r7, r0, #-1207959551	; 0xb8000001
 28c:	00657361 	rsbeq	r7, r5, r1, ror #6
 290:	70617267 	rsbvc	r7, r1, r7, ror #4
 294:	5f636968 	svcpl	0x00636968
 298:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 29c:	6165725f 	cmnvs	r5, pc, asr r2
 2a0:	62007964 	andvs	r7, r0, #100, 18	; 0x190000
 2a4:	00797375 	rsbseq	r7, r9, r5, ror r3
 2a8:	70617267 	rsbvc	r7, r1, r7, ror #4
 2ac:	5f636968 	svcpl	0x00636968
 2b0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 2b4:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
 2b8:	6700657a 	smlsdxvs	r0, sl, r5, r6
 2bc:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 2c0:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 2c4:	5f6c7274 	svcpl	0x006c7274
 2c8:	5f746962 	svcpl	0x00746962
 2cc:	61656c63 	cmnvs	r5, r3, ror #24
 2d0:	72670072 	rsbvc	r0, r7, #114	; 0x72
 2d4:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 2d8:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 2dc:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 2e0:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 2e4:	64007465 	strvs	r7, [r0], #-1125	; 0xfffffb9b
 2e8:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 2ec:	6b696d5f 	blvs	1a5b870 <startup-0x1e5a4790>
 2f0:	64006f72 	strvs	r6, [r0], #-3954	; 0xfffff08e
 2f4:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 2f8:	3035325f 	eorscc	r3, r5, pc, asr r2
 2fc:	6900736e 	stmdbvs	r0, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}
 300:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
 304:	73616d00 	cmnvc	r1, #0, 26
 308:	6e69006b 	cdpvs	0, 6, cr0, cr9, cr11, {3}
 30c:	00786564 	rsbseq	r6, r8, r4, ror #10
 310:	3774756f 	ldrbcc	r7, [r4, -pc, ror #10]!
 314:	00676573 	rsbeq	r6, r7, r3, ror r5
 318:	70617267 	rsbvc	r7, r1, r7, ror #4
 31c:	5f636968 	svcpl	0x00636968
 320:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 324:	61645f65 	cmnvs	r4, r5, ror #30
 328:	43006174 	movwmi	r6, #372	; 0x174
 32c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 330:	2f737265 	svccs	0x00737265
 334:	6b697245 	blvs	1a5cc50 <startup-0x1e5a33b0>
 338:	6e6f7373 	mcrvs	3, 3, r7, cr15, cr3, {3}
 33c:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 340:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 344:	432f7374 			; <UNDEFINED> instruction: 0x432f7374
 348:	6d6c6168 	stfvse	f6, [ip, #-416]!	; 0xfffffe60
 34c:	2f737265 	svccs	0x00737265
 350:	2f504f4d 	svccs	0x00504f4d
 354:	64696f42 	strbtvs	r6, [r9], #-3906	; 0xfffff0be
 358:	69532d73 	ldmdbvs	r3, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
 35c:	616c756d 	cmnvs	ip, sp, ror #10
 360:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 364:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
 368:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 36c:	6b00632e 	blvs	1902c <startup-0x1ffe6fd4>
 370:	00627965 	rsbeq	r7, r2, r5, ror #18
 374:	70617267 	rsbvc	r7, r1, r7, ror #4
 378:	5f636968 	svcpl	0x00636968
 37c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 380:	72670065 	rsbvc	r0, r7, #101	; 0x65
 384:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 388:	6c635f63 	stclvs	15, cr5, [r3], #-396	; 0xfffffe74
 38c:	5f726165 	svcpl	0x00726165
 390:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
 394:	64006e65 	strvs	r6, [r0], #-3685	; 0xfffff19b
 398:	5f776172 	svcpl	0x00776172
 39c:	66667562 	strbtvs	r7, [r6], -r2, ror #10
 3a0:	67007265 	strvs	r7, [r0, -r5, ror #4]
 3a4:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 3a8:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
 3ac:	00646165 	rsbeq	r6, r4, r5, ror #2
 3b0:	7379656b 	cmnvc	r9, #448790528	; 0x1ac00000
 3b4:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
 3b8:	625f7261 	subsvs	r7, pc, #268435462	; 0x10000006
 3bc:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
 3c0:	72670072 	rsbvc	r0, r7, #114	; 0x72
 3c4:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 3c8:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 3cc:	5f657469 	svcpl	0x00657469
 3d0:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 3d4:	00646e61 	rsbeq	r6, r4, r1, ror #28

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003041 	andeq	r3, r0, r1, asr #32
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000026 	andeq	r0, r0, r6, lsr #32
  10:	4d524105 	ldfmie	f4, [r2, #-20]	; 0xffffffec
  14:	4b367620 	blmi	d9d89c <startup-0x1f262764>
  18:	07090600 	streq	r0, [r9, -r0, lsl #12]
  1c:	0901084d 	stmdbeq	r1, {r0, r2, r3, r6, fp}
  20:	14041201 	strne	r1, [r4], #-513	; 0xfffffdff
  24:	17011501 	strne	r1, [r1, -r1, lsl #10]
  28:	19011803 	stmdbne	r1, {r0, r1, fp, ip}
  2c:	1e011a01 	vmlane.f32	s2, s2, s2
  30:	Address 0x00000030 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000058 	andeq	r0, r0, r8, asr r0
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	180e4101 	stmdane	lr, {r0, r8, lr}
  3c:	00070d41 	andeq	r0, r7, r1, asr #26
  40:	00000020 	andeq	r0, r0, r0, lsr #32
  44:	00000000 	andeq	r0, r0, r0
  48:	20000068 	andcs	r0, r0, r8, rrx
  4c:	00000036 	andeq	r0, r0, r6, lsr r0
  50:	400c0e41 	andmi	r0, ip, r1, asr #28
  54:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  58:	018e4002 	orreq	r4, lr, r2
  5c:	41180e41 	tstmi	r8, r1, asr #28
  60:	0000070d 	andeq	r0, r0, sp, lsl #14
  64:	0000001c 	andeq	r0, r0, ip, lsl r0
  68:	00000000 	andeq	r0, r0, r0
  6c:	2000009e 	mulcs	r0, lr, r0
  70:	00000040 	andeq	r0, r0, r0, asr #32
  74:	40080e41 	andmi	r0, r8, r1, asr #28
  78:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  7c:	100e4101 	andne	r4, lr, r1, lsl #2
  80:	00070d41 	andeq	r0, r7, r1, asr #26
  84:	00000024 	andeq	r0, r0, r4, lsr #32
  88:	00000000 	andeq	r0, r0, r0
  8c:	200000de 	ldrdcs	r0, [r0], -lr
  90:	000002b2 			; <UNDEFINED> instruction: 0x000002b2
  94:	40100e41 	andsmi	r0, r0, r1, asr #28
  98:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
  9c:	02874003 	addeq	r4, r7, #3
  a0:	41018e40 	tstmi	r1, r0, asr #28
  a4:	0d41680e 	stcleq	8, cr6, [r1, #-56]	; 0xffffffc8
  a8:	00000007 	andeq	r0, r0, r7
  ac:	0000001c 	andeq	r0, r0, ip, lsl r0
  b0:	00000000 	andeq	r0, r0, r0
  b4:	20000390 	mulcs	r0, r0, r3
  b8:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  bc:	40080e41 	andmi	r0, r8, r1, asr #28
  c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c4:	280e4101 	stmdacs	lr, {r0, r8, lr}
  c8:	00070d41 	andeq	r0, r7, r1, asr #26
  cc:	0000001c 	andeq	r0, r0, ip, lsl r0
  d0:	00000000 	andeq	r0, r0, r0
  d4:	20000480 	andcs	r0, r0, r0, lsl #9
  d8:	000000b8 	strheq	r0, [r0], -r8
  dc:	40080e41 	andmi	r0, r8, r1, asr #28
  e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  e4:	100e4101 	andne	r4, lr, r1, lsl #2
  e8:	00070d41 	andeq	r0, r7, r1, asr #26
  ec:	0000000c 	andeq	r0, r0, ip
  f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  f4:	7c020001 	stcvc	0, cr0, [r2], {1}
  f8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  fc:	00000018 	andeq	r0, r0, r8, lsl r0
 100:	000000ec 	andeq	r0, r0, ip, ror #1
 104:	20000538 	andcs	r0, r0, r8, lsr r5
 108:	00000044 	andeq	r0, r0, r4, asr #32
 10c:	40080e41 	andmi	r0, r8, r1, asr #28
 110:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 114:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 118:	00000018 	andeq	r0, r0, r8, lsl r0
 11c:	000000ec 	andeq	r0, r0, ip, ror #1
 120:	2000057c 	andcs	r0, r0, ip, ror r5
 124:	00000012 	andeq	r0, r0, r2, lsl r0
 128:	40080e41 	andmi	r0, r8, r1, asr #28
 12c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 130:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 134:	0000001c 	andeq	r0, r0, ip, lsl r0
 138:	000000ec 	andeq	r0, r0, ip, ror #1
 13c:	2000058e 	andcs	r0, r0, lr, lsl #11
 140:	0000003e 	andeq	r0, r0, lr, lsr r0
 144:	40080e41 	andmi	r0, r8, r1, asr #28
 148:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 14c:	100e4101 	andne	r4, lr, r1, lsl #2
 150:	00070d41 	andeq	r0, r7, r1, asr #26
 154:	0000001c 	andeq	r0, r0, ip, lsl r0
 158:	000000ec 	andeq	r0, r0, ip, ror #1
 15c:	200005cc 	andcs	r0, r0, ip, asr #11
 160:	0000002e 	andeq	r0, r0, lr, lsr #32
 164:	40080e41 	andmi	r0, r8, r1, asr #28
 168:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 16c:	100e4101 	andne	r4, lr, r1, lsl #2
 170:	00070d41 	andeq	r0, r7, r1, asr #26
 174:	0000001c 	andeq	r0, r0, ip, lsl r0
 178:	000000ec 	andeq	r0, r0, ip, ror #1
 17c:	200005fa 	strdcs	r0, [r0], -sl
 180:	00000052 	andeq	r0, r0, r2, asr r0
 184:	40080e41 	andmi	r0, r8, r1, asr #28
 188:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 18c:	180e4101 	stmdane	lr, {r0, r8, lr}
 190:	00070d41 	andeq	r0, r7, r1, asr #26
 194:	0000001c 	andeq	r0, r0, ip, lsl r0
 198:	000000ec 	andeq	r0, r0, ip, ror #1
 19c:	2000064c 	andcs	r0, r0, ip, asr #12
 1a0:	00000050 	andeq	r0, r0, r0, asr r0
 1a4:	40080e41 	andmi	r0, r8, r1, asr #28
 1a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1ac:	180e4101 	stmdane	lr, {r0, r8, lr}
 1b0:	00070d41 	andeq	r0, r7, r1, asr #26
 1b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b8:	000000ec 	andeq	r0, r0, ip, ror #1
 1bc:	2000069c 	mulcs	r0, ip, r6
 1c0:	00000068 	andeq	r0, r0, r8, rrx
 1c4:	40080e41 	andmi	r0, r8, r1, asr #28
 1c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1cc:	180e4101 	stmdane	lr, {r0, r8, lr}
 1d0:	00070d41 	andeq	r0, r7, r1, asr #26
 1d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d8:	000000ec 	andeq	r0, r0, ip, ror #1
 1dc:	20000704 	andcs	r0, r0, r4, lsl #14
 1e0:	00000070 	andeq	r0, r0, r0, ror r0
 1e4:	40080e41 	andmi	r0, r8, r1, asr #28
 1e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1ec:	100e4101 	andne	r4, lr, r1, lsl #2
 1f0:	00070d41 	andeq	r0, r7, r1, asr #26
 1f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f8:	000000ec 	andeq	r0, r0, ip, ror #1
 1fc:	20000774 	andcs	r0, r0, r4, ror r7
 200:	00000090 	muleq	r0, r0, r0
 204:	40080e41 	andmi	r0, r8, r1, asr #28
 208:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 20c:	180e4101 	stmdane	lr, {r0, r8, lr}
 210:	00070d41 	andeq	r0, r7, r1, asr #26
 214:	0000001c 	andeq	r0, r0, ip, lsl r0
 218:	000000ec 	andeq	r0, r0, ip, ror #1
 21c:	20000804 	andcs	r0, r0, r4, lsl #16
 220:	00000074 	andeq	r0, r0, r4, ror r0
 224:	40080e41 	andmi	r0, r8, r1, asr #28
 228:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 22c:	100e4101 	andne	r4, lr, r1, lsl #2
 230:	00070d41 	andeq	r0, r7, r1, asr #26
 234:	0000001c 	andeq	r0, r0, ip, lsl r0
 238:	000000ec 	andeq	r0, r0, ip, ror #1
 23c:	20000878 	andcs	r0, r0, r8, ror r8
 240:	00000046 	andeq	r0, r0, r6, asr #32
 244:	40080e41 	andmi	r0, r8, r1, asr #28
 248:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 24c:	100e4101 	andne	r4, lr, r1, lsl #2
 250:	00070d41 	andeq	r0, r7, r1, asr #26
 254:	0000001c 	andeq	r0, r0, ip, lsl r0
 258:	000000ec 	andeq	r0, r0, ip, ror #1
 25c:	200008be 			; <UNDEFINED> instruction: 0x200008be
 260:	00000046 	andeq	r0, r0, r6, asr #32
 264:	40080e41 	andmi	r0, r8, r1, asr #28
 268:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 26c:	100e4101 	andne	r4, lr, r1, lsl #2
 270:	00070d41 	andeq	r0, r7, r1, asr #26
 274:	0000001c 	andeq	r0, r0, ip, lsl r0
 278:	000000ec 	andeq	r0, r0, ip, ror #1
 27c:	20000904 	andcs	r0, r0, r4, lsl #18
 280:	0000002a 	andeq	r0, r0, sl, lsr #32
 284:	40080e41 	andmi	r0, r8, r1, asr #28
 288:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 28c:	100e4101 	andne	r4, lr, r1, lsl #2
 290:	00070d41 	andeq	r0, r7, r1, asr #26
 294:	00000018 	andeq	r0, r0, r8, lsl r0
 298:	000000ec 	andeq	r0, r0, ip, ror #1
 29c:	2000092e 	andcs	r0, r0, lr, lsr #18
 2a0:	00000056 	andeq	r0, r0, r6, asr r0
 2a4:	40080e41 	andmi	r0, r8, r1, asr #28
 2a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2ac:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2b4:	000000ec 	andeq	r0, r0, ip, ror #1
 2b8:	20000984 	andcs	r0, r0, r4, lsl #19
 2bc:	00000068 	andeq	r0, r0, r8, rrx
 2c0:	40080e41 	andmi	r0, r8, r1, asr #28
 2c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2c8:	100e4101 	andne	r4, lr, r1, lsl #2
 2cc:	00070d41 	andeq	r0, r7, r1, asr #26
 2d0:	00000024 	andeq	r0, r0, r4, lsr #32
 2d4:	000000ec 	andeq	r0, r0, ip, ror #1
 2d8:	200009ec 	andcs	r0, r0, ip, ror #19
 2dc:	000000c4 	andeq	r0, r0, r4, asr #1
 2e0:	40100e41 	andsmi	r0, r0, r1, asr #28
 2e4:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 2e8:	02874003 	addeq	r4, r7, #3
 2ec:	41018e40 	tstmi	r1, r0, asr #28
 2f0:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 2f4:	00000007 	andeq	r0, r0, r7
 2f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2fc:	000000ec 	andeq	r0, r0, ip, ror #1
 300:	20000ab0 			; <UNDEFINED> instruction: 0x20000ab0
 304:	0000005c 	andeq	r0, r0, ip, asr r0
 308:	40080e41 	andmi	r0, r8, r1, asr #28
 30c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 310:	100e4101 	andne	r4, lr, r1, lsl #2
 314:	00070d41 	andeq	r0, r7, r1, asr #26
 318:	0000001c 	andeq	r0, r0, ip, lsl r0
 31c:	000000ec 	andeq	r0, r0, ip, ror #1
 320:	20000b0c 	andcs	r0, r0, ip, lsl #22
 324:	00000124 	andeq	r0, r0, r4, lsr #2
 328:	40080e41 	andmi	r0, r8, r1, asr #28
 32c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 330:	100e4101 	andne	r4, lr, r1, lsl #2
 334:	00070d41 	andeq	r0, r7, r1, asr #26
 338:	00000018 	andeq	r0, r0, r8, lsl r0
 33c:	000000ec 	andeq	r0, r0, ip, ror #1
 340:	20000c30 	andcs	r0, r0, r0, lsr ip
 344:	000000a4 	andeq	r0, r0, r4, lsr #1
 348:	40080e41 	andmi	r0, r8, r1, asr #28
 34c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 350:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 354:	00000020 	andeq	r0, r0, r0, lsr #32
 358:	000000ec 	andeq	r0, r0, ip, ror #1
 35c:	20000cd4 	ldrdcs	r0, [r0], -r4
 360:	00000114 	andeq	r0, r0, r4, lsl r1
 364:	400c0e41 	andmi	r0, ip, r1, asr #28
 368:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 36c:	018e4002 	orreq	r4, lr, r2
 370:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
 374:	0000070d 	andeq	r0, r0, sp, lsl #14
 378:	00000024 	andeq	r0, r0, r4, lsr #32
 37c:	000000ec 	andeq	r0, r0, ip, ror #1
 380:	20000de8 	andcs	r0, r0, r8, ror #27
 384:	00000050 	andeq	r0, r0, r0, asr r0
 388:	40140e41 	andsmi	r0, r4, r1, asr #28
 38c:	85400584 	strbhi	r0, [r0, #-1412]	; 0xfffffa7c
 390:	03864004 	orreq	r4, r6, #4
 394:	40028740 	andmi	r8, r2, r0, asr #14
 398:	0e41018e 	dvfeqd	f0, f1, #0.5
 39c:	070d4138 	smladxeq	sp, r8, r1, r4
 3a0:	0000000c 	andeq	r0, r0, ip
 3a4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 3a8:	7c020001 	stcvc	0, cr0, [r2], {1}
 3ac:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 3b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b4:	000003a0 	andeq	r0, r0, r0, lsr #7
 3b8:	20000e38 	andcs	r0, r0, r8, lsr lr
 3bc:	00000290 	muleq	r0, r0, r2
 3c0:	100e420a 	andne	r4, lr, sl, lsl #4
 3c4:	03850484 	orreq	r0, r5, #132, 8	; 0x84000000
 3c8:	018e0286 	orreq	r0, lr, r6, lsl #5
 3cc:	0b014603 	bleq	51be0 <startup-0x1ffae420>
 3d0:	0000000c 	andeq	r0, r0, ip
 3d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 3d8:	7c020001 	stcvc	0, cr0, [r2], {1}
 3dc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 3e0:	00000010 	andeq	r0, r0, r0, lsl r0
 3e4:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 3e8:	200010c8 	andcs	r1, r0, r8, asr #1
 3ec:	00000198 	muleq	r0, r8, r1
 3f0:	0bcc020a 	bleq	ff300c20 <buffer+0xdf2fe99c>
 3f4:	0000000c 	andeq	r0, r0, ip
 3f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 3fc:	7c020001 	stcvc	0, cr0, [r2], {1}
 400:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 404:	0000001c 	andeq	r0, r0, ip, lsl r0
 408:	000003f4 	strdeq	r0, [r0], -r4
 40c:	20001260 	andcs	r1, r0, r0, ror #4
 410:	0000031c 	andeq	r0, r0, ip, lsl r3
 414:	0c0e480a 	stceq	8, cr4, [lr], {10}
 418:	02850384 	addeq	r0, r5, #132, 6	; 0x10000002
 41c:	8603018e 	strhi	r0, [r3], -lr, lsl #3
 420:	00000b01 	andeq	r0, r0, r1, lsl #22
 424:	00000018 	andeq	r0, r0, r8, lsl r0
 428:	000003f4 	strdeq	r0, [r0], -r4
 42c:	2000157c 	andcs	r1, r0, ip, ror r5
 430:	00000024 	andeq	r0, r0, r4, lsr #32
 434:	0c0e480a 	stceq	8, cr4, [lr], {10}
 438:	02850384 	addeq	r0, r5, #132, 6	; 0x10000002
 43c:	0b4a018e 	bleq	1280a7c <startup-0x1ed7f584>
 440:	00000018 	andeq	r0, r0, r8, lsl r0
 444:	000003f4 	strdeq	r0, [r0], -r4
 448:	200015a0 	andcs	r1, r0, r0, lsr #11
 44c:	00000028 	andeq	r0, r0, r8, lsr #32
 450:	0c0e480a 	stceq	8, cr4, [lr], {10}
 454:	02850384 	addeq	r0, r5, #132, 6	; 0x10000002
 458:	0b4c018e 	bleq	1300a98 <startup-0x1ecff568>
 45c:	00000018 	andeq	r0, r0, r8, lsl r0
 460:	000003f4 	strdeq	r0, [r0], -r4
 464:	200015c8 	andcs	r1, r0, r8, asr #11
 468:	00000048 	andeq	r0, r0, r8, asr #32
 46c:	0c0e5c0a 	stceq	12, cr5, [lr], {10}
 470:	02850384 	addeq	r0, r5, #132, 6	; 0x10000002
 474:	0b48018e 	bleq	1200ab4 <startup-0x1edff54c>
 478:	00000024 	andeq	r0, r0, r4, lsr #32
 47c:	000003f4 	strdeq	r0, [r0], -r4
 480:	20001610 	andcs	r1, r0, r0, lsl r6
 484:	00000074 	andeq	r0, r0, r4, ror r0
 488:	0e460a0a 	vmlaeq.f32	s1, s12, s20
 48c:	8503840c 	strhi	r8, [r3, #-1036]	; 0xfffffbf4
 490:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
 494:	0c0e460b 	stceq	6, cr4, [lr], {11}
 498:	02850384 	addeq	r0, r5, #132, 6	; 0x10000002
 49c:	0b6a018e 	bleq	1a80adc <startup-0x1e57f524>
 4a0:	0000000c 	andeq	r0, r0, ip
 4a4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 4a8:	7c020001 	stcvc	0, cr0, [r2], {1}
 4ac:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 4b0:	00000010 	andeq	r0, r0, r0, lsl r0
 4b4:	000004a0 	andeq	r0, r0, r0, lsr #9
 4b8:	20001684 	andcs	r1, r0, r4, lsl #13
 4bc:	000000a0 	andeq	r0, r0, r0, lsr #1
 4c0:	0b50020a 	bleq	1400cf0 <startup-0x1ebff310>
 4c4:	0000000c 	andeq	r0, r0, ip
 4c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 4cc:	7c020001 	stcvc	0, cr0, [r2], {1}
 4d0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 4d4:	00000010 	andeq	r0, r0, r0, lsl r0
 4d8:	000004c4 	andeq	r0, r0, r4, asr #9
 4dc:	20001724 	andcs	r1, r0, r4, lsr #14
 4e0:	000001c8 	andeq	r0, r0, r8, asr #3
 4e4:	0be4020a 	bleq	ff900d14 <buffer+0xdf8fea90>
 4e8:	00000010 	andeq	r0, r0, r0, lsl r0
 4ec:	000004c4 	andeq	r0, r0, r4, asr #9
 4f0:	200018ec 	andcs	r1, r0, ip, ror #17
 4f4:	00000028 	andeq	r0, r0, r8, lsr #32
 4f8:	000b540a 	andeq	r5, fp, sl, lsl #8
 4fc:	00000010 	andeq	r0, r0, r0, lsl r0
 500:	000004c4 	andeq	r0, r0, r4, asr #9
 504:	20001914 	andcs	r1, r0, r4, lsl r9
 508:	000000bc 	strheq	r0, [r0], -ip
 50c:	0b5e020a 	bleq	1780d3c <startup-0x1e87f2c4>
 510:	0000000c 	andeq	r0, r0, ip
 514:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 518:	7c020001 	stcvc	0, cr0, [r2], {1}
 51c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 520:	00000010 	andeq	r0, r0, r0, lsl r0
 524:	00000510 	andeq	r0, r0, r0, lsl r5
 528:	200019d0 	ldrdcs	r1, [r0], -r0
 52c:	00000198 	muleq	r0, r8, r1
 530:	0bcc020a 	bleq	ff300d60 <buffer+0xdf2feadc>
 534:	00000010 	andeq	r0, r0, r0, lsl r0
 538:	00000510 	andeq	r0, r0, r0, lsl r5
 53c:	20001b68 	andcs	r1, r0, r8, ror #22
 540:	00000160 	andeq	r0, r0, r0, ror #2
 544:	0bb0020a 	bleq	fec00d74 <buffer+0xdebfeaf0>
 548:	0000000c 	andeq	r0, r0, ip
 54c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 550:	7c020001 	stcvc	0, cr0, [r2], {1}
 554:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 558:	0000001c 	andeq	r0, r0, ip, lsl r0
 55c:	00000548 	andeq	r0, r0, r8, asr #10
 560:	20001cc8 	andcs	r1, r0, r8, asr #25
 564:	00000074 	andeq	r0, r0, r4, ror r0
 568:	040e4c0a 	streq	r4, [lr], #-3082	; 0xfffff3f6
 56c:	0e420a4a 	vmlseq.f32	s1, s4, s20
 570:	520b4e00 	andpl	r4, fp, #0, 28
 574:	0b42000e 	bleq	10805b4 <startup-0x1ef7fa4c>
 578:	0000001c 	andeq	r0, r0, ip, lsl r0
 57c:	00000548 	andeq	r0, r0, r8, asr #10
 580:	20001d3c 	andcs	r1, r0, ip, lsr sp
 584:	00000028 	andeq	r0, r0, r8, lsr #32
 588:	140e4a0a 	strne	r4, [lr], #-2570	; 0xfffff5f6
 58c:	04810580 	streq	r0, [r1], #1408	; 0x580
 590:	02830382 	addeq	r0, r3, #134217730	; 0x8000002
 594:	0b4a018e 	bleq	1280bd4 <startup-0x1ed7f42c>
 598:	00000014 	andeq	r0, r0, r4, lsl r0
 59c:	00000548 	andeq	r0, r0, r8, asr #10
 5a0:	20001d64 	andcs	r1, r0, r4, ror #26
 5a4:	00000018 	andeq	r0, r0, r8, lsl r0
 5a8:	080e420a 	stmdaeq	lr, {r1, r3, r9, lr}
 5ac:	0b4a028e 	bleq	1280fec <startup-0x1ed7f014>
 5b0:	00000014 	andeq	r0, r0, r4, lsl r0
 5b4:	00000548 	andeq	r0, r0, r8, asr #10
 5b8:	20001d7c 	andcs	r1, r0, ip, ror sp
 5bc:	00000018 	andeq	r0, r0, r8, lsl r0
 5c0:	080e420a 	stmdaeq	lr, {r1, r3, r9, lr}
 5c4:	0b4a028e 	bleq	1281004 <startup-0x1ed7effc>
 5c8:	00000014 	andeq	r0, r0, r4, lsl r0
 5cc:	00000548 	andeq	r0, r0, r8, asr #10
 5d0:	20001d94 	mulcs	r0, r4, sp
 5d4:	00000018 	andeq	r0, r0, r8, lsl r0
 5d8:	080e420a 	stmdaeq	lr, {r1, r3, r9, lr}
 5dc:	0b4a028e 	bleq	128101c <startup-0x1ed7efe4>
 5e0:	00000014 	andeq	r0, r0, r4, lsl r0
 5e4:	00000548 	andeq	r0, r0, r8, asr #10
 5e8:	20001dac 	andcs	r1, r0, ip, lsr #27
 5ec:	00000018 	andeq	r0, r0, r8, lsl r0
 5f0:	080e420a 	stmdaeq	lr, {r1, r3, r9, lr}
 5f4:	0b4a028e 	bleq	1281034 <startup-0x1ed7efcc>
 5f8:	00000014 	andeq	r0, r0, r4, lsl r0
 5fc:	00000548 	andeq	r0, r0, r8, asr #10
 600:	20001dc4 	andcs	r1, r0, r4, asr #27
 604:	00000018 	andeq	r0, r0, r8, lsl r0
 608:	080e420a 	stmdaeq	lr, {r1, r3, r9, lr}
 60c:	0b4a028e 	bleq	128104c <startup-0x1ed7efb4>
 610:	0000000c 	andeq	r0, r0, ip
 614:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 618:	7c020001 	stcvc	0, cr0, [r2], {1}
 61c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 620:	00000010 	andeq	r0, r0, r0, lsl r0
 624:	00000610 	andeq	r0, r0, r0, lsl r6
 628:	20001ddc 	ldrdcs	r1, [r0], -ip
 62c:	00000054 	andeq	r0, r0, r4, asr r0
 630:	000b6a0a 	andeq	r6, fp, sl, lsl #20
