
./Debug/Boids.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#include "drivers.h"

__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 fd54 	bl	20000ab0 <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <delay_250ns>:
#define KB_OUT  (volatile unsigned char *) (0x40020C15)
#define KB_IN   (volatile unsigned char *) (0x40020C11)

#define SEG_OUT (unsigned char *) GPIO_D_ODR

static void delay_250ns(void) {
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
    *STK_CTRL = 0;
20000014:	4b0c      	ldr	r3, [pc, #48]	; (20000048 <delay_250ns+0x38>)
20000016:	2200      	movs	r2, #0
20000018:	601a      	str	r2, [r3, #0]
    *STK_LOAD = (168/4)-1;
2000001a:	4b0c      	ldr	r3, [pc, #48]	; (2000004c <delay_250ns+0x3c>)
2000001c:	2229      	movs	r2, #41	; 0x29
2000001e:	601a      	str	r2, [r3, #0]
    *STK_VAL = 0;
20000020:	4b0b      	ldr	r3, [pc, #44]	; (20000050 <delay_250ns+0x40>)
20000022:	2200      	movs	r2, #0
20000024:	601a      	str	r2, [r3, #0]
    *STK_CTRL = 5;
20000026:	4b08      	ldr	r3, [pc, #32]	; (20000048 <delay_250ns+0x38>)
20000028:	2205      	movs	r2, #5
2000002a:	601a      	str	r2, [r3, #0]
    while((*STK_CTRL & 0x10000) == 0);
2000002c:	46c0      	nop			; (mov r8, r8)
2000002e:	4b06      	ldr	r3, [pc, #24]	; (20000048 <delay_250ns+0x38>)
20000030:	681a      	ldr	r2, [r3, #0]
20000032:	2380      	movs	r3, #128	; 0x80
20000034:	025b      	lsls	r3, r3, #9
20000036:	4013      	ands	r3, r2
20000038:	d0f9      	beq.n	2000002e <delay_250ns+0x1e>
    *STK_CTRL = 0;
2000003a:	4b03      	ldr	r3, [pc, #12]	; (20000048 <delay_250ns+0x38>)
2000003c:	2200      	movs	r2, #0
2000003e:	601a      	str	r2, [r3, #0]
}
20000040:	46c0      	nop			; (mov r8, r8)
20000042:	46bd      	mov	sp, r7
20000044:	bd80      	pop	{r7, pc}
20000046:	46c0      	nop			; (mov r8, r8)
20000048:	e000e010 	and	lr, r0, r0, lsl r0
2000004c:	e000e014 	and	lr, r0, r4, lsl r0
20000050:	e000e018 	and	lr, r0, r8, lsl r0

20000054 <delay_500ns>:

static void delay_500ns(void) {
20000054:	b580      	push	{r7, lr}
20000056:	af00      	add	r7, sp, #0
    delay_250ns();
20000058:	f7ff ffda 	bl	20000010 <delay_250ns>
    delay_250ns();
2000005c:	f7ff ffd8 	bl	20000010 <delay_250ns>
}
20000060:	46c0      	nop			; (mov r8, r8)
20000062:	46bd      	mov	sp, r7
20000064:	bd80      	pop	{r7, pc}

20000066 <delay_mikro>:

void delay_mikro(unsigned int us) {
20000066:	b580      	push	{r7, lr}
20000068:	b082      	sub	sp, #8
2000006a:	af00      	add	r7, sp, #0
2000006c:	6078      	str	r0, [r7, #4]
    while (us > 0) {
2000006e:	e00a      	b.n	20000086 <delay_mikro+0x20>
        delay_250ns();
20000070:	f7ff ffce 	bl	20000010 <delay_250ns>
        delay_250ns();
20000074:	f7ff ffcc 	bl	20000010 <delay_250ns>
        delay_250ns();
20000078:	f7ff ffca 	bl	20000010 <delay_250ns>
        delay_250ns();
2000007c:	f7ff ffc8 	bl	20000010 <delay_250ns>
        us--;
20000080:	687b      	ldr	r3, [r7, #4]
20000082:	3b01      	subs	r3, #1
20000084:	607b      	str	r3, [r7, #4]
    while (us > 0) {
20000086:	687b      	ldr	r3, [r7, #4]
20000088:	2b00      	cmp	r3, #0
2000008a:	d1f1      	bne.n	20000070 <delay_mikro+0xa>
    }
}
2000008c:	46c0      	nop			; (mov r8, r8)
2000008e:	46bd      	mov	sp, r7
20000090:	b002      	add	sp, #8
20000092:	bd80      	pop	{r7, pc}

20000094 <delay_milli>:

void delay_milli(unsigned int ms) {
20000094:	b580      	push	{r7, lr}
20000096:	b082      	sub	sp, #8
20000098:	af00      	add	r7, sp, #0
2000009a:	6078      	str	r0, [r7, #4]
    #ifdef SIMULATOR
        ms = ms/1000;
        ms++;
    #endif
    while (ms > 0) {
2000009c:	e007      	b.n	200000ae <delay_milli+0x1a>
        delay_mikro(1000);
2000009e:	23fa      	movs	r3, #250	; 0xfa
200000a0:	009b      	lsls	r3, r3, #2
200000a2:	0018      	movs	r0, r3
200000a4:	f7ff ffdf 	bl	20000066 <delay_mikro>
        ms--;
200000a8:	687b      	ldr	r3, [r7, #4]
200000aa:	3b01      	subs	r3, #1
200000ac:	607b      	str	r3, [r7, #4]
    while (ms > 0) {
200000ae:	687b      	ldr	r3, [r7, #4]
200000b0:	2b00      	cmp	r3, #0
200000b2:	d1f4      	bne.n	2000009e <delay_milli+0xa>
    }
}
200000b4:	46c0      	nop			; (mov r8, r8)
200000b6:	46bd      	mov	sp, r7
200000b8:	b002      	add	sp, #8
200000ba:	bd80      	pop	{r7, pc}

200000bc <graphic_ctrl_bit_set>:


typedef unsigned char uint8_t;

static void graphic_ctrl_bit_set(uint8_t x) {
200000bc:	b580      	push	{r7, lr}
200000be:	b084      	sub	sp, #16
200000c0:	af00      	add	r7, sp, #0
200000c2:	0002      	movs	r2, r0
200000c4:	1dfb      	adds	r3, r7, #7
200000c6:	701a      	strb	r2, [r3, #0]
    uint8_t c;
    c = *portOdrLow;
200000c8:	4a0f      	ldr	r2, [pc, #60]	; (20000108 <graphic_ctrl_bit_set+0x4c>)
200000ca:	200f      	movs	r0, #15
200000cc:	183b      	adds	r3, r7, r0
200000ce:	7812      	ldrb	r2, [r2, #0]
200000d0:	701a      	strb	r2, [r3, #0]
    c &= ~B_SELECT;
200000d2:	183b      	adds	r3, r7, r0
200000d4:	183a      	adds	r2, r7, r0
200000d6:	7812      	ldrb	r2, [r2, #0]
200000d8:	2104      	movs	r1, #4
200000da:	438a      	bics	r2, r1
200000dc:	701a      	strb	r2, [r3, #0]
    c |= (~B_SELECT & x);
200000de:	1dfb      	adds	r3, r7, #7
200000e0:	781b      	ldrb	r3, [r3, #0]
200000e2:	b25b      	sxtb	r3, r3
200000e4:	2204      	movs	r2, #4
200000e6:	4393      	bics	r3, r2
200000e8:	b25a      	sxtb	r2, r3
200000ea:	183b      	adds	r3, r7, r0
200000ec:	781b      	ldrb	r3, [r3, #0]
200000ee:	b25b      	sxtb	r3, r3
200000f0:	4313      	orrs	r3, r2
200000f2:	b25a      	sxtb	r2, r3
200000f4:	183b      	adds	r3, r7, r0
200000f6:	701a      	strb	r2, [r3, #0]
    *portOdrLow = c;
200000f8:	4a03      	ldr	r2, [pc, #12]	; (20000108 <graphic_ctrl_bit_set+0x4c>)
200000fa:	183b      	adds	r3, r7, r0
200000fc:	781b      	ldrb	r3, [r3, #0]
200000fe:	7013      	strb	r3, [r2, #0]
}
20000100:	46c0      	nop			; (mov r8, r8)
20000102:	46bd      	mov	sp, r7
20000104:	b004      	add	sp, #16
20000106:	bd80      	pop	{r7, pc}
20000108:	40021014 	andmi	r1, r2, r4, lsl r0

2000010c <graphic_ctrl_bit_clear>:

static void graphic_ctrl_bit_clear(uint8_t x) {
2000010c:	b580      	push	{r7, lr}
2000010e:	b084      	sub	sp, #16
20000110:	af00      	add	r7, sp, #0
20000112:	0002      	movs	r2, r0
20000114:	1dfb      	adds	r3, r7, #7
20000116:	701a      	strb	r2, [r3, #0]
    uint8_t c;
    c = *portOdrLow;
20000118:	4a0f      	ldr	r2, [pc, #60]	; (20000158 <graphic_ctrl_bit_clear+0x4c>)
2000011a:	200f      	movs	r0, #15
2000011c:	183b      	adds	r3, r7, r0
2000011e:	7812      	ldrb	r2, [r2, #0]
20000120:	701a      	strb	r2, [r3, #0]
    c &= ~B_SELECT;
20000122:	183b      	adds	r3, r7, r0
20000124:	183a      	adds	r2, r7, r0
20000126:	7812      	ldrb	r2, [r2, #0]
20000128:	2104      	movs	r1, #4
2000012a:	438a      	bics	r2, r1
2000012c:	701a      	strb	r2, [r3, #0]
    c &= ~x;
2000012e:	1dfb      	adds	r3, r7, #7
20000130:	781b      	ldrb	r3, [r3, #0]
20000132:	b25b      	sxtb	r3, r3
20000134:	43db      	mvns	r3, r3
20000136:	b25b      	sxtb	r3, r3
20000138:	183a      	adds	r2, r7, r0
2000013a:	7812      	ldrb	r2, [r2, #0]
2000013c:	b252      	sxtb	r2, r2
2000013e:	4013      	ands	r3, r2
20000140:	b25a      	sxtb	r2, r3
20000142:	183b      	adds	r3, r7, r0
20000144:	701a      	strb	r2, [r3, #0]
    *portOdrLow = c;
20000146:	4a04      	ldr	r2, [pc, #16]	; (20000158 <graphic_ctrl_bit_clear+0x4c>)
20000148:	183b      	adds	r3, r7, r0
2000014a:	781b      	ldrb	r3, [r3, #0]
2000014c:	7013      	strb	r3, [r2, #0]
}
2000014e:	46c0      	nop			; (mov r8, r8)
20000150:	46bd      	mov	sp, r7
20000152:	b004      	add	sp, #16
20000154:	bd80      	pop	{r7, pc}
20000156:	46c0      	nop			; (mov r8, r8)
20000158:	40021014 	andmi	r1, r2, r4, lsl r0

2000015c <select_controller>:

static void select_controller(uint8_t controller) {
2000015c:	b580      	push	{r7, lr}
2000015e:	b084      	sub	sp, #16
20000160:	af00      	add	r7, sp, #0
20000162:	0002      	movs	r2, r0
20000164:	1dfb      	adds	r3, r7, #7
20000166:	701a      	strb	r2, [r3, #0]
    uint8_t mask = (B_CS1 | B_CS2);
20000168:	200f      	movs	r0, #15
2000016a:	183b      	adds	r3, r7, r0
2000016c:	2218      	movs	r2, #24
2000016e:	701a      	strb	r2, [r3, #0]
    controller &= mask;
20000170:	1dfb      	adds	r3, r7, #7
20000172:	1dfa      	adds	r2, r7, #7
20000174:	1839      	adds	r1, r7, r0
20000176:	7812      	ldrb	r2, [r2, #0]
20000178:	7809      	ldrb	r1, [r1, #0]
2000017a:	400a      	ands	r2, r1
2000017c:	701a      	strb	r2, [r3, #0]
    
    uint8_t c;
    c = *portOdrLow;
2000017e:	4a10      	ldr	r2, [pc, #64]	; (200001c0 <select_controller+0x64>)
20000180:	210e      	movs	r1, #14
20000182:	187b      	adds	r3, r7, r1
20000184:	7812      	ldrb	r2, [r2, #0]
20000186:	701a      	strb	r2, [r3, #0]
    c &= ~mask;     //Set CS1 and CS2 to 0
20000188:	183b      	adds	r3, r7, r0
2000018a:	781b      	ldrb	r3, [r3, #0]
2000018c:	b25b      	sxtb	r3, r3
2000018e:	43db      	mvns	r3, r3
20000190:	b25b      	sxtb	r3, r3
20000192:	187a      	adds	r2, r7, r1
20000194:	7812      	ldrb	r2, [r2, #0]
20000196:	b252      	sxtb	r2, r2
20000198:	4013      	ands	r3, r2
2000019a:	b25a      	sxtb	r2, r3
2000019c:	187b      	adds	r3, r7, r1
2000019e:	701a      	strb	r2, [r3, #0]
    c |= controller;//OR in CS1 and CS2 from controller
200001a0:	187b      	adds	r3, r7, r1
200001a2:	0008      	movs	r0, r1
200001a4:	1879      	adds	r1, r7, r1
200001a6:	1dfa      	adds	r2, r7, #7
200001a8:	7809      	ldrb	r1, [r1, #0]
200001aa:	7812      	ldrb	r2, [r2, #0]
200001ac:	430a      	orrs	r2, r1
200001ae:	701a      	strb	r2, [r3, #0]
    *portOdrLow = c;
200001b0:	4a03      	ldr	r2, [pc, #12]	; (200001c0 <select_controller+0x64>)
200001b2:	183b      	adds	r3, r7, r0
200001b4:	781b      	ldrb	r3, [r3, #0]
200001b6:	7013      	strb	r3, [r2, #0]
}
200001b8:	46c0      	nop			; (mov r8, r8)
200001ba:	46bd      	mov	sp, r7
200001bc:	b004      	add	sp, #16
200001be:	bd80      	pop	{r7, pc}
200001c0:	40021014 	andmi	r1, r2, r4, lsl r0

200001c4 <graphic_wait_ready>:

static void graphic_wait_ready(void) {
200001c4:	b580      	push	{r7, lr}
200001c6:	b082      	sub	sp, #8
200001c8:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_clear(B_E);
200001ca:	2040      	movs	r0, #64	; 0x40
200001cc:	f7ff ff9e 	bl	2000010c <graphic_ctrl_bit_clear>
    *portModer = 0x00005555;
200001d0:	4b14      	ldr	r3, [pc, #80]	; (20000224 <graphic_wait_ready+0x60>)
200001d2:	4a15      	ldr	r2, [pc, #84]	; (20000228 <graphic_wait_ready+0x64>)
200001d4:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_RS);
200001d6:	2001      	movs	r0, #1
200001d8:	f7ff ff98 	bl	2000010c <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_set(B_RW);
200001dc:	2002      	movs	r0, #2
200001de:	f7ff ff6d 	bl	200000bc <graphic_ctrl_bit_set>
    delay_500ns();
200001e2:	f7ff ff37 	bl	20000054 <delay_500ns>
    
    while(1) {
        graphic_ctrl_bit_set(B_E);
200001e6:	2040      	movs	r0, #64	; 0x40
200001e8:	f7ff ff68 	bl	200000bc <graphic_ctrl_bit_set>
        delay_500ns();
200001ec:	f7ff ff32 	bl	20000054 <delay_500ns>
        graphic_ctrl_bit_clear(B_E);
200001f0:	2040      	movs	r0, #64	; 0x40
200001f2:	f7ff ff8b 	bl	2000010c <graphic_ctrl_bit_clear>
        delay_500ns();
200001f6:	f7ff ff2d 	bl	20000054 <delay_500ns>
        uint8_t busy = *portIdrHigh;
200001fa:	4a0c      	ldr	r2, [pc, #48]	; (2000022c <graphic_wait_ready+0x68>)
200001fc:	1dfb      	adds	r3, r7, #7
200001fe:	7812      	ldrb	r2, [r2, #0]
20000200:	701a      	strb	r2, [r3, #0]
        busy &= LCD_BUSY;
20000202:	1dfb      	adds	r3, r7, #7
20000204:	1dfa      	adds	r2, r7, #7
20000206:	7812      	ldrb	r2, [r2, #0]
20000208:	217f      	movs	r1, #127	; 0x7f
2000020a:	438a      	bics	r2, r1
2000020c:	701a      	strb	r2, [r3, #0]
        if (~busy) {
            break;
2000020e:	46c0      	nop			; (mov r8, r8)
        }
    }
    graphic_ctrl_bit_set(B_E);
20000210:	2040      	movs	r0, #64	; 0x40
20000212:	f7ff ff53 	bl	200000bc <graphic_ctrl_bit_set>
    *portModer = 0x55555555;
20000216:	4b03      	ldr	r3, [pc, #12]	; (20000224 <graphic_wait_ready+0x60>)
20000218:	4a05      	ldr	r2, [pc, #20]	; (20000230 <graphic_wait_ready+0x6c>)
2000021a:	601a      	str	r2, [r3, #0]
}
2000021c:	46c0      	nop			; (mov r8, r8)
2000021e:	46bd      	mov	sp, r7
20000220:	b002      	add	sp, #8
20000222:	bd80      	pop	{r7, pc}
20000224:	40021000 	andmi	r1, r2, r0
20000228:	00005555 	andeq	r5, r0, r5, asr r5
2000022c:	40021011 	andmi	r1, r2, r1, lsl r0
20000230:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000234 <graphic_read>:

static uint8_t graphic_read(uint8_t controller) {
20000234:	b580      	push	{r7, lr}
20000236:	b084      	sub	sp, #16
20000238:	af00      	add	r7, sp, #0
2000023a:	0002      	movs	r2, r0
2000023c:	1dfb      	adds	r3, r7, #7
2000023e:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20000240:	2040      	movs	r0, #64	; 0x40
20000242:	f7ff ff63 	bl	2000010c <graphic_ctrl_bit_clear>
    *portModer = 0x00005555;
20000246:	4b1b      	ldr	r3, [pc, #108]	; (200002b4 <graphic_read+0x80>)
20000248:	4a1b      	ldr	r2, [pc, #108]	; (200002b8 <graphic_read+0x84>)
2000024a:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_set(B_RS);
2000024c:	2001      	movs	r0, #1
2000024e:	f7ff ff35 	bl	200000bc <graphic_ctrl_bit_set>
    graphic_ctrl_bit_set(B_RW);
20000252:	2002      	movs	r0, #2
20000254:	f7ff ff32 	bl	200000bc <graphic_ctrl_bit_set>
    select_controller(controller);
20000258:	1dfb      	adds	r3, r7, #7
2000025a:	781b      	ldrb	r3, [r3, #0]
2000025c:	0018      	movs	r0, r3
2000025e:	f7ff ff7d 	bl	2000015c <select_controller>
    delay_500ns();
20000262:	f7ff fef7 	bl	20000054 <delay_500ns>
    graphic_ctrl_bit_set(B_E);
20000266:	2040      	movs	r0, #64	; 0x40
20000268:	f7ff ff28 	bl	200000bc <graphic_ctrl_bit_set>
    delay_500ns();
2000026c:	f7ff fef2 	bl	20000054 <delay_500ns>
    uint8_t rv = *portIdrHigh;
20000270:	4a12      	ldr	r2, [pc, #72]	; (200002bc <graphic_read+0x88>)
20000272:	230f      	movs	r3, #15
20000274:	18fb      	adds	r3, r7, r3
20000276:	7812      	ldrb	r2, [r2, #0]
20000278:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
2000027a:	2040      	movs	r0, #64	; 0x40
2000027c:	f7ff ff46 	bl	2000010c <graphic_ctrl_bit_clear>
    *portModer = 0x55555555;
20000280:	4b0c      	ldr	r3, [pc, #48]	; (200002b4 <graphic_read+0x80>)
20000282:	4a0f      	ldr	r2, [pc, #60]	; (200002c0 <graphic_read+0x8c>)
20000284:	601a      	str	r2, [r3, #0]
    if (controller == B_CS1 || controller == B_CS2) {
20000286:	1dfb      	adds	r3, r7, #7
20000288:	781b      	ldrb	r3, [r3, #0]
2000028a:	2b08      	cmp	r3, #8
2000028c:	d003      	beq.n	20000296 <graphic_read+0x62>
2000028e:	1dfb      	adds	r3, r7, #7
20000290:	781b      	ldrb	r3, [r3, #0]
20000292:	2b10      	cmp	r3, #16
20000294:	d106      	bne.n	200002a4 <graphic_read+0x70>
        select_controller(controller);
20000296:	1dfb      	adds	r3, r7, #7
20000298:	781b      	ldrb	r3, [r3, #0]
2000029a:	0018      	movs	r0, r3
2000029c:	f7ff ff5e 	bl	2000015c <select_controller>
        graphic_wait_ready();
200002a0:	f7ff ff90 	bl	200001c4 <graphic_wait_ready>
    }
    return rv;
200002a4:	230f      	movs	r3, #15
200002a6:	18fb      	adds	r3, r7, r3
200002a8:	781b      	ldrb	r3, [r3, #0]
}
200002aa:	0018      	movs	r0, r3
200002ac:	46bd      	mov	sp, r7
200002ae:	b004      	add	sp, #16
200002b0:	bd80      	pop	{r7, pc}
200002b2:	46c0      	nop			; (mov r8, r8)
200002b4:	40021000 	andmi	r1, r2, r0
200002b8:	00005555 	andeq	r5, r0, r5, asr r5
200002bc:	40021011 	andmi	r1, r2, r1, lsl r0
200002c0:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200002c4 <graphic_write>:

static void graphic_write(uint8_t value, uint8_t controller) {
200002c4:	b580      	push	{r7, lr}
200002c6:	b082      	sub	sp, #8
200002c8:	af00      	add	r7, sp, #0
200002ca:	0002      	movs	r2, r0
200002cc:	1dfb      	adds	r3, r7, #7
200002ce:	701a      	strb	r2, [r3, #0]
200002d0:	1dbb      	adds	r3, r7, #6
200002d2:	1c0a      	adds	r2, r1, #0
200002d4:	701a      	strb	r2, [r3, #0]
    *portOdrHigh = value;
200002d6:	4a17      	ldr	r2, [pc, #92]	; (20000334 <graphic_write+0x70>)
200002d8:	1dfb      	adds	r3, r7, #7
200002da:	781b      	ldrb	r3, [r3, #0]
200002dc:	7013      	strb	r3, [r2, #0]
    select_controller(controller);
200002de:	1dbb      	adds	r3, r7, #6
200002e0:	781b      	ldrb	r3, [r3, #0]
200002e2:	0018      	movs	r0, r3
200002e4:	f7ff ff3a 	bl	2000015c <select_controller>
    delay_500ns();
200002e8:	f7ff feb4 	bl	20000054 <delay_500ns>
    graphic_ctrl_bit_set(B_E);
200002ec:	2040      	movs	r0, #64	; 0x40
200002ee:	f7ff fee5 	bl	200000bc <graphic_ctrl_bit_set>
    delay_500ns();
200002f2:	f7ff feaf 	bl	20000054 <delay_500ns>
    graphic_ctrl_bit_clear(B_E);
200002f6:	2040      	movs	r0, #64	; 0x40
200002f8:	f7ff ff08 	bl	2000010c <graphic_ctrl_bit_clear>
    
    if (controller == B_CS1 || controller == B_CS2) {
200002fc:	1dbb      	adds	r3, r7, #6
200002fe:	781b      	ldrb	r3, [r3, #0]
20000300:	2b08      	cmp	r3, #8
20000302:	d003      	beq.n	2000030c <graphic_write+0x48>
20000304:	1dbb      	adds	r3, r7, #6
20000306:	781b      	ldrb	r3, [r3, #0]
20000308:	2b10      	cmp	r3, #16
2000030a:	d106      	bne.n	2000031a <graphic_write+0x56>
        select_controller(controller);
2000030c:	1dbb      	adds	r3, r7, #6
2000030e:	781b      	ldrb	r3, [r3, #0]
20000310:	0018      	movs	r0, r3
20000312:	f7ff ff23 	bl	2000015c <select_controller>
        graphic_wait_ready();
20000316:	f7ff ff55 	bl	200001c4 <graphic_wait_ready>
    }
    
    *portOdrHigh = 0;
2000031a:	4b06      	ldr	r3, [pc, #24]	; (20000334 <graphic_write+0x70>)
2000031c:	2200      	movs	r2, #0
2000031e:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_set(B_E);
20000320:	2040      	movs	r0, #64	; 0x40
20000322:	f7ff fecb 	bl	200000bc <graphic_ctrl_bit_set>
    select_controller(0);
20000326:	2000      	movs	r0, #0
20000328:	f7ff ff18 	bl	2000015c <select_controller>
}
2000032c:	46c0      	nop			; (mov r8, r8)
2000032e:	46bd      	mov	sp, r7
20000330:	b002      	add	sp, #8
20000332:	bd80      	pop	{r7, pc}
20000334:	40021015 	andmi	r1, r2, r5, lsl r0

20000338 <graphic_write_command>:

static void graphic_write_command(uint8_t command, uint8_t controller) {
20000338:	b580      	push	{r7, lr}
2000033a:	b082      	sub	sp, #8
2000033c:	af00      	add	r7, sp, #0
2000033e:	0002      	movs	r2, r0
20000340:	1dfb      	adds	r3, r7, #7
20000342:	701a      	strb	r2, [r3, #0]
20000344:	1dbb      	adds	r3, r7, #6
20000346:	1c0a      	adds	r2, r1, #0
20000348:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
2000034a:	2040      	movs	r0, #64	; 0x40
2000034c:	f7ff fede 	bl	2000010c <graphic_ctrl_bit_clear>
    select_controller(controller);
20000350:	1dbb      	adds	r3, r7, #6
20000352:	781b      	ldrb	r3, [r3, #0]
20000354:	0018      	movs	r0, r3
20000356:	f7ff ff01 	bl	2000015c <select_controller>
    graphic_ctrl_bit_clear(B_RS);
2000035a:	2001      	movs	r0, #1
2000035c:	f7ff fed6 	bl	2000010c <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_clear(B_RW);
20000360:	2002      	movs	r0, #2
20000362:	f7ff fed3 	bl	2000010c <graphic_ctrl_bit_clear>
    graphic_write(command, controller);
20000366:	1dbb      	adds	r3, r7, #6
20000368:	781a      	ldrb	r2, [r3, #0]
2000036a:	1dfb      	adds	r3, r7, #7
2000036c:	781b      	ldrb	r3, [r3, #0]
2000036e:	0011      	movs	r1, r2
20000370:	0018      	movs	r0, r3
20000372:	f7ff ffa7 	bl	200002c4 <graphic_write>
}
20000376:	46c0      	nop			; (mov r8, r8)
20000378:	46bd      	mov	sp, r7
2000037a:	b002      	add	sp, #8
2000037c:	bd80      	pop	{r7, pc}

2000037e <graphic_write_data>:

static void graphic_write_data(uint8_t data, uint8_t controller) {
2000037e:	b580      	push	{r7, lr}
20000380:	b082      	sub	sp, #8
20000382:	af00      	add	r7, sp, #0
20000384:	0002      	movs	r2, r0
20000386:	1dfb      	adds	r3, r7, #7
20000388:	701a      	strb	r2, [r3, #0]
2000038a:	1dbb      	adds	r3, r7, #6
2000038c:	1c0a      	adds	r2, r1, #0
2000038e:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20000390:	2040      	movs	r0, #64	; 0x40
20000392:	f7ff febb 	bl	2000010c <graphic_ctrl_bit_clear>
    select_controller(controller);
20000396:	1dbb      	adds	r3, r7, #6
20000398:	781b      	ldrb	r3, [r3, #0]
2000039a:	0018      	movs	r0, r3
2000039c:	f7ff fede 	bl	2000015c <select_controller>
    graphic_ctrl_bit_set(B_RS);
200003a0:	2001      	movs	r0, #1
200003a2:	f7ff fe8b 	bl	200000bc <graphic_ctrl_bit_set>
    graphic_ctrl_bit_clear(B_RW);
200003a6:	2002      	movs	r0, #2
200003a8:	f7ff feb0 	bl	2000010c <graphic_ctrl_bit_clear>
    graphic_write(data, controller);
200003ac:	1dbb      	adds	r3, r7, #6
200003ae:	781a      	ldrb	r2, [r3, #0]
200003b0:	1dfb      	adds	r3, r7, #7
200003b2:	781b      	ldrb	r3, [r3, #0]
200003b4:	0011      	movs	r1, r2
200003b6:	0018      	movs	r0, r3
200003b8:	f7ff ff84 	bl	200002c4 <graphic_write>
}
200003bc:	46c0      	nop			; (mov r8, r8)
200003be:	46bd      	mov	sp, r7
200003c0:	b002      	add	sp, #8
200003c2:	bd80      	pop	{r7, pc}

200003c4 <graphic_read_data>:

static uint8_t graphic_read_data(uint8_t controller) {
200003c4:	b580      	push	{r7, lr}
200003c6:	b082      	sub	sp, #8
200003c8:	af00      	add	r7, sp, #0
200003ca:	0002      	movs	r2, r0
200003cc:	1dfb      	adds	r3, r7, #7
200003ce:	701a      	strb	r2, [r3, #0]
    graphic_read(controller);
200003d0:	1dfb      	adds	r3, r7, #7
200003d2:	781b      	ldrb	r3, [r3, #0]
200003d4:	0018      	movs	r0, r3
200003d6:	f7ff ff2d 	bl	20000234 <graphic_read>
    return graphic_read(controller);
200003da:	1dfb      	adds	r3, r7, #7
200003dc:	781b      	ldrb	r3, [r3, #0]
200003de:	0018      	movs	r0, r3
200003e0:	f7ff ff28 	bl	20000234 <graphic_read>
200003e4:	0003      	movs	r3, r0
}
200003e6:	0018      	movs	r0, r3
200003e8:	46bd      	mov	sp, r7
200003ea:	b002      	add	sp, #8
200003ec:	bd80      	pop	{r7, pc}

200003ee <graphic_initialize>:

static void graphic_initialize() {
200003ee:	b580      	push	{r7, lr}
200003f0:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_set(B_E);
200003f2:	2040      	movs	r0, #64	; 0x40
200003f4:	f7ff fe62 	bl	200000bc <graphic_ctrl_bit_set>
    delay_mikro(10);
200003f8:	200a      	movs	r0, #10
200003fa:	f7ff fe34 	bl	20000066 <delay_mikro>
    graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
200003fe:	2078      	movs	r0, #120	; 0x78
20000400:	f7ff fe84 	bl	2000010c <graphic_ctrl_bit_clear>
    delay_milli(30);
20000404:	201e      	movs	r0, #30
20000406:	f7ff fe45 	bl	20000094 <delay_milli>
    graphic_ctrl_bit_set(B_RST);
2000040a:	2020      	movs	r0, #32
2000040c:	f7ff fe56 	bl	200000bc <graphic_ctrl_bit_set>
    
    graphic_write_command(LCD_OFF,          B_CS1 | B_CS2);
20000410:	2118      	movs	r1, #24
20000412:	203e      	movs	r0, #62	; 0x3e
20000414:	f7ff ff90 	bl	20000338 <graphic_write_command>
    graphic_write_command(LCD_ON,           B_CS1 | B_CS2);
20000418:	2118      	movs	r1, #24
2000041a:	203f      	movs	r0, #63	; 0x3f
2000041c:	f7ff ff8c 	bl	20000338 <graphic_write_command>
    graphic_write_command(LCD_DISP_START,   B_CS1 | B_CS2);
20000420:	2118      	movs	r1, #24
20000422:	20c0      	movs	r0, #192	; 0xc0
20000424:	f7ff ff88 	bl	20000338 <graphic_write_command>
    graphic_write_command(LCD_SET_ADD,      B_CS1 | B_CS2);
20000428:	2118      	movs	r1, #24
2000042a:	2040      	movs	r0, #64	; 0x40
2000042c:	f7ff ff84 	bl	20000338 <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE,     B_CS1 | B_CS2);
20000430:	2118      	movs	r1, #24
20000432:	20b8      	movs	r0, #184	; 0xb8
20000434:	f7ff ff80 	bl	20000338 <graphic_write_command>
    
    select_controller(0);
20000438:	2000      	movs	r0, #0
2000043a:	f7ff fe8f 	bl	2000015c <select_controller>
}
2000043e:	46c0      	nop			; (mov r8, r8)
20000440:	46bd      	mov	sp, r7
20000442:	bd80      	pop	{r7, pc}

20000444 <graphic_clear_screen>:

static void graphic_clear_screen() {
20000444:	b580      	push	{r7, lr}
20000446:	b082      	sub	sp, #8
20000448:	af00      	add	r7, sp, #0
    for (uint8_t page = 0; page < 8; page++) {
2000044a:	1dfb      	adds	r3, r7, #7
2000044c:	2200      	movs	r2, #0
2000044e:	701a      	strb	r2, [r3, #0]
20000450:	e023      	b.n	2000049a <graphic_clear_screen+0x56>
        graphic_write_command(LCD_SET_PAGE | page,  B_CS1 | B_CS2);
20000452:	1dfb      	adds	r3, r7, #7
20000454:	781b      	ldrb	r3, [r3, #0]
20000456:	2248      	movs	r2, #72	; 0x48
20000458:	4252      	negs	r2, r2
2000045a:	4313      	orrs	r3, r2
2000045c:	b2db      	uxtb	r3, r3
2000045e:	2118      	movs	r1, #24
20000460:	0018      	movs	r0, r3
20000462:	f7ff ff69 	bl	20000338 <graphic_write_command>
        graphic_write_command(LCD_SET_ADD | 0,      B_CS1 | B_CS2);
20000466:	2118      	movs	r1, #24
20000468:	2040      	movs	r0, #64	; 0x40
2000046a:	f7ff ff65 	bl	20000338 <graphic_write_command>
        for (uint8_t add = 0; add < 64; add++) {
2000046e:	1dbb      	adds	r3, r7, #6
20000470:	2200      	movs	r2, #0
20000472:	701a      	strb	r2, [r3, #0]
20000474:	e008      	b.n	20000488 <graphic_clear_screen+0x44>
            graphic_write_data(0, B_CS1 | B_CS2);
20000476:	2118      	movs	r1, #24
20000478:	2000      	movs	r0, #0
2000047a:	f7ff ff80 	bl	2000037e <graphic_write_data>
        for (uint8_t add = 0; add < 64; add++) {
2000047e:	1dbb      	adds	r3, r7, #6
20000480:	781a      	ldrb	r2, [r3, #0]
20000482:	1dbb      	adds	r3, r7, #6
20000484:	3201      	adds	r2, #1
20000486:	701a      	strb	r2, [r3, #0]
20000488:	1dbb      	adds	r3, r7, #6
2000048a:	781b      	ldrb	r3, [r3, #0]
2000048c:	2b3f      	cmp	r3, #63	; 0x3f
2000048e:	d9f2      	bls.n	20000476 <graphic_clear_screen+0x32>
    for (uint8_t page = 0; page < 8; page++) {
20000490:	1dfb      	adds	r3, r7, #7
20000492:	781a      	ldrb	r2, [r3, #0]
20000494:	1dfb      	adds	r3, r7, #7
20000496:	3201      	adds	r2, #1
20000498:	701a      	strb	r2, [r3, #0]
2000049a:	1dfb      	adds	r3, r7, #7
2000049c:	781b      	ldrb	r3, [r3, #0]
2000049e:	2b07      	cmp	r3, #7
200004a0:	d9d7      	bls.n	20000452 <graphic_clear_screen+0xe>
        }
    }
}
200004a2:	46c0      	nop			; (mov r8, r8)
200004a4:	46bd      	mov	sp, r7
200004a6:	b002      	add	sp, #8
200004a8:	bd80      	pop	{r7, pc}

200004aa <pixel>:


static uint8_t buffer[8][128];


void pixel(uint8_t x, uint8_t y, uint8_t set) {
200004aa:	b590      	push	{r4, r7, lr}
200004ac:	b085      	sub	sp, #20
200004ae:	af00      	add	r7, sp, #0
200004b0:	0004      	movs	r4, r0
200004b2:	0008      	movs	r0, r1
200004b4:	0011      	movs	r1, r2
200004b6:	1dfb      	adds	r3, r7, #7
200004b8:	1c22      	adds	r2, r4, #0
200004ba:	701a      	strb	r2, [r3, #0]
200004bc:	1dbb      	adds	r3, r7, #6
200004be:	1c02      	adds	r2, r0, #0
200004c0:	701a      	strb	r2, [r3, #0]
200004c2:	1d7b      	adds	r3, r7, #5
200004c4:	1c0a      	adds	r2, r1, #0
200004c6:	701a      	strb	r2, [r3, #0]
	if (x>127 || y>63) return;
200004c8:	1dfb      	adds	r3, r7, #7
200004ca:	781b      	ldrb	r3, [r3, #0]
200004cc:	b25b      	sxtb	r3, r3
200004ce:	2b00      	cmp	r3, #0
200004d0:	db47      	blt.n	20000562 <pixel+0xb8>
200004d2:	1dbb      	adds	r3, r7, #6
200004d4:	781b      	ldrb	r3, [r3, #0]
200004d6:	2b3f      	cmp	r3, #63	; 0x3f
200004d8:	d843      	bhi.n	20000562 <pixel+0xb8>
	
    uint8_t mask = 1 << (y % 8);
200004da:	1dbb      	adds	r3, r7, #6
200004dc:	781b      	ldrb	r3, [r3, #0]
200004de:	2207      	movs	r2, #7
200004e0:	4013      	ands	r3, r2
200004e2:	2201      	movs	r2, #1
200004e4:	409a      	lsls	r2, r3
200004e6:	230f      	movs	r3, #15
200004e8:	18fb      	adds	r3, r7, r3
200004ea:	701a      	strb	r2, [r3, #0]
	
	if (set) {
200004ec:	1d7b      	adds	r3, r7, #5
200004ee:	781b      	ldrb	r3, [r3, #0]
200004f0:	2b00      	cmp	r3, #0
200004f2:	d018      	beq.n	20000526 <pixel+0x7c>
		buffer[y/8][x] |= mask;
200004f4:	1dbb      	adds	r3, r7, #6
200004f6:	781b      	ldrb	r3, [r3, #0]
200004f8:	08db      	lsrs	r3, r3, #3
200004fa:	b2d8      	uxtb	r0, r3
200004fc:	0002      	movs	r2, r0
200004fe:	1dfb      	adds	r3, r7, #7
20000500:	781b      	ldrb	r3, [r3, #0]
20000502:	491a      	ldr	r1, [pc, #104]	; (2000056c <pixel+0xc2>)
20000504:	01d2      	lsls	r2, r2, #7
20000506:	188a      	adds	r2, r1, r2
20000508:	5cd1      	ldrb	r1, [r2, r3]
2000050a:	0004      	movs	r4, r0
2000050c:	1dfb      	adds	r3, r7, #7
2000050e:	781b      	ldrb	r3, [r3, #0]
20000510:	220f      	movs	r2, #15
20000512:	18ba      	adds	r2, r7, r2
20000514:	7812      	ldrb	r2, [r2, #0]
20000516:	430a      	orrs	r2, r1
20000518:	b2d0      	uxtb	r0, r2
2000051a:	4914      	ldr	r1, [pc, #80]	; (2000056c <pixel+0xc2>)
2000051c:	01e2      	lsls	r2, r4, #7
2000051e:	188a      	adds	r2, r1, r2
20000520:	1c01      	adds	r1, r0, #0
20000522:	54d1      	strb	r1, [r2, r3]
20000524:	e01e      	b.n	20000564 <pixel+0xba>
	} else {
		buffer[y/8][x] &= ~mask;
20000526:	1dbb      	adds	r3, r7, #6
20000528:	781b      	ldrb	r3, [r3, #0]
2000052a:	08db      	lsrs	r3, r3, #3
2000052c:	b2d8      	uxtb	r0, r3
2000052e:	0002      	movs	r2, r0
20000530:	1dfb      	adds	r3, r7, #7
20000532:	781b      	ldrb	r3, [r3, #0]
20000534:	490d      	ldr	r1, [pc, #52]	; (2000056c <pixel+0xc2>)
20000536:	01d2      	lsls	r2, r2, #7
20000538:	188a      	adds	r2, r1, r2
2000053a:	5cd3      	ldrb	r3, [r2, r3]
2000053c:	b25b      	sxtb	r3, r3
2000053e:	220f      	movs	r2, #15
20000540:	18ba      	adds	r2, r7, r2
20000542:	7812      	ldrb	r2, [r2, #0]
20000544:	b252      	sxtb	r2, r2
20000546:	43d2      	mvns	r2, r2
20000548:	b252      	sxtb	r2, r2
2000054a:	4013      	ands	r3, r2
2000054c:	b259      	sxtb	r1, r3
2000054e:	0002      	movs	r2, r0
20000550:	1dfb      	adds	r3, r7, #7
20000552:	781b      	ldrb	r3, [r3, #0]
20000554:	b2c8      	uxtb	r0, r1
20000556:	4905      	ldr	r1, [pc, #20]	; (2000056c <pixel+0xc2>)
20000558:	01d2      	lsls	r2, r2, #7
2000055a:	188a      	adds	r2, r1, r2
2000055c:	1c01      	adds	r1, r0, #0
2000055e:	54d1      	strb	r1, [r2, r3]
20000560:	e000      	b.n	20000564 <pixel+0xba>
	if (x>127 || y>63) return;
20000562:	46c0      	nop			; (mov r8, r8)
	}
}
20000564:	46bd      	mov	sp, r7
20000566:	b005      	add	sp, #20
20000568:	bd90      	pop	{r4, r7, pc}
2000056a:	46c0      	nop			; (mov r8, r8)
2000056c:	20000bcc 	andcs	r0, r0, ip, asr #23

20000570 <clear_buffer>:

void clear_buffer() {
20000570:	b580      	push	{r7, lr}
20000572:	b082      	sub	sp, #8
20000574:	af00      	add	r7, sp, #0
	for (uint8_t y = 0; y<8; y++) {
20000576:	1dfb      	adds	r3, r7, #7
20000578:	2200      	movs	r2, #0
2000057a:	701a      	strb	r2, [r3, #0]
2000057c:	e01b      	b.n	200005b6 <clear_buffer+0x46>
		for (uint8_t x = 0; x<128; x++) {
2000057e:	1dbb      	adds	r3, r7, #6
20000580:	2200      	movs	r2, #0
20000582:	701a      	strb	r2, [r3, #0]
20000584:	e00d      	b.n	200005a2 <clear_buffer+0x32>
			buffer[y][x] = 0;
20000586:	1dfb      	adds	r3, r7, #7
20000588:	781a      	ldrb	r2, [r3, #0]
2000058a:	1dbb      	adds	r3, r7, #6
2000058c:	781b      	ldrb	r3, [r3, #0]
2000058e:	490e      	ldr	r1, [pc, #56]	; (200005c8 <clear_buffer+0x58>)
20000590:	01d2      	lsls	r2, r2, #7
20000592:	188a      	adds	r2, r1, r2
20000594:	2100      	movs	r1, #0
20000596:	54d1      	strb	r1, [r2, r3]
		for (uint8_t x = 0; x<128; x++) {
20000598:	1dbb      	adds	r3, r7, #6
2000059a:	781a      	ldrb	r2, [r3, #0]
2000059c:	1dbb      	adds	r3, r7, #6
2000059e:	3201      	adds	r2, #1
200005a0:	701a      	strb	r2, [r3, #0]
200005a2:	1dbb      	adds	r3, r7, #6
200005a4:	781b      	ldrb	r3, [r3, #0]
200005a6:	b25b      	sxtb	r3, r3
200005a8:	2b00      	cmp	r3, #0
200005aa:	daec      	bge.n	20000586 <clear_buffer+0x16>
	for (uint8_t y = 0; y<8; y++) {
200005ac:	1dfb      	adds	r3, r7, #7
200005ae:	781a      	ldrb	r2, [r3, #0]
200005b0:	1dfb      	adds	r3, r7, #7
200005b2:	3201      	adds	r2, #1
200005b4:	701a      	strb	r2, [r3, #0]
200005b6:	1dfb      	adds	r3, r7, #7
200005b8:	781b      	ldrb	r3, [r3, #0]
200005ba:	2b07      	cmp	r3, #7
200005bc:	d9df      	bls.n	2000057e <clear_buffer+0xe>
		}
	}
}
200005be:	46c0      	nop			; (mov r8, r8)
200005c0:	46bd      	mov	sp, r7
200005c2:	b002      	add	sp, #8
200005c4:	bd80      	pop	{r7, pc}
200005c6:	46c0      	nop			; (mov r8, r8)
200005c8:	20000bcc 	andcs	r0, r0, ip, asr #23

200005cc <draw_buffer>:

void draw_buffer() {
200005cc:	b580      	push	{r7, lr}
200005ce:	b082      	sub	sp, #8
200005d0:	af00      	add	r7, sp, #0
	for (uint8_t y = 0; y<8; y++) {
200005d2:	1dfb      	adds	r3, r7, #7
200005d4:	2200      	movs	r2, #0
200005d6:	701a      	strb	r2, [r3, #0]
200005d8:	e038      	b.n	2000064c <draw_buffer+0x80>
		for (uint8_t x = 0; x<64; x++) {
200005da:	1dbb      	adds	r3, r7, #6
200005dc:	2200      	movs	r2, #0
200005de:	701a      	strb	r2, [r3, #0]
200005e0:	e02b      	b.n	2000063a <draw_buffer+0x6e>
			graphic_write_command(LCD_SET_ADD | x, B_CS1);
200005e2:	1dbb      	adds	r3, r7, #6
200005e4:	781b      	ldrb	r3, [r3, #0]
200005e6:	2240      	movs	r2, #64	; 0x40
200005e8:	4313      	orrs	r3, r2
200005ea:	b2db      	uxtb	r3, r3
200005ec:	2108      	movs	r1, #8
200005ee:	0018      	movs	r0, r3
200005f0:	f7ff fea2 	bl	20000338 <graphic_write_command>
			graphic_write_command(LCD_SET_PAGE | y, B_CS1);
200005f4:	1dfb      	adds	r3, r7, #7
200005f6:	781b      	ldrb	r3, [r3, #0]
200005f8:	2248      	movs	r2, #72	; 0x48
200005fa:	4252      	negs	r2, r2
200005fc:	4313      	orrs	r3, r2
200005fe:	b2db      	uxtb	r3, r3
20000600:	2108      	movs	r1, #8
20000602:	0018      	movs	r0, r3
20000604:	f7ff fe98 	bl	20000338 <graphic_write_command>
			graphic_write_data(buffer[y][x], B_CS1);
20000608:	1dfb      	adds	r3, r7, #7
2000060a:	781a      	ldrb	r2, [r3, #0]
2000060c:	1dbb      	adds	r3, r7, #6
2000060e:	781b      	ldrb	r3, [r3, #0]
20000610:	4935      	ldr	r1, [pc, #212]	; (200006e8 <draw_buffer+0x11c>)
20000612:	01d2      	lsls	r2, r2, #7
20000614:	188a      	adds	r2, r1, r2
20000616:	5cd3      	ldrb	r3, [r2, r3]
20000618:	2108      	movs	r1, #8
2000061a:	0018      	movs	r0, r3
2000061c:	f7ff feaf 	bl	2000037e <graphic_write_data>
			
			graphic_write_command(LCD_ON,           B_CS1 | B_CS2);
20000620:	2118      	movs	r1, #24
20000622:	203f      	movs	r0, #63	; 0x3f
20000624:	f7ff fe88 	bl	20000338 <graphic_write_command>
			graphic_write_command(LCD_DISP_START,   B_CS1 | B_CS2);
20000628:	2118      	movs	r1, #24
2000062a:	20c0      	movs	r0, #192	; 0xc0
2000062c:	f7ff fe84 	bl	20000338 <graphic_write_command>
		for (uint8_t x = 0; x<64; x++) {
20000630:	1dbb      	adds	r3, r7, #6
20000632:	781a      	ldrb	r2, [r3, #0]
20000634:	1dbb      	adds	r3, r7, #6
20000636:	3201      	adds	r2, #1
20000638:	701a      	strb	r2, [r3, #0]
2000063a:	1dbb      	adds	r3, r7, #6
2000063c:	781b      	ldrb	r3, [r3, #0]
2000063e:	2b3f      	cmp	r3, #63	; 0x3f
20000640:	d9cf      	bls.n	200005e2 <draw_buffer+0x16>
	for (uint8_t y = 0; y<8; y++) {
20000642:	1dfb      	adds	r3, r7, #7
20000644:	781a      	ldrb	r2, [r3, #0]
20000646:	1dfb      	adds	r3, r7, #7
20000648:	3201      	adds	r2, #1
2000064a:	701a      	strb	r2, [r3, #0]
2000064c:	1dfb      	adds	r3, r7, #7
2000064e:	781b      	ldrb	r3, [r3, #0]
20000650:	2b07      	cmp	r3, #7
20000652:	d9c2      	bls.n	200005da <draw_buffer+0xe>
		}
	}
	for (uint8_t y = 0; y<8; y++) {
20000654:	1d7b      	adds	r3, r7, #5
20000656:	2200      	movs	r2, #0
20000658:	701a      	strb	r2, [r3, #0]
2000065a:	e03d      	b.n	200006d8 <draw_buffer+0x10c>
		for (uint8_t x = 64; x<128; x++) {
2000065c:	1d3b      	adds	r3, r7, #4
2000065e:	2240      	movs	r2, #64	; 0x40
20000660:	701a      	strb	r2, [r3, #0]
20000662:	e02f      	b.n	200006c4 <draw_buffer+0xf8>
			graphic_write_command(LCD_SET_ADD | x-64, B_CS2);
20000664:	1d3b      	adds	r3, r7, #4
20000666:	781b      	ldrb	r3, [r3, #0]
20000668:	3b40      	subs	r3, #64	; 0x40
2000066a:	b2db      	uxtb	r3, r3
2000066c:	b25b      	sxtb	r3, r3
2000066e:	2240      	movs	r2, #64	; 0x40
20000670:	4313      	orrs	r3, r2
20000672:	b25b      	sxtb	r3, r3
20000674:	b2db      	uxtb	r3, r3
20000676:	2110      	movs	r1, #16
20000678:	0018      	movs	r0, r3
2000067a:	f7ff fe5d 	bl	20000338 <graphic_write_command>
			graphic_write_command(LCD_SET_PAGE | y, B_CS2);
2000067e:	1d7b      	adds	r3, r7, #5
20000680:	781b      	ldrb	r3, [r3, #0]
20000682:	2248      	movs	r2, #72	; 0x48
20000684:	4252      	negs	r2, r2
20000686:	4313      	orrs	r3, r2
20000688:	b2db      	uxtb	r3, r3
2000068a:	2110      	movs	r1, #16
2000068c:	0018      	movs	r0, r3
2000068e:	f7ff fe53 	bl	20000338 <graphic_write_command>
			graphic_write_data(buffer[y][x], B_CS2);
20000692:	1d7b      	adds	r3, r7, #5
20000694:	781a      	ldrb	r2, [r3, #0]
20000696:	1d3b      	adds	r3, r7, #4
20000698:	781b      	ldrb	r3, [r3, #0]
2000069a:	4913      	ldr	r1, [pc, #76]	; (200006e8 <draw_buffer+0x11c>)
2000069c:	01d2      	lsls	r2, r2, #7
2000069e:	188a      	adds	r2, r1, r2
200006a0:	5cd3      	ldrb	r3, [r2, r3]
200006a2:	2110      	movs	r1, #16
200006a4:	0018      	movs	r0, r3
200006a6:	f7ff fe6a 	bl	2000037e <graphic_write_data>
			
			graphic_write_command(LCD_ON,           B_CS1 | B_CS2);
200006aa:	2118      	movs	r1, #24
200006ac:	203f      	movs	r0, #63	; 0x3f
200006ae:	f7ff fe43 	bl	20000338 <graphic_write_command>
			graphic_write_command(LCD_DISP_START,   B_CS1 | B_CS2);
200006b2:	2118      	movs	r1, #24
200006b4:	20c0      	movs	r0, #192	; 0xc0
200006b6:	f7ff fe3f 	bl	20000338 <graphic_write_command>
		for (uint8_t x = 64; x<128; x++) {
200006ba:	1d3b      	adds	r3, r7, #4
200006bc:	781a      	ldrb	r2, [r3, #0]
200006be:	1d3b      	adds	r3, r7, #4
200006c0:	3201      	adds	r2, #1
200006c2:	701a      	strb	r2, [r3, #0]
200006c4:	1d3b      	adds	r3, r7, #4
200006c6:	781b      	ldrb	r3, [r3, #0]
200006c8:	b25b      	sxtb	r3, r3
200006ca:	2b00      	cmp	r3, #0
200006cc:	daca      	bge.n	20000664 <draw_buffer+0x98>
	for (uint8_t y = 0; y<8; y++) {
200006ce:	1d7b      	adds	r3, r7, #5
200006d0:	781a      	ldrb	r2, [r3, #0]
200006d2:	1d7b      	adds	r3, r7, #5
200006d4:	3201      	adds	r2, #1
200006d6:	701a      	strb	r2, [r3, #0]
200006d8:	1d7b      	adds	r3, r7, #5
200006da:	781b      	ldrb	r3, [r3, #0]
200006dc:	2b07      	cmp	r3, #7
200006de:	d9bd      	bls.n	2000065c <draw_buffer+0x90>
		}
	}
}
200006e0:	46c0      	nop			; (mov r8, r8)
200006e2:	46bd      	mov	sp, r7
200006e4:	b002      	add	sp, #8
200006e6:	bd80      	pop	{r7, pc}
200006e8:	20000bcc 	andcs	r0, r0, ip, asr #23

200006ec <init>:

#define USBDM

void init() {
200006ec:	b580      	push	{r7, lr}
200006ee:	af00      	add	r7, sp, #0
	#ifdef USBDM
	*((unsigned long *) 0x40023830) = 0x18;
200006f0:	4b20      	ldr	r3, [pc, #128]	; (20000774 <init+0x88>)
200006f2:	2218      	movs	r2, #24
200006f4:	601a      	str	r2, [r3, #0]
	__asm volatile( " LDR R0,=0x08000209\n BLX R0 \n");
200006f6:	4882      	ldr	r0, [pc, #520]	; (20000900 <out7seg+0x54>)
200006f8:	4780      	blx	r0
	#endif
    *portModer = 0x55555555; // Set E0-15 to output
200006fa:	4b1f      	ldr	r3, [pc, #124]	; (20000778 <init+0x8c>)
200006fc:	4a1f      	ldr	r2, [pc, #124]	; (2000077c <init+0x90>)
200006fe:	601a      	str	r2, [r3, #0]
	
	*((unsigned long *) 0x40023830) = 0x18;
20000700:	4b1c      	ldr	r3, [pc, #112]	; (20000774 <init+0x88>)
20000702:	2218      	movs	r2, #24
20000704:	601a      	str	r2, [r3, #0]
    // GPIO_D 8-15 ska bli keypad
    // Set MODER
    *GPIO_D_MODER &= 0x0000FFFF;
20000706:	4b1e      	ldr	r3, [pc, #120]	; (20000780 <init+0x94>)
20000708:	681a      	ldr	r2, [r3, #0]
2000070a:	4b1d      	ldr	r3, [pc, #116]	; (20000780 <init+0x94>)
2000070c:	0412      	lsls	r2, r2, #16
2000070e:	0c12      	lsrs	r2, r2, #16
20000710:	601a      	str	r2, [r3, #0]
    *GPIO_D_MODER |= 0x55000000;
20000712:	4b1b      	ldr	r3, [pc, #108]	; (20000780 <init+0x94>)
20000714:	681a      	ldr	r2, [r3, #0]
20000716:	4b1a      	ldr	r3, [pc, #104]	; (20000780 <init+0x94>)
20000718:	21aa      	movs	r1, #170	; 0xaa
2000071a:	05c9      	lsls	r1, r1, #23
2000071c:	430a      	orrs	r2, r1
2000071e:	601a      	str	r2, [r3, #0]
    // Set OTYPER
    *GPIO_D_OTYPER &= 0xFFFF00FF;
20000720:	4b18      	ldr	r3, [pc, #96]	; (20000784 <init+0x98>)
20000722:	681a      	ldr	r2, [r3, #0]
20000724:	4b17      	ldr	r3, [pc, #92]	; (20000784 <init+0x98>)
20000726:	4918      	ldr	r1, [pc, #96]	; (20000788 <init+0x9c>)
20000728:	400a      	ands	r2, r1
2000072a:	601a      	str	r2, [r3, #0]
    *GPIO_D_OTYPER |= 0x00000F00;
2000072c:	4b15      	ldr	r3, [pc, #84]	; (20000784 <init+0x98>)
2000072e:	681a      	ldr	r2, [r3, #0]
20000730:	4b14      	ldr	r3, [pc, #80]	; (20000784 <init+0x98>)
20000732:	21f0      	movs	r1, #240	; 0xf0
20000734:	0109      	lsls	r1, r1, #4
20000736:	430a      	orrs	r2, r1
20000738:	601a      	str	r2, [r3, #0]
    
    // Set PUPDR
    *GPIO_D_PUPDR &= 0x0000FFFF;
2000073a:	4b14      	ldr	r3, [pc, #80]	; (2000078c <init+0xa0>)
2000073c:	681a      	ldr	r2, [r3, #0]
2000073e:	4b13      	ldr	r3, [pc, #76]	; (2000078c <init+0xa0>)
20000740:	0412      	lsls	r2, r2, #16
20000742:	0c12      	lsrs	r2, r2, #16
20000744:	601a      	str	r2, [r3, #0]
    *GPIO_D_PUPDR |= 0xFFAA0000;
20000746:	4b11      	ldr	r3, [pc, #68]	; (2000078c <init+0xa0>)
20000748:	681a      	ldr	r2, [r3, #0]
2000074a:	4b10      	ldr	r3, [pc, #64]	; (2000078c <init+0xa0>)
2000074c:	4910      	ldr	r1, [pc, #64]	; (20000790 <init+0xa4>)
2000074e:	430a      	orrs	r2, r1
20000750:	601a      	str	r2, [r3, #0]
    
    // GPIO_D 0-7 ska bli 7seg
    // Set MODER
    *GPIO_D_MODER &= 0xFFFF0000;
20000752:	4b0b      	ldr	r3, [pc, #44]	; (20000780 <init+0x94>)
20000754:	681a      	ldr	r2, [r3, #0]
20000756:	4b0a      	ldr	r3, [pc, #40]	; (20000780 <init+0x94>)
20000758:	0c12      	lsrs	r2, r2, #16
2000075a:	0412      	lsls	r2, r2, #16
2000075c:	601a      	str	r2, [r3, #0]
    *GPIO_D_MODER |= 0x00005555;
2000075e:	4b08      	ldr	r3, [pc, #32]	; (20000780 <init+0x94>)
20000760:	681a      	ldr	r2, [r3, #0]
20000762:	4b07      	ldr	r3, [pc, #28]	; (20000780 <init+0x94>)
20000764:	490b      	ldr	r1, [pc, #44]	; (20000794 <init+0xa8>)
20000766:	430a      	orrs	r2, r1
20000768:	601a      	str	r2, [r3, #0]
	
	
    graphic_initialize();
2000076a:	f7ff fe40 	bl	200003ee <graphic_initialize>
}
2000076e:	46c0      	nop			; (mov r8, r8)
20000770:	46bd      	mov	sp, r7
20000772:	bd80      	pop	{r7, pc}
20000774:	40023830 	andmi	r3, r2, r0, lsr r8
20000778:	40021000 	andmi	r1, r2, r0
2000077c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000780:	40020c00 	andmi	r0, r2, r0, lsl #24
20000784:	40020c04 	andmi	r0, r2, r4, lsl #24
20000788:	ffff00ff 			; <UNDEFINED> instruction: 0xffff00ff
2000078c:	40020c0c 	andmi	r0, r2, ip, lsl #24
20000790:	ffaa0000 			; <UNDEFINED> instruction: 0xffaa0000
20000794:	00005555 	andeq	r5, r0, r5, asr r5

20000798 <keyb>:


unsigned char keyb(void) {
20000798:	b590      	push	{r4, r7, lr}
2000079a:	b087      	sub	sp, #28
2000079c:	af00      	add	r7, sp, #0
    unsigned char keys[] = {1, 2, 3,10,
2000079e:	003b      	movs	r3, r7
200007a0:	4a3f      	ldr	r2, [pc, #252]	; (200008a0 <keyb+0x108>)
200007a2:	ca13      	ldmia	r2!, {r0, r1, r4}
200007a4:	c313      	stmia	r3!, {r0, r1, r4}
200007a6:	6812      	ldr	r2, [r2, #0]
200007a8:	601a      	str	r2, [r3, #0]
                            4, 5, 6,11,
                            7, 8, 9,12,
                            14,0,15,13};
    char index = 0xFF;
200007aa:	2317      	movs	r3, #23
200007ac:	18fb      	adds	r3, r7, r3
200007ae:	22ff      	movs	r2, #255	; 0xff
200007b0:	701a      	strb	r2, [r3, #0]
    char base = 0x10;
200007b2:	2314      	movs	r3, #20
200007b4:	18fb      	adds	r3, r7, r3
200007b6:	2210      	movs	r2, #16
200007b8:	701a      	strb	r2, [r3, #0]
    for (char row = 0; row<5; row++) {
200007ba:	2316      	movs	r3, #22
200007bc:	18fb      	adds	r3, r7, r3
200007be:	2200      	movs	r2, #0
200007c0:	701a      	strb	r2, [r3, #0]
200007c2:	e055      	b.n	20000870 <keyb+0xd8>
        char outVal = base << row;
200007c4:	2314      	movs	r3, #20
200007c6:	18fb      	adds	r3, r7, r3
200007c8:	781a      	ldrb	r2, [r3, #0]
200007ca:	2316      	movs	r3, #22
200007cc:	18fb      	adds	r3, r7, r3
200007ce:	781b      	ldrb	r3, [r3, #0]
200007d0:	409a      	lsls	r2, r3
200007d2:	2113      	movs	r1, #19
200007d4:	187b      	adds	r3, r7, r1
200007d6:	701a      	strb	r2, [r3, #0]
        *KB_OUT = outVal;
200007d8:	4a32      	ldr	r2, [pc, #200]	; (200008a4 <keyb+0x10c>)
200007da:	187b      	adds	r3, r7, r1
200007dc:	781b      	ldrb	r3, [r3, #0]
200007de:	7013      	strb	r3, [r2, #0]
        char inVal = *KB_IN & 0x0F;
200007e0:	4b31      	ldr	r3, [pc, #196]	; (200008a8 <keyb+0x110>)
200007e2:	781b      	ldrb	r3, [r3, #0]
200007e4:	b2da      	uxtb	r2, r3
200007e6:	2012      	movs	r0, #18
200007e8:	183b      	adds	r3, r7, r0
200007ea:	210f      	movs	r1, #15
200007ec:	400a      	ands	r2, r1
200007ee:	701a      	strb	r2, [r3, #0]
        if (inVal != 0) {
200007f0:	183b      	adds	r3, r7, r0
200007f2:	781b      	ldrb	r3, [r3, #0]
200007f4:	2b00      	cmp	r3, #0
200007f6:	d035      	beq.n	20000864 <keyb+0xcc>
            char col;
            if (inVal & 0x01) col = 0;
200007f8:	2312      	movs	r3, #18
200007fa:	18fb      	adds	r3, r7, r3
200007fc:	781b      	ldrb	r3, [r3, #0]
200007fe:	2201      	movs	r2, #1
20000800:	4013      	ands	r3, r2
20000802:	d003      	beq.n	2000080c <keyb+0x74>
20000804:	2315      	movs	r3, #21
20000806:	18fb      	adds	r3, r7, r3
20000808:	2200      	movs	r2, #0
2000080a:	701a      	strb	r2, [r3, #0]
            if (inVal & 0x02) col = 1;
2000080c:	2312      	movs	r3, #18
2000080e:	18fb      	adds	r3, r7, r3
20000810:	781b      	ldrb	r3, [r3, #0]
20000812:	2202      	movs	r2, #2
20000814:	4013      	ands	r3, r2
20000816:	d003      	beq.n	20000820 <keyb+0x88>
20000818:	2315      	movs	r3, #21
2000081a:	18fb      	adds	r3, r7, r3
2000081c:	2201      	movs	r2, #1
2000081e:	701a      	strb	r2, [r3, #0]
            if (inVal & 0x04) col = 2;
20000820:	2312      	movs	r3, #18
20000822:	18fb      	adds	r3, r7, r3
20000824:	781b      	ldrb	r3, [r3, #0]
20000826:	2204      	movs	r2, #4
20000828:	4013      	ands	r3, r2
2000082a:	d003      	beq.n	20000834 <keyb+0x9c>
2000082c:	2315      	movs	r3, #21
2000082e:	18fb      	adds	r3, r7, r3
20000830:	2202      	movs	r2, #2
20000832:	701a      	strb	r2, [r3, #0]
            if (inVal & 0x08) col = 3;
20000834:	2312      	movs	r3, #18
20000836:	18fb      	adds	r3, r7, r3
20000838:	781b      	ldrb	r3, [r3, #0]
2000083a:	2208      	movs	r2, #8
2000083c:	4013      	ands	r3, r2
2000083e:	d003      	beq.n	20000848 <keyb+0xb0>
20000840:	2315      	movs	r3, #21
20000842:	18fb      	adds	r3, r7, r3
20000844:	2203      	movs	r2, #3
20000846:	701a      	strb	r2, [r3, #0]
            
            index = row*4+col-4;
20000848:	2316      	movs	r3, #22
2000084a:	18fb      	adds	r3, r7, r3
2000084c:	781b      	ldrb	r3, [r3, #0]
2000084e:	009b      	lsls	r3, r3, #2
20000850:	b2da      	uxtb	r2, r3
20000852:	2315      	movs	r3, #21
20000854:	18fb      	adds	r3, r7, r3
20000856:	781b      	ldrb	r3, [r3, #0]
20000858:	18d3      	adds	r3, r2, r3
2000085a:	b2da      	uxtb	r2, r3
2000085c:	2317      	movs	r3, #23
2000085e:	18fb      	adds	r3, r7, r3
20000860:	3a04      	subs	r2, #4
20000862:	701a      	strb	r2, [r3, #0]
    for (char row = 0; row<5; row++) {
20000864:	2116      	movs	r1, #22
20000866:	187b      	adds	r3, r7, r1
20000868:	781a      	ldrb	r2, [r3, #0]
2000086a:	187b      	adds	r3, r7, r1
2000086c:	3201      	adds	r2, #1
2000086e:	701a      	strb	r2, [r3, #0]
20000870:	2316      	movs	r3, #22
20000872:	18fb      	adds	r3, r7, r3
20000874:	781b      	ldrb	r3, [r3, #0]
20000876:	2b04      	cmp	r3, #4
20000878:	d9a4      	bls.n	200007c4 <keyb+0x2c>
        }
    }
    *KB_OUT = 0;
2000087a:	4b0a      	ldr	r3, [pc, #40]	; (200008a4 <keyb+0x10c>)
2000087c:	2200      	movs	r2, #0
2000087e:	701a      	strb	r2, [r3, #0]
    if (index == 0xFF) {
20000880:	2317      	movs	r3, #23
20000882:	18fb      	adds	r3, r7, r3
20000884:	781b      	ldrb	r3, [r3, #0]
20000886:	2bff      	cmp	r3, #255	; 0xff
20000888:	d101      	bne.n	2000088e <keyb+0xf6>
        return 0xFF;
2000088a:	23ff      	movs	r3, #255	; 0xff
2000088c:	e004      	b.n	20000898 <keyb+0x100>
    } else {
        return keys[index];
2000088e:	2317      	movs	r3, #23
20000890:	18fb      	adds	r3, r7, r3
20000892:	781b      	ldrb	r3, [r3, #0]
20000894:	003a      	movs	r2, r7
20000896:	5cd3      	ldrb	r3, [r2, r3]
    }
}
20000898:	0018      	movs	r0, r3
2000089a:	46bd      	mov	sp, r7
2000089c:	b007      	add	sp, #28
2000089e:	bd90      	pop	{r4, r7, pc}
200008a0:	20001424 	andcs	r1, r0, r4, lsr #8
200008a4:	40020c15 	andmi	r0, r2, r5, lsl ip
200008a8:	40020c11 	andmi	r0, r2, r1, lsl ip

200008ac <out7seg>:


void out7seg(unsigned char c) {
200008ac:	b5b0      	push	{r4, r5, r7, lr}
200008ae:	b088      	sub	sp, #32
200008b0:	af00      	add	r7, sp, #0
200008b2:	0002      	movs	r2, r0
200008b4:	1dfb      	adds	r3, r7, #7
200008b6:	701a      	strb	r2, [r3, #0]
    char out = 0;
200008b8:	231f      	movs	r3, #31
200008ba:	18fb      	adds	r3, r7, r3
200008bc:	2200      	movs	r2, #0
200008be:	701a      	strb	r2, [r3, #0]
    if (c<16) {
200008c0:	1dfb      	adds	r3, r7, #7
200008c2:	781b      	ldrb	r3, [r3, #0]
200008c4:	2b0f      	cmp	r3, #15
200008c6:	d80d      	bhi.n	200008e4 <out7seg+0x38>
        char segCodes[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71};
200008c8:	210c      	movs	r1, #12
200008ca:	187b      	adds	r3, r7, r1
200008cc:	4a0a      	ldr	r2, [pc, #40]	; (200008f8 <out7seg+0x4c>)
200008ce:	ca31      	ldmia	r2!, {r0, r4, r5}
200008d0:	c331      	stmia	r3!, {r0, r4, r5}
200008d2:	6812      	ldr	r2, [r2, #0]
200008d4:	601a      	str	r2, [r3, #0]
        out = segCodes[c];
200008d6:	1dfb      	adds	r3, r7, #7
200008d8:	781a      	ldrb	r2, [r3, #0]
200008da:	231f      	movs	r3, #31
200008dc:	18fb      	adds	r3, r7, r3
200008de:	1879      	adds	r1, r7, r1
200008e0:	5c8a      	ldrb	r2, [r1, r2]
200008e2:	701a      	strb	r2, [r3, #0]
    }
    *SEG_OUT = out;
200008e4:	4a05      	ldr	r2, [pc, #20]	; (200008fc <out7seg+0x50>)
200008e6:	231f      	movs	r3, #31
200008e8:	18fb      	adds	r3, r7, r3
200008ea:	781b      	ldrb	r3, [r3, #0]
200008ec:	7013      	strb	r3, [r2, #0]
}
200008ee:	46c0      	nop			; (mov r8, r8)
200008f0:	46bd      	mov	sp, r7
200008f2:	b008      	add	sp, #32
200008f4:	bdb0      	pop	{r4, r5, r7, pc}
200008f6:	46c0      	nop			; (mov r8, r8)
200008f8:	20001434 	andcs	r1, r0, r4, lsr r4
200008fc:	40020c14 	andmi	r0, r2, r4, lsl ip
20000900:	08000209 	stmdaeq	r0, {r0, r3, r9}

20000904 <set_object_speed>:
    void (* clear) (struct tObj *);
    void (* move) (struct tObj *);
    void (* set_speed) (struct tObj *, int, int);
} OBJECT, *POBJECT;

void set_object_speed(POBJECT o, int speedx, int speedy) {
20000904:	b580      	push	{r7, lr}
20000906:	b084      	sub	sp, #16
20000908:	af00      	add	r7, sp, #0
2000090a:	60f8      	str	r0, [r7, #12]
2000090c:	60b9      	str	r1, [r7, #8]
2000090e:	607a      	str	r2, [r7, #4]
    o->dirx = speedx;
20000910:	68fb      	ldr	r3, [r7, #12]
20000912:	68ba      	ldr	r2, [r7, #8]
20000914:	605a      	str	r2, [r3, #4]
    o->diry = speedy;
20000916:	68fb      	ldr	r3, [r7, #12]
20000918:	687a      	ldr	r2, [r7, #4]
2000091a:	609a      	str	r2, [r3, #8]
}
2000091c:	46c0      	nop			; (mov r8, r8)
2000091e:	46bd      	mov	sp, r7
20000920:	b004      	add	sp, #16
20000922:	bd80      	pop	{r7, pc}

20000924 <draw_object>:

void draw_object(POBJECT o) {
20000924:	b580      	push	{r7, lr}
20000926:	b082      	sub	sp, #8
20000928:	af00      	add	r7, sp, #0
2000092a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < numpoints; i++) {
        POINT p = o->geo->px[i];
        pixel(o->posx + p.x, o->posy + p.y, 1);
    }
	*/
	 paint(o, 1);
2000092c:	687b      	ldr	r3, [r7, #4]
2000092e:	2101      	movs	r1, #1
20000930:	0018      	movs	r0, r3
20000932:	f000 f811 	bl	20000958 <paint>
}
20000936:	46c0      	nop			; (mov r8, r8)
20000938:	46bd      	mov	sp, r7
2000093a:	b002      	add	sp, #8
2000093c:	bd80      	pop	{r7, pc}

2000093e <clear_object>:

void clear_object(POBJECT o) {
2000093e:	b580      	push	{r7, lr}
20000940:	b082      	sub	sp, #8
20000942:	af00      	add	r7, sp, #0
20000944:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < numpoints; i++) {
        POINT p = o->geo->px[i];
        pixel(o->posx + p.x, o->posy + p.y, 0);
    }
	 * */
	 paint(o, 0);
20000946:	687b      	ldr	r3, [r7, #4]
20000948:	2100      	movs	r1, #0
2000094a:	0018      	movs	r0, r3
2000094c:	f000 f804 	bl	20000958 <paint>
}
20000950:	46c0      	nop			; (mov r8, r8)
20000952:	46bd      	mov	sp, r7
20000954:	b002      	add	sp, #8
20000956:	bd80      	pop	{r7, pc}

20000958 <paint>:

void paint(POBJECT o, int color) {
20000958:	b580      	push	{r7, lr}
2000095a:	b08a      	sub	sp, #40	; 0x28
2000095c:	af00      	add	r7, sp, #0
2000095e:	6078      	str	r0, [r7, #4]
20000960:	6039      	str	r1, [r7, #0]
    int width = o->geo->sizex;
20000962:	687b      	ldr	r3, [r7, #4]
20000964:	681b      	ldr	r3, [r3, #0]
20000966:	685b      	ldr	r3, [r3, #4]
20000968:	61fb      	str	r3, [r7, #28]
    int height = o->geo->sizey;
2000096a:	687b      	ldr	r3, [r7, #4]
2000096c:	681b      	ldr	r3, [r3, #0]
2000096e:	689b      	ldr	r3, [r3, #8]
20000970:	61bb      	str	r3, [r7, #24]
	int r = width/2;
20000972:	69fb      	ldr	r3, [r7, #28]
20000974:	2b00      	cmp	r3, #0
20000976:	da00      	bge.n	2000097a <paint+0x22>
20000978:	3301      	adds	r3, #1
2000097a:	105b      	asrs	r3, r3, #1
2000097c:	617b      	str	r3, [r7, #20]
	for (int y=0; y<height; y++) {
2000097e:	2300      	movs	r3, #0
20000980:	627b      	str	r3, [r7, #36]	; 0x24
20000982:	e03f      	b.n	20000a04 <paint+0xac>
		for (int x=0; x<width; x++) {
20000984:	2300      	movs	r3, #0
20000986:	623b      	str	r3, [r7, #32]
20000988:	e035      	b.n	200009f6 <paint+0x9e>
			int xr = x-width/2;
2000098a:	69fb      	ldr	r3, [r7, #28]
2000098c:	2b00      	cmp	r3, #0
2000098e:	da00      	bge.n	20000992 <paint+0x3a>
20000990:	3301      	adds	r3, #1
20000992:	105b      	asrs	r3, r3, #1
20000994:	425b      	negs	r3, r3
20000996:	001a      	movs	r2, r3
20000998:	6a3b      	ldr	r3, [r7, #32]
2000099a:	189b      	adds	r3, r3, r2
2000099c:	613b      	str	r3, [r7, #16]
			int yr = y-height/2;
2000099e:	69bb      	ldr	r3, [r7, #24]
200009a0:	2b00      	cmp	r3, #0
200009a2:	da00      	bge.n	200009a6 <paint+0x4e>
200009a4:	3301      	adds	r3, #1
200009a6:	105b      	asrs	r3, r3, #1
200009a8:	425b      	negs	r3, r3
200009aa:	001a      	movs	r2, r3
200009ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200009ae:	189b      	adds	r3, r3, r2
200009b0:	60fb      	str	r3, [r7, #12]
			if (xr*xr+yr*yr < r*r)
200009b2:	693b      	ldr	r3, [r7, #16]
200009b4:	693a      	ldr	r2, [r7, #16]
200009b6:	435a      	muls	r2, r3
200009b8:	68fb      	ldr	r3, [r7, #12]
200009ba:	68f9      	ldr	r1, [r7, #12]
200009bc:	434b      	muls	r3, r1
200009be:	18d2      	adds	r2, r2, r3
200009c0:	697b      	ldr	r3, [r7, #20]
200009c2:	6979      	ldr	r1, [r7, #20]
200009c4:	434b      	muls	r3, r1
200009c6:	429a      	cmp	r2, r3
200009c8:	da12      	bge.n	200009f0 <paint+0x98>
				pixel(o->posx + x, o->posy + y, color);
200009ca:	687b      	ldr	r3, [r7, #4]
200009cc:	68db      	ldr	r3, [r3, #12]
200009ce:	b2da      	uxtb	r2, r3
200009d0:	6a3b      	ldr	r3, [r7, #32]
200009d2:	b2db      	uxtb	r3, r3
200009d4:	18d3      	adds	r3, r2, r3
200009d6:	b2d8      	uxtb	r0, r3
200009d8:	687b      	ldr	r3, [r7, #4]
200009da:	691b      	ldr	r3, [r3, #16]
200009dc:	b2da      	uxtb	r2, r3
200009de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200009e0:	b2db      	uxtb	r3, r3
200009e2:	18d3      	adds	r3, r2, r3
200009e4:	b2db      	uxtb	r3, r3
200009e6:	683a      	ldr	r2, [r7, #0]
200009e8:	b2d2      	uxtb	r2, r2
200009ea:	0019      	movs	r1, r3
200009ec:	f7ff fd5d 	bl	200004aa <pixel>
		for (int x=0; x<width; x++) {
200009f0:	6a3b      	ldr	r3, [r7, #32]
200009f2:	3301      	adds	r3, #1
200009f4:	623b      	str	r3, [r7, #32]
200009f6:	6a3a      	ldr	r2, [r7, #32]
200009f8:	69fb      	ldr	r3, [r7, #28]
200009fa:	429a      	cmp	r2, r3
200009fc:	dbc5      	blt.n	2000098a <paint+0x32>
	for (int y=0; y<height; y++) {
200009fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000a00:	3301      	adds	r3, #1
20000a02:	627b      	str	r3, [r7, #36]	; 0x24
20000a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20000a06:	69bb      	ldr	r3, [r7, #24]
20000a08:	429a      	cmp	r2, r3
20000a0a:	dbbb      	blt.n	20000984 <paint+0x2c>
		}
	}
}
20000a0c:	46c0      	nop			; (mov r8, r8)
20000a0e:	46bd      	mov	sp, r7
20000a10:	b00a      	add	sp, #40	; 0x28
20000a12:	bd80      	pop	{r7, pc}

20000a14 <move_object>:

void move_object(POBJECT o) {
20000a14:	b580      	push	{r7, lr}
20000a16:	b086      	sub	sp, #24
20000a18:	af00      	add	r7, sp, #0
20000a1a:	6078      	str	r0, [r7, #4]
    clear_object(o);
20000a1c:	687b      	ldr	r3, [r7, #4]
20000a1e:	0018      	movs	r0, r3
20000a20:	f7ff ff8d 	bl	2000093e <clear_object>
    int newx = o->posx + o->dirx;
20000a24:	687b      	ldr	r3, [r7, #4]
20000a26:	68da      	ldr	r2, [r3, #12]
20000a28:	687b      	ldr	r3, [r7, #4]
20000a2a:	685b      	ldr	r3, [r3, #4]
20000a2c:	18d3      	adds	r3, r2, r3
20000a2e:	617b      	str	r3, [r7, #20]
    int newy = o->posy + o->diry;
20000a30:	687b      	ldr	r3, [r7, #4]
20000a32:	691a      	ldr	r2, [r3, #16]
20000a34:	687b      	ldr	r3, [r7, #4]
20000a36:	689b      	ldr	r3, [r3, #8]
20000a38:	18d3      	adds	r3, r2, r3
20000a3a:	613b      	str	r3, [r7, #16]
    int width = o->geo->sizex;
20000a3c:	687b      	ldr	r3, [r7, #4]
20000a3e:	681b      	ldr	r3, [r3, #0]
20000a40:	685b      	ldr	r3, [r3, #4]
20000a42:	60fb      	str	r3, [r7, #12]
    int height = o->geo->sizey;
20000a44:	687b      	ldr	r3, [r7, #4]
20000a46:	681b      	ldr	r3, [r3, #0]
20000a48:	689b      	ldr	r3, [r3, #8]
20000a4a:	60bb      	str	r3, [r7, #8]
    o->posx = newx;
20000a4c:	687b      	ldr	r3, [r7, #4]
20000a4e:	697a      	ldr	r2, [r7, #20]
20000a50:	60da      	str	r2, [r3, #12]
    o->posy = newy;
20000a52:	687b      	ldr	r3, [r7, #4]
20000a54:	693a      	ldr	r2, [r7, #16]
20000a56:	611a      	str	r2, [r3, #16]
    if (newx < 1) {
20000a58:	697b      	ldr	r3, [r7, #20]
20000a5a:	2b00      	cmp	r3, #0
20000a5c:	dc04      	bgt.n	20000a68 <move_object+0x54>
        o->dirx *= -1;
20000a5e:	687b      	ldr	r3, [r7, #4]
20000a60:	685b      	ldr	r3, [r3, #4]
20000a62:	425a      	negs	r2, r3
20000a64:	687b      	ldr	r3, [r7, #4]
20000a66:	605a      	str	r2, [r3, #4]
    }
    if (newx + width > 128) {
20000a68:	697a      	ldr	r2, [r7, #20]
20000a6a:	68fb      	ldr	r3, [r7, #12]
20000a6c:	18d3      	adds	r3, r2, r3
20000a6e:	2b80      	cmp	r3, #128	; 0x80
20000a70:	dd04      	ble.n	20000a7c <move_object+0x68>
        o->dirx *= -1;
20000a72:	687b      	ldr	r3, [r7, #4]
20000a74:	685b      	ldr	r3, [r3, #4]
20000a76:	425a      	negs	r2, r3
20000a78:	687b      	ldr	r3, [r7, #4]
20000a7a:	605a      	str	r2, [r3, #4]
    }
    if (newy < 1) {
20000a7c:	693b      	ldr	r3, [r7, #16]
20000a7e:	2b00      	cmp	r3, #0
20000a80:	dc04      	bgt.n	20000a8c <move_object+0x78>
        o->diry *= -1;
20000a82:	687b      	ldr	r3, [r7, #4]
20000a84:	689b      	ldr	r3, [r3, #8]
20000a86:	425a      	negs	r2, r3
20000a88:	687b      	ldr	r3, [r7, #4]
20000a8a:	609a      	str	r2, [r3, #8]
    }
    if (newy + height > 64) {
20000a8c:	693a      	ldr	r2, [r7, #16]
20000a8e:	68bb      	ldr	r3, [r7, #8]
20000a90:	18d3      	adds	r3, r2, r3
20000a92:	2b40      	cmp	r3, #64	; 0x40
20000a94:	dd04      	ble.n	20000aa0 <move_object+0x8c>
        o->diry *= -1;
20000a96:	687b      	ldr	r3, [r7, #4]
20000a98:	689b      	ldr	r3, [r3, #8]
20000a9a:	425a      	negs	r2, r3
20000a9c:	687b      	ldr	r3, [r7, #4]
20000a9e:	609a      	str	r2, [r3, #8]
    }
    draw_object(o);
20000aa0:	687b      	ldr	r3, [r7, #4]
20000aa2:	0018      	movs	r0, r3
20000aa4:	f7ff ff3e 	bl	20000924 <draw_object>
}
20000aa8:	46c0      	nop			; (mov r8, r8)
20000aaa:	46bd      	mov	sp, r7
20000aac:	b006      	add	sp, #24
20000aae:	bd80      	pop	{r7, pc}

20000ab0 <main>:
    move_object,
    set_object_speed
};


void main(void) {
20000ab0:	b580      	push	{r7, lr}
20000ab2:	b086      	sub	sp, #24
20000ab4:	af00      	add	r7, sp, #0
    POBJECT p = &ball;
20000ab6:	4b43      	ldr	r3, [pc, #268]	; (20000bc4 <main+0x114>)
20000ab8:	60fb      	str	r3, [r7, #12]
	init();
20000aba:	f7ff fe17 	bl	200006ec <init>
#ifndef SIMULATOR
    graphic_clear_screen();
#endif
 */
	
	clear_buffer();
20000abe:	f7ff fd57 	bl	20000570 <clear_buffer>
	pixel(0, 1, 1);
20000ac2:	2201      	movs	r2, #1
20000ac4:	2101      	movs	r1, #1
20000ac6:	2000      	movs	r0, #0
20000ac8:	f7ff fcef 	bl	200004aa <pixel>
	uint8_t data = buffer[0][0];
20000acc:	230b      	movs	r3, #11
20000ace:	18fb      	adds	r3, r7, r3
20000ad0:	4a3d      	ldr	r2, [pc, #244]	; (20000bc8 <main+0x118>)
20000ad2:	7812      	ldrb	r2, [r2, #0]
20000ad4:	701a      	strb	r2, [r3, #0]
	draw_buffer();
20000ad6:	f7ff fd79 	bl	200005cc <draw_buffer>

    for (int i = 0; i < 128; i++) {
20000ada:	2300      	movs	r3, #0
20000adc:	617b      	str	r3, [r7, #20]
20000ade:	e010      	b.n	20000b02 <main+0x52>
        pixel(i, 0, 1);
20000ae0:	697b      	ldr	r3, [r7, #20]
20000ae2:	b2db      	uxtb	r3, r3
20000ae4:	2201      	movs	r2, #1
20000ae6:	2100      	movs	r1, #0
20000ae8:	0018      	movs	r0, r3
20000aea:	f7ff fcde 	bl	200004aa <pixel>
        pixel(i, 63, 1);
20000aee:	697b      	ldr	r3, [r7, #20]
20000af0:	b2db      	uxtb	r3, r3
20000af2:	2201      	movs	r2, #1
20000af4:	213f      	movs	r1, #63	; 0x3f
20000af6:	0018      	movs	r0, r3
20000af8:	f7ff fcd7 	bl	200004aa <pixel>
    for (int i = 0; i < 128; i++) {
20000afc:	697b      	ldr	r3, [r7, #20]
20000afe:	3301      	adds	r3, #1
20000b00:	617b      	str	r3, [r7, #20]
20000b02:	697b      	ldr	r3, [r7, #20]
20000b04:	2b7f      	cmp	r3, #127	; 0x7f
20000b06:	ddeb      	ble.n	20000ae0 <main+0x30>
    }
    for (int i = 0; i < 64; i++) {
20000b08:	2300      	movs	r3, #0
20000b0a:	613b      	str	r3, [r7, #16]
20000b0c:	e010      	b.n	20000b30 <main+0x80>
        pixel(0, i, 1);
20000b0e:	693b      	ldr	r3, [r7, #16]
20000b10:	b2db      	uxtb	r3, r3
20000b12:	2201      	movs	r2, #1
20000b14:	0019      	movs	r1, r3
20000b16:	2000      	movs	r0, #0
20000b18:	f7ff fcc7 	bl	200004aa <pixel>
        pixel(127, i, 1);
20000b1c:	693b      	ldr	r3, [r7, #16]
20000b1e:	b2db      	uxtb	r3, r3
20000b20:	2201      	movs	r2, #1
20000b22:	0019      	movs	r1, r3
20000b24:	207f      	movs	r0, #127	; 0x7f
20000b26:	f7ff fcc0 	bl	200004aa <pixel>
    for (int i = 0; i < 64; i++) {
20000b2a:	693b      	ldr	r3, [r7, #16]
20000b2c:	3301      	adds	r3, #1
20000b2e:	613b      	str	r3, [r7, #16]
20000b30:	693b      	ldr	r3, [r7, #16]
20000b32:	2b3f      	cmp	r3, #63	; 0x3f
20000b34:	ddeb      	ble.n	20000b0e <main+0x5e>
    }
	
	int speed = 4;
20000b36:	2304      	movs	r3, #4
20000b38:	607b      	str	r3, [r7, #4]
    p->set_speed(p, speed, 0);
20000b3a:	68fb      	ldr	r3, [r7, #12]
20000b3c:	6a1b      	ldr	r3, [r3, #32]
20000b3e:	6879      	ldr	r1, [r7, #4]
20000b40:	68f8      	ldr	r0, [r7, #12]
20000b42:	2200      	movs	r2, #0
20000b44:	4798      	blx	r3
	char c;
    while(1) {
        p->move(p);
20000b46:	68fb      	ldr	r3, [r7, #12]
20000b48:	69db      	ldr	r3, [r3, #28]
20000b4a:	68fa      	ldr	r2, [r7, #12]
20000b4c:	0010      	movs	r0, r2
20000b4e:	4798      	blx	r3
		c = keyb();
20000b50:	f7ff fe22 	bl	20000798 <keyb>
20000b54:	0002      	movs	r2, r0
20000b56:	1cfb      	adds	r3, r7, #3
20000b58:	701a      	strb	r2, [r3, #0]
		out7seg(c);
20000b5a:	1cfb      	adds	r3, r7, #3
20000b5c:	781b      	ldrb	r3, [r3, #0]
20000b5e:	0018      	movs	r0, r3
20000b60:	f7ff fea4 	bl	200008ac <out7seg>
		switch (c) {
20000b64:	1cfb      	adds	r3, r7, #3
20000b66:	781b      	ldrb	r3, [r3, #0]
20000b68:	2b04      	cmp	r3, #4
20000b6a:	d016      	beq.n	20000b9a <main+0xea>
20000b6c:	dc02      	bgt.n	20000b74 <main+0xc4>
20000b6e:	2b02      	cmp	r3, #2
20000b70:	d00b      	beq.n	20000b8a <main+0xda>
20000b72:	e021      	b.n	20000bb8 <main+0x108>
20000b74:	2b05      	cmp	r3, #5
20000b76:	d018      	beq.n	20000baa <main+0xfa>
20000b78:	2b06      	cmp	r3, #6
20000b7a:	d11d      	bne.n	20000bb8 <main+0x108>
			case 6: p->set_speed(p, speed, 0); break;
20000b7c:	68fb      	ldr	r3, [r7, #12]
20000b7e:	6a1b      	ldr	r3, [r3, #32]
20000b80:	6879      	ldr	r1, [r7, #4]
20000b82:	68f8      	ldr	r0, [r7, #12]
20000b84:	2200      	movs	r2, #0
20000b86:	4798      	blx	r3
20000b88:	e016      	b.n	20000bb8 <main+0x108>
			case 2: p->set_speed(p, 0, -speed); break;
20000b8a:	68fb      	ldr	r3, [r7, #12]
20000b8c:	6a1b      	ldr	r3, [r3, #32]
20000b8e:	687a      	ldr	r2, [r7, #4]
20000b90:	4252      	negs	r2, r2
20000b92:	68f8      	ldr	r0, [r7, #12]
20000b94:	2100      	movs	r1, #0
20000b96:	4798      	blx	r3
20000b98:	e00e      	b.n	20000bb8 <main+0x108>
			case 4: p->set_speed(p, -speed, 0); break;
20000b9a:	68fb      	ldr	r3, [r7, #12]
20000b9c:	6a1b      	ldr	r3, [r3, #32]
20000b9e:	687a      	ldr	r2, [r7, #4]
20000ba0:	4251      	negs	r1, r2
20000ba2:	68f8      	ldr	r0, [r7, #12]
20000ba4:	2200      	movs	r2, #0
20000ba6:	4798      	blx	r3
20000ba8:	e006      	b.n	20000bb8 <main+0x108>
			case 5: p->set_speed(p, 0, speed); break;
20000baa:	68fb      	ldr	r3, [r7, #12]
20000bac:	6a1b      	ldr	r3, [r3, #32]
20000bae:	687a      	ldr	r2, [r7, #4]
20000bb0:	68f8      	ldr	r0, [r7, #12]
20000bb2:	2100      	movs	r1, #0
20000bb4:	4798      	blx	r3
20000bb6:	46c0      	nop			; (mov r8, r8)
		}
	draw_buffer();
20000bb8:	f7ff fd08 	bl	200005cc <draw_buffer>
		delay_milli(20);
20000bbc:	2014      	movs	r0, #20
20000bbe:	f7ff fa69 	bl	20000094 <delay_milli>
    while(1) {
20000bc2:	e7c0      	b.n	20000b46 <main+0x96>
20000bc4:	20001400 	andcs	r1, r0, r0, lsl #8
20000bc8:	20000fcc 	andcs	r0, r0, ip, asr #31

20000bcc <buffer>:
	...

20000fcc <buffer>:
	...

200013cc <ball_geometry>:
200013cc:	0000000c 	andeq	r0, r0, ip
200013d0:	0000001e 	andeq	r0, r0, lr, lsl r0
200013d4:	0000001e 	andeq	r0, r0, lr, lsl r0
200013d8:	02000100 	andeq	r0, r0, #0, 2
200013dc:	01010001 	tsteq	r1, r1
200013e0:	03010201 	movweq	r0, #4609	; 0x1201
200013e4:	01020002 	tsteq	r2, r2
200013e8:	03020202 	movweq	r0, #8706	; 0x2202
200013ec:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

20001400 <ball>:
20001400:	200013cc 	andcs	r1, r0, ip, asr #7
20001404:	00000001 	andeq	r0, r0, r1
20001408:	00000001 	andeq	r0, r0, r1
2000140c:	00000032 	andeq	r0, r0, r2, lsr r0
20001410:	0000001e 	andeq	r0, r0, lr, lsl r0
20001414:	20000925 	andcs	r0, r0, r5, lsr #18
20001418:	2000093f 	andcs	r0, r0, pc, lsr r9
2000141c:	20000a15 	andcs	r0, r0, r5, lsl sl
20001420:	20000905 	andcs	r0, r0, r5, lsl #18
20001424:	0a030201 	beq	200c1c30 <ball+0xc0830>
20001428:	0b060504 	bleq	20182840 <ball+0x181440>
2000142c:	0c090807 	stceq	8, cr0, [r9], {7}
20001430:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20001400 <ball>
20001434:	4f5b063f 	svcmi	0x005b063f
20001438:	077d6d66 	ldrbeq	r6, [sp, -r6, ror #26]!
2000143c:	7c776f7f 	ldclvc	15, cr6, [r7], #-508	; 0xfffffe04
20001440:	71795e39 	cmnvc	r9, r9, lsr lr

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000503 	andeq	r0, r0, r3, lsl #10
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000044 	andeq	r0, r0, r4, asr #32
  10:	00017f0c 	andeq	r7, r1, ip, lsl #30
  14:	0001ae00 	andeq	sl, r1, r0, lsl #28
  18:	00001000 	andeq	r1, r0, r0
  1c:	0008f020 	andeq	pc, r8, r0, lsr #32
  20:	00000000 	andeq	r0, r0, r0
  24:	015f0200 	cmpeq	pc, r0, lsl #4
  28:	02020000 	andeq	r0, r2, #0
  2c:	00000030 	andeq	r0, r0, r0, lsr r0
  30:	dc080103 	stfles	f0, [r8], {3}
  34:	04000000 	streq	r0, [r0], #-0
  38:	00000025 	andeq	r0, r0, r5, lsr #32
  3c:	0000004d 	andeq	r0, r0, sp, asr #32
  40:	00004d05 	andeq	r4, r0, r5, lsl #26
  44:	4d050700 	stcmi	7, cr0, [r5, #-0]
  48:	7f000000 	svcvc	0x00000000
  4c:	07040300 	streq	r0, [r4, -r0, lsl #6]
  50:	00000152 	andeq	r0, r0, r2, asr r1
  54:	00025d06 	andeq	r5, r2, r6, lsl #26
  58:	37030200 	strcc	r0, [r3, -r0, lsl #4]
  5c:	05000000 	streq	r0, [r0, #-0]
  60:	000bcc03 	andeq	ip, fp, r3, lsl #24
  64:	02090720 	andeq	r0, r9, #32, 14	; 0x800000
  68:	4b010000 	blmi	40070 <startup-0x1ffbff90>
  6c:	0008ac01 	andeq	sl, r8, r1, lsl #24
  70:	00005420 	andeq	r5, r0, r0, lsr #8
  74:	b19c0100 	orrslt	r0, ip, r0, lsl #2
  78:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
  7c:	4b010063 	blmi	40210 <startup-0x1ffbfdf0>
  80:	00003001 	andeq	r3, r0, r1
  84:	57910200 	ldrpl	r0, [r1, r0, lsl #4]
  88:	74756f09 	ldrbtvc	r6, [r5], #-3849	; 0xfffff0f7
  8c:	014c0100 	mrseq	r0, (UNDEF: 92)
  90:	000000b1 	strheq	r0, [r0], -r1
  94:	0a6f9102 	beq	1be44a4 <startup-0x1e41bb5c>
  98:	200008c8 	andcs	r0, r0, r8, asr #17
  9c:	0000001c 	andeq	r0, r0, ip, lsl r0
  a0:	0000050b 	andeq	r0, r0, fp, lsl #10
  a4:	014e0100 	mrseq	r0, (UNDEF: 94)
  a8:	000000b8 	strheq	r0, [r0], -r8
  ac:	005c9102 	subseq	r9, ip, r2, lsl #2
  b0:	08010300 	stmdaeq	r1, {r8, r9}
  b4:	000000e5 	andeq	r0, r0, r5, ror #1
  b8:	0000b104 	andeq	fp, r0, r4, lsl #2
  bc:	0000c800 	andeq	ip, r0, r0, lsl #16
  c0:	004d0500 	subeq	r0, sp, r0, lsl #10
  c4:	000f0000 	andeq	r0, pc, r0
  c8:	0002110c 	andeq	r1, r2, ip, lsl #2
  cc:	012d0100 			; <UNDEFINED> instruction: 0x012d0100
  d0:	00000030 	andeq	r0, r0, r0, lsr r0
  d4:	20000798 	mulcs	r0, r8, r7
  d8:	00000114 	andeq	r0, r0, r4, lsl r1
  dc:	016a9c01 	cmneq	sl, r1, lsl #24
  e0:	520b0000 	andpl	r0, fp, #0
  e4:	01000002 	tsteq	r0, r2
  e8:	016a012e 	cmneq	sl, lr, lsr #2
  ec:	91020000 	mrsls	r0, (UNDEF: 2)
  f0:	01e40b58 	mvneq	r0, r8, asr fp
  f4:	32010000 	andcc	r0, r1, #0
  f8:	0000b101 	andeq	fp, r0, r1, lsl #2
  fc:	6f910200 	svcvs	0x00910200
 100:	0000f60b 	andeq	pc, r0, fp, lsl #12
 104:	01330100 	teqeq	r3, r0, lsl #2
 108:	000000b1 	strheq	r0, [r0], -r1
 10c:	0a6c9102 	beq	1b2451c <startup-0x1e4dbae4>
 110:	200007ba 			; <UNDEFINED> instruction: 0x200007ba
 114:	000000c0 	andeq	r0, r0, r0, asr #1
 118:	776f7209 	strbvc	r7, [pc, -r9, lsl #4]!
 11c:	01340100 	teqeq	r4, r0, lsl #2
 120:	000000b1 	strheq	r0, [r0], -r1
 124:	0a6e9102 	beq	1ba4534 <startup-0x1e45bacc>
 128:	200007c4 	andcs	r0, r0, r4, asr #15
 12c:	000000a0 	andeq	r0, r0, r0, lsr #1
 130:	00002b0b 	andeq	r2, r0, fp, lsl #22
 134:	01350100 	teqeq	r5, r0, lsl #2
 138:	000000b1 	strheq	r0, [r0], -r1
 13c:	0b6b9102 	bleq	1ae454c <startup-0x1e51bab4>
 140:	000001d3 	ldrdeq	r0, [r0], -r3
 144:	b1013701 	tstlt	r1, r1, lsl #14
 148:	02000000 	andeq	r0, r0, #0
 14c:	f80a6a91 			; <UNDEFINED> instruction: 0xf80a6a91
 150:	6c200007 	stcvs	0, cr0, [r0], #-28	; 0xffffffe4
 154:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 158:	006c6f63 	rsbeq	r6, ip, r3, ror #30
 15c:	b1013901 	tstlt	r1, r1, lsl #18
 160:	02000000 	andeq	r0, r0, #0
 164:	00006d91 	muleq	r0, r1, sp
 168:	30040000 	andcc	r0, r4, r0
 16c:	7a000000 	bvc	174 <startup-0x1ffffe8c>
 170:	05000001 	streq	r0, [r0, #-1]
 174:	0000004d 	andeq	r0, r0, sp, asr #32
 178:	260d000f 	strcs	r0, [sp], -pc
 17c:	01000000 	mrseq	r0, (UNDEF: 0)
 180:	06ec010f 	strbteq	r0, [ip], pc, lsl #2
 184:	00ac2000 	adceq	r2, ip, r0
 188:	9c010000 	stcls	0, cr0, [r1], {-0}
 18c:	0002390e 	andeq	r3, r2, lr, lsl #18
 190:	ccf60100 	ldfgte	f0, [r6]
 194:	20200005 	eorcs	r0, r0, r5
 198:	01000001 	tsteq	r0, r1
 19c:	0002009c 	muleq	r2, ip, r0
 1a0:	05d20f00 	ldrbeq	r0, [r2, #3840]	; 0xf00
 1a4:	00822000 	addeq	r2, r2, r0
 1a8:	01d10000 	bicseq	r0, r1, r0
 1ac:	79100000 	ldmdbvc	r0, {}	; <UNPREDICTABLE>
 1b0:	25f70100 	ldrbcs	r0, [r7, #256]!	; 0x100
 1b4:	02000000 	andeq	r0, r0, #0
 1b8:	da0a7791 	ble	29e004 <startup-0x1fd61ffc>
 1bc:	68200005 	stmdavs	r0!, {r0, r2}
 1c0:	10000000 	andne	r0, r0, r0
 1c4:	f8010078 			; <UNDEFINED> instruction: 0xf8010078
 1c8:	00000025 	andeq	r0, r0, r5, lsr #32
 1cc:	00769102 	rsbseq	r9, r6, r2, lsl #2
 1d0:	06540a00 	ldrbeq	r0, [r4], -r0, lsl #20
 1d4:	008c2000 	addeq	r2, ip, r0
 1d8:	79090000 	stmdbvc	r9, {}	; <UNPREDICTABLE>
 1dc:	01010100 	mrseq	r0, (UNDEF: 17)
 1e0:	00000025 	andeq	r0, r0, r5, lsr #32
 1e4:	0a759102 	beq	1d645f4 <startup-0x1e29ba0c>
 1e8:	2000065c 	andcs	r0, r0, ip, asr r6
 1ec:	00000072 	andeq	r0, r0, r2, ror r0
 1f0:	01007809 	tsteq	r0, r9, lsl #16
 1f4:	00250102 	eoreq	r0, r5, r2, lsl #2
 1f8:	91020000 	mrsls	r0, (UNDEF: 2)
 1fc:	00000074 	andeq	r0, r0, r4, ror r0
 200:	00025711 	andeq	r5, r2, r1, lsl r7
 204:	70ee0100 	rscvc	r0, lr, r0, lsl #2
 208:	5c200005 	stcpl	0, cr0, [r0], #-20	; 0xffffffec
 20c:	01000000 	mrseq	r0, (UNDEF: 0)
 210:	0002429c 	muleq	r2, ip, r2
 214:	05760a00 	ldrbeq	r0, [r6, #-2560]!	; 0xfffff600
 218:	00482000 	subeq	r2, r8, r0
 21c:	79100000 	ldmdbvc	r0, {}	; <UNPREDICTABLE>
 220:	25ef0100 	strbcs	r0, [pc, #256]!	; 328 <startup-0x1ffffcd8>
 224:	02000000 	andeq	r0, r0, #0
 228:	7e0a7791 	mcrvc	7, 0, r7, cr10, cr1, {4}
 22c:	2e200005 	cdpcs	0, 2, cr0, cr0, cr5, {0}
 230:	10000000 	andne	r0, r0, r0
 234:	f0010078 			; <UNDEFINED> instruction: 0xf0010078
 238:	00000025 	andeq	r0, r0, r5, lsr #32
 23c:	00769102 	rsbseq	r9, r6, r2, lsl #2
 240:	d9120000 	ldmdble	r2, {}	; <UNPREDICTABLE>
 244:	01000001 	tsteq	r0, r1
 248:	0004aae2 	andeq	sl, r4, r2, ror #21
 24c:	0000c620 	andeq	ip, r0, r0, lsr #12
 250:	8c9c0100 	ldfhis	f0, [ip], {0}
 254:	13000002 	movwne	r0, #2
 258:	e2010078 	and	r0, r1, #120	; 0x78
 25c:	00000025 	andeq	r0, r0, r5, lsr #32
 260:	13679102 	cmnne	r7, #-2147483648	; 0x80000000
 264:	e2010079 	and	r0, r1, #121	; 0x79
 268:	00000025 	andeq	r0, r0, r5, lsr #32
 26c:	13669102 	cmnne	r6, #-2147483648	; 0x80000000
 270:	00746573 	rsbseq	r6, r4, r3, ror r5
 274:	0025e201 	eoreq	lr, r5, r1, lsl #4
 278:	91020000 	mrsls	r0, (UNDEF: 2)
 27c:	01df0665 	bicseq	r0, pc, r5, ror #12
 280:	e5010000 	str	r0, [r1, #-0]
 284:	00000025 	andeq	r0, r0, r5, lsr #32
 288:	006f9102 	rsbeq	r9, pc, r2, lsl #2
 28c:	00022414 	andeq	r2, r2, r4, lsl r4
 290:	44d30100 	ldrbmi	r0, [r3], #256	; 0x100
 294:	66200004 	strtvs	r0, [r0], -r4
 298:	01000000 	mrseq	r0, (UNDEF: 0)
 29c:	0002d29c 	muleq	r2, ip, r2
 2a0:	044a0a00 	strbeq	r0, [sl], #-2560	; 0xfffff600
 2a4:	00582000 	subseq	r2, r8, r0
 2a8:	00060000 	andeq	r0, r6, r0
 2ac:	01000000 	mrseq	r0, (UNDEF: 0)
 2b0:	000025d4 	ldrdeq	r2, [r0], -r4
 2b4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 2b8:	00046e0a 	andeq	r6, r4, sl, lsl #28
 2bc:	00002220 	andeq	r2, r0, r0, lsr #4
 2c0:	64611000 	strbtvs	r1, [r1], #-0
 2c4:	d7010064 	strle	r0, [r1, -r4, rrx]
 2c8:	00000025 	andeq	r0, r0, r5, lsr #32
 2cc:	00769102 	rsbseq	r9, r6, r2, lsl #2
 2d0:	13150000 	tstne	r5, #0
 2d4:	01000001 	tsteq	r0, r1
 2d8:	0003eec3 	andeq	lr, r3, r3, asr #29
 2dc:	00005620 	andeq	r5, r0, r0, lsr #12
 2e0:	169c0100 	ldrne	r0, [ip], r0, lsl #2
 2e4:	00000032 	andeq	r0, r0, r2, lsr r0
 2e8:	0025be01 	eoreq	fp, r5, r1, lsl #28
 2ec:	03c40000 	biceq	r0, r4, #0
 2f0:	002a2000 	eoreq	r2, sl, r0
 2f4:	9c010000 	stcls	0, cr0, [r1], {-0}
 2f8:	0000030b 	andeq	r0, r0, fp, lsl #6
 2fc:	00001b17 	andeq	r1, r0, r7, lsl fp
 300:	25be0100 	ldrcs	r0, [lr, #256]!	; 0x100
 304:	02000000 	andeq	r0, r0, #0
 308:	18007791 	stmdane	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
 30c:	000001f6 	strdeq	r0, [r0], -r6
 310:	037eb601 	cmneq	lr, #1048576	; 0x100000
 314:	00462000 	subeq	r2, r6, r0
 318:	9c010000 	stcls	0, cr0, [r1], {-0}
 31c:	0000033d 	andeq	r0, r0, sp, lsr r3
 320:	00003f17 	andeq	r3, r0, r7, lsl pc
 324:	25b60100 	ldrcs	r0, [r6, #256]!	; 0x100
 328:	02000000 	andeq	r0, r0, #0
 32c:	1b177791 	blne	5de178 <startup-0x1fa21e88>
 330:	01000000 	mrseq	r0, (UNDEF: 0)
 334:	000025b6 			; <UNDEFINED> instruction: 0x000025b6
 338:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 33c:	02641800 	rsbeq	r1, r4, #0, 16
 340:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
 344:	20000338 	andcs	r0, r0, r8, lsr r3
 348:	00000046 	andeq	r0, r0, r6, asr #32
 34c:	036f9c01 	cmneq	pc, #256	; 0x100
 350:	72170000 	andsvc	r0, r7, #0
 354:	01000002 	tsteq	r0, r2
 358:	000025ae 	andeq	r2, r0, lr, lsr #11
 35c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 360:	00001b17 	andeq	r1, r0, r7, lsl fp
 364:	25ae0100 	strcs	r0, [lr, #256]!	; 0x100
 368:	02000000 	andeq	r0, r0, #0
 36c:	18007691 	stmdane	r0, {r0, r4, r7, r9, sl, ip, sp, lr}
 370:	00000216 	andeq	r0, r0, r6, lsl r2
 374:	02c49c01 	sbceq	r9, r4, #256	; 0x100
 378:	00742000 	rsbseq	r2, r4, r0
 37c:	9c010000 	stcls	0, cr0, [r1], {-0}
 380:	000003a1 	andeq	r0, r0, r1, lsr #7
 384:	00000e17 	andeq	r0, r0, r7, lsl lr
 388:	259c0100 	ldrcs	r0, [ip, #256]	; 0x100
 38c:	02000000 	andeq	r0, r0, #0
 390:	1b177791 	blne	5de1dc <startup-0x1fa21e24>
 394:	01000000 	mrseq	r0, (UNDEF: 0)
 398:	0000259c 	muleq	r0, ip, r5
 39c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 3a0:	02451600 	subeq	r1, r5, #0, 12
 3a4:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
 3a8:	00000025 	andeq	r0, r0, r5, lsr #32
 3ac:	20000234 	andcs	r0, r0, r4, lsr r2
 3b0:	00000090 	muleq	r0, r0, r0
 3b4:	03d69c01 	bicseq	r9, r6, #256	; 0x100
 3b8:	1b170000 	blne	5c03c0 <startup-0x1fa3fc40>
 3bc:	01000000 	mrseq	r0, (UNDEF: 0)
 3c0:	00002589 	andeq	r2, r0, r9, lsl #11
 3c4:	6f910200 	svcvs	0x00910200
 3c8:	00767210 	rsbseq	r7, r6, r0, lsl r2
 3cc:	00259201 	eoreq	r9, r5, r1, lsl #4
 3d0:	91020000 	mrsls	r0, (UNDEF: 2)
 3d4:	fb180077 	blx	6005ba <startup-0x1f9ffa46>
 3d8:	01000000 	mrseq	r0, (UNDEF: 0)
 3dc:	0001c473 	andeq	ip, r1, r3, ror r4
 3e0:	00007020 	andeq	r7, r0, r0, lsr #32
 3e4:	049c0100 	ldreq	r0, [ip], #256	; 0x100
 3e8:	0a000004 	beq	400 <startup-0x1ffffc00>
 3ec:	200001e6 	andcs	r0, r0, r6, ror #3
 3f0:	0000002a 	andeq	r0, r0, sl, lsr #32
 3f4:	00010e06 	andeq	r0, r1, r6, lsl #28
 3f8:	257f0100 	ldrbcs	r0, [pc, #-256]!	; 300 <startup-0x1ffffd00>
 3fc:	02000000 	andeq	r0, r0, #0
 400:	00007791 	muleq	r0, r1, r7
 404:	00001419 	andeq	r1, r0, r9, lsl r4
 408:	5c680100 	stfple	f0, [r8], #-0
 40c:	68200001 	stmdavs	r0!, {r0}
 410:	01000000 	mrseq	r0, (UNDEF: 0)
 414:	0004429c 	muleq	r4, ip, r2
 418:	001b1700 	andseq	r1, fp, r0, lsl #14
 41c:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
 420:	00000025 	andeq	r0, r0, r5, lsr #32
 424:	066f9102 	strbteq	r9, [pc], -r2, lsl #2
 428:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 42c:	00256901 	eoreq	r6, r5, r1, lsl #18
 430:	91020000 	mrsls	r0, (UNDEF: 2)
 434:	00631077 	rsbeq	r1, r3, r7, ror r0
 438:	00256c01 	eoreq	r6, r5, r1, lsl #24
 43c:	91020000 	mrsls	r0, (UNDEF: 2)
 440:	26190076 			; <UNDEFINED> instruction: 0x26190076
 444:	01000001 	tsteq	r0, r1
 448:	00010c60 	andeq	r0, r1, r0, ror #24
 44c:	00005020 	andeq	r5, r0, r0, lsr #32
 450:	709c0100 	addsvc	r0, ip, r0, lsl #2
 454:	13000004 	movwne	r0, #4
 458:	60010078 	andvs	r0, r1, r8, ror r0
 45c:	00000025 	andeq	r0, r0, r5, lsr #32
 460:	106f9102 	rsbne	r9, pc, r2, lsl #2
 464:	61010063 	tstvs	r1, r3, rrx
 468:	00000025 	andeq	r0, r0, r5, lsr #32
 46c:	00779102 	rsbseq	r9, r7, r2, lsl #2
 470:	00013d19 	andeq	r3, r1, r9, lsl sp
 474:	bc580100 	ldflte	f0, [r8], {-0}
 478:	50200000 	eorpl	r0, r0, r0
 47c:	01000000 	mrseq	r0, (UNDEF: 0)
 480:	00049e9c 	muleq	r4, ip, lr
 484:	00781300 	rsbseq	r1, r8, r0, lsl #6
 488:	00255801 	eoreq	r5, r5, r1, lsl #16
 48c:	91020000 	mrsls	r0, (UNDEF: 2)
 490:	0063106f 	rsbeq	r1, r3, pc, rrx
 494:	00255901 	eoreq	r5, r5, r1, lsl #18
 498:	91020000 	mrsls	r0, (UNDEF: 2)
 49c:	ea1a0077 	b	680680 <startup-0x1f97f980>
 4a0:	01000001 	tsteq	r0, r1
 4a4:	0000944a 	andeq	r9, r0, sl, asr #8
 4a8:	00002820 	andeq	r2, r0, r0, lsr #16
 4ac:	c19c0100 	orrsgt	r0, ip, r0, lsl #2
 4b0:	13000004 	movwne	r0, #4
 4b4:	0100736d 	tsteq	r0, sp, ror #6
 4b8:	00004d4a 	andeq	r4, r0, sl, asr #26
 4bc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 4c0:	01671a00 	cmneq	r7, r0, lsl #20
 4c4:	40010000 	andmi	r0, r1, r0
 4c8:	20000066 	andcs	r0, r0, r6, rrx
 4cc:	0000002e 	andeq	r0, r0, lr, lsr #32
 4d0:	04e49c01 	strbteq	r9, [r4], #3073	; 0xc01
 4d4:	75130000 	ldrvc	r0, [r3, #-0]
 4d8:	40010073 	andmi	r0, r1, r3, ror r0
 4dc:	0000004d 	andeq	r0, r0, sp, asr #32
 4e0:	00749102 	rsbseq	r9, r4, r2, lsl #2
 4e4:	0000ea1b 	andeq	lr, r0, fp, lsl sl
 4e8:	543b0100 	ldrtpl	r0, [fp], #-256	; 0xffffff00
 4ec:	12200000 	eorne	r0, r0, #0
 4f0:	01000000 	mrseq	r0, (UNDEF: 0)
 4f4:	01731c9c 			; <UNDEFINED> instruction: 0x01731c9c
 4f8:	32010000 	andcc	r0, r1, #0
 4fc:	20000010 	andcs	r0, r0, r0, lsl r0
 500:	00000044 	andeq	r0, r0, r4, asr #32
 504:	4d009c01 	stcmi	12, cr9, [r0, #-4]
 508:	04000004 	streq	r0, [r0], #-4
 50c:	00020b00 	andeq	r0, r2, r0, lsl #22
 510:	44010400 	strmi	r0, [r1], #-1024	; 0xfffffc00
 514:	0c000000 	stceq	0, cr0, [r0], {-0}
 518:	000002a6 	andeq	r0, r0, r6, lsr #5
 51c:	000001ae 	andeq	r0, r0, lr, lsr #3
	...
 528:	0000021f 	andeq	r0, r0, pc, lsl r2
 52c:	00015f02 	andeq	r5, r1, r2, lsl #30
 530:	30020200 	andcc	r0, r2, r0, lsl #4
 534:	03000000 	movweq	r0, #0
 538:	00dc0801 	sbcseq	r0, ip, r1, lsl #16
 53c:	25040000 	strcs	r0, [r4, #-0]
 540:	4d000000 	stcmi	0, cr0, [r0, #-0]
 544:	05000000 	streq	r0, [r0, #-0]
 548:	0000004d 	andeq	r0, r0, sp, asr #32
 54c:	004d0507 	subeq	r0, sp, r7, lsl #10
 550:	007f0000 	rsbseq	r0, pc, r0
 554:	52070403 	andpl	r0, r7, #50331648	; 0x3000000
 558:	06000001 	streq	r0, [r0], -r1
 55c:	0000025d 	andeq	r0, r0, sp, asr r2
 560:	00370302 	eorseq	r0, r7, r2, lsl #6
 564:	03050000 	movweq	r0, #20480	; 0x5000
 568:	20000fcc 	andcs	r0, r0, ip, asr #31
 56c:	00029907 	andeq	r9, r2, r7, lsl #18
 570:	0e010200 	cdpeq	2, 0, cr0, cr1, cr0, {0}
 574:	00000086 	andeq	r0, r0, r6, lsl #1
 578:	01007808 	tsteq	r0, r8, lsl #16
 57c:	0000250f 	andeq	r2, r0, pc, lsl #10
 580:	79080000 	stmdbvc	r8, {}	; <UNPREDICTABLE>
 584:	25100100 	ldrcs	r0, [r0, #-256]	; 0xffffff00
 588:	01000000 	mrseq	r0, (UNDEF: 0)
 58c:	02a00200 	adceq	r0, r0, #0, 4
 590:	11010000 	mrsne	r0, (UNDEF: 1)
 594:	00000065 	andeq	r0, r0, r5, rrx
 598:	00030f07 	andeq	r0, r3, r7, lsl #30
 59c:	15013400 	strne	r3, [r1, #-1024]	; 0xfffffc00
 5a0:	000000cd 	andeq	r0, r0, sp, asr #1
 5a4:	00037009 	andeq	r7, r3, r9
 5a8:	cd160100 	ldfgts	f0, [r6, #-0]
 5ac:	00000000 	andeq	r0, r0, r0
 5b0:	00032109 	andeq	r2, r3, r9, lsl #2
 5b4:	cd170100 	ldfgts	f0, [r7, #-0]
 5b8:	04000000 	streq	r0, [r0], #-0
 5bc:	00032709 	andeq	r2, r3, r9, lsl #14
 5c0:	cd180100 	ldfgts	f0, [r8, #-0]
 5c4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 5c8:	00787008 	rsbseq	r7, r8, r8
 5cc:	00d41901 	sbcseq	r1, r4, r1, lsl #18
 5d0:	000c0000 	andeq	r0, ip, r0
 5d4:	6905040a 	stmdbvs	r5, {r1, r3, sl}
 5d8:	0400746e 	streq	r7, [r0], #-1134	; 0xfffffb92
 5dc:	00000086 	andeq	r0, r0, r6, lsl #1
 5e0:	000000e4 	andeq	r0, r0, r4, ror #1
 5e4:	00004d05 	andeq	r4, r0, r5, lsl #26
 5e8:	02001300 	andeq	r1, r0, #0, 6
 5ec:	0000027b 	andeq	r0, r0, fp, ror r2
 5f0:	00911a01 	addseq	r1, r1, r1, lsl #20
 5f4:	7a020000 	bvc	805fc <startup-0x1ff7fa04>
 5f8:	01000002 	tsteq	r0, r2
 5fc:	0000fa1a 	andeq	pc, r0, sl, lsl sl	; <UNPREDICTABLE>
 600:	91040b00 	tstls	r4, r0, lsl #22
 604:	07000000 	streq	r0, [r0, -r0]
 608:	0000035f 	andeq	r0, r0, pc, asr r3
 60c:	791c0124 	ldmdbvc	ip, {r2, r5, r8}
 610:	08000001 	stmdaeq	r0, {r0}
 614:	006f6567 	rsbeq	r6, pc, r7, ror #10
 618:	00ef1d01 	rsceq	r1, pc, r1, lsl #26
 61c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 620:	0000028f 	andeq	r0, r0, pc, lsl #5
 624:	00cd1e01 	sbceq	r1, sp, r1, lsl #28
 628:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
 62c:	00000294 	muleq	r0, r4, r2
 630:	00cd1e01 	sbceq	r1, sp, r1, lsl #28
 634:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
 638:	000002d5 	ldrdeq	r0, [r0], -r5
 63c:	00cd1f01 	sbceq	r1, sp, r1, lsl #30
 640:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
 644:	000002da 	ldrdeq	r0, [r0], -sl
 648:	00cd1f01 	sbceq	r1, sp, r1, lsl #30
 64c:	09100000 	ldmdbeq	r0, {}	; <UNPREDICTABLE>
 650:	00000332 	andeq	r0, r0, r2, lsr r3
 654:	018a2001 	orreq	r2, sl, r1
 658:	09140000 	ldmdbeq	r4, {}	; <UNPREDICTABLE>
 65c:	00000137 	andeq	r0, r0, r7, lsr r1
 660:	018a2101 	orreq	r2, sl, r1, lsl #2
 664:	09180000 	ldmdbeq	r8, {}	; <UNPREDICTABLE>
 668:	00000284 	andeq	r0, r0, r4, lsl #5
 66c:	018a2201 	orreq	r2, sl, r1, lsl #4
 670:	091c0000 	ldmdbeq	ip, {}	; <UNPREDICTABLE>
 674:	00000348 	andeq	r0, r0, r8, asr #6
 678:	01a52301 			; <UNDEFINED> instruction: 0x01a52301
 67c:	00200000 	eoreq	r0, r0, r0
 680:	0001840c 	andeq	r8, r1, ip, lsl #8
 684:	01840d00 	orreq	r0, r4, r0, lsl #26
 688:	0b000000 	bleq	690 <startup-0x1ffff970>
 68c:	00010004 	andeq	r0, r1, r4
 690:	79040b00 	stmdbvc	r4, {r8, r9, fp}
 694:	0c000001 	stceq	0, cr0, [r0], {1}
 698:	000001a5 	andeq	r0, r0, r5, lsr #3
 69c:	0001840d 	andeq	r8, r1, sp, lsl #8
 6a0:	00cd0d00 	sbceq	r0, sp, r0, lsl #26
 6a4:	cd0d0000 	stcgt	0, cr0, [sp, #-0]
 6a8:	00000000 	andeq	r0, r0, r0
 6ac:	0190040b 	orrseq	r0, r0, fp, lsl #8
 6b0:	95020000 	strls	r0, [r2, #-0]
 6b4:	01000003 	tsteq	r0, r3
 6b8:	00010024 	andeq	r0, r1, r4, lsr #32
 6bc:	03940200 	orrseq	r0, r4, #0, 4
 6c0:	24010000 	strcs	r0, [r1], #-0
 6c4:	00000184 	andeq	r0, r0, r4, lsl #3
 6c8:	0002df0e 	andeq	sp, r2, lr, lsl #30
 6cc:	e4660100 	strbt	r0, [r6], #-256	; 0xffffff00
 6d0:	05000000 	streq	r0, [r0, #-0]
 6d4:	0013cc03 	andseq	ip, r3, r3, lsl #24
 6d8:	032d0620 			; <UNDEFINED> instruction: 0x032d0620
 6dc:	70010000 	andvc	r0, r1, r0
 6e0:	000001ab 	andeq	r0, r0, fp, lsr #3
 6e4:	14000305 	strne	r0, [r0], #-773	; 0xfffffcfb
 6e8:	fa0f2000 	blx	3c86f0 <startup-0x1fc37910>
 6ec:	01000002 	tsteq	r0, r2
 6f0:	000ab07b 	andeq	fp, sl, fp, ror r0
 6f4:	00011c20 	andeq	r1, r1, r0, lsr #24
 6f8:	9a9c0100 	bls	fe700b00 <ball+0xde6ff700>
 6fc:	10000002 	andne	r0, r0, r2
 700:	7c010070 	stcvc	0, cr0, [r1], {112}	; 0x70
 704:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
 708:	066c9102 	strbteq	r9, [ip], -r2, lsl #2
 70c:	0000003f 	andeq	r0, r0, pc, lsr r0
 710:	00258601 	eoreq	r8, r5, r1, lsl #12
 714:	91020000 	mrsls	r0, (UNDEF: 2)
 718:	0342066b 	movteq	r0, #9835	; 0x266b
 71c:	92010000 	andls	r0, r1, #0
 720:	000000cd 	andeq	r0, r0, sp, asr #1
 724:	10649102 	rsbne	r9, r4, r2, lsl #2
 728:	94010063 	strls	r0, [r1], #-99	; 0xffffff9d
 72c:	0000029a 	muleq	r0, sl, r2
 730:	11639102 	cmnne	r3, r2, lsl #2
 734:	20000ada 	ldrdcs	r0, [r0], -sl
 738:	0000002e 	andeq	r0, r0, lr, lsr #32
 73c:	00000246 	andeq	r0, r0, r6, asr #4
 740:	01006910 	tsteq	r0, r0, lsl r9
 744:	0000cd89 	andeq	ip, r0, r9, lsl #27
 748:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 74c:	0b081100 	bleq	204b54 <startup-0x1fdfb4ac>
 750:	002e2000 	eoreq	r2, lr, r0
 754:	02600000 	rsbeq	r0, r0, #0
 758:	69100000 	ldmdbvs	r0, {}	; <UNPREDICTABLE>
 75c:	cd8d0100 	stfgts	f0, [sp]
 760:	02000000 	andeq	r0, r0, #0
 764:	12007091 	andne	r7, r0, #145	; 0x91
 768:	20000b46 	andcs	r0, r0, r6, asr #22
 76c:	0000007c 	andeq	r0, r0, ip, ror r0
 770:	00021113 	andeq	r1, r2, r3, lsl r1
 774:	cd970100 	ldfgts	f0, [r7]
 778:	7a000000 	bvc	780 <startup-0x1ffff880>
 77c:	14000002 	strne	r0, [r0], #-2
 780:	02091300 	andeq	r1, r9, #0, 6
 784:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
 788:	000000cd 	andeq	r0, r0, sp, asr #1
 78c:	0000028b 	andeq	r0, r0, fp, lsl #5
 790:	ea150014 	b	5407e8 <startup-0x1fabf818>
 794:	01000001 	tsteq	r0, r1
 798:	0000cda0 	andeq	ip, r0, r0, lsr #27
 79c:	00001400 	andeq	r1, r0, r0, lsl #8
 7a0:	08010300 	stmdaeq	r1, {r8, r9}
 7a4:	000000e5 	andeq	r0, r0, r5, ror #1
 7a8:	00037a0f 	andeq	r7, r3, pc, lsl #20
 7ac:	144f0100 	strbne	r0, [pc], #-256	; 7b4 <startup-0x1ffff84c>
 7b0:	9c20000a 	stcls	0, cr0, [r0], #-40	; 0xffffffd8
 7b4:	01000000 	mrseq	r0, (UNDEF: 0)
 7b8:	0002fb9c 	muleq	r2, ip, fp
 7bc:	006f1600 	rsbeq	r1, pc, r0, lsl #12
 7c0:	01b64f01 			; <UNDEFINED> instruction: 0x01b64f01
 7c4:	91020000 	mrsls	r0, (UNDEF: 2)
 7c8:	03050664 	movweq	r0, #22116	; 0x5664
 7cc:	51010000 	mrspl	r0, (UNDEF: 1)
 7d0:	000000cd 	andeq	r0, r0, sp, asr #1
 7d4:	06749102 	ldrbteq	r9, [r4], -r2, lsl #2
 7d8:	0000030a 	andeq	r0, r0, sl, lsl #6
 7dc:	00cd5201 	sbceq	r5, sp, r1, lsl #4
 7e0:	91020000 	mrsls	r0, (UNDEF: 2)
 7e4:	02f40670 	rscseq	r0, r4, #112, 12	; 0x7000000
 7e8:	53010000 	movwpl	r0, #4096	; 0x1000
 7ec:	000000cd 	andeq	r0, r0, sp, asr #1
 7f0:	066c9102 	strbteq	r9, [ip], -r2, lsl #2
 7f4:	000002ed 	andeq	r0, r0, sp, ror #5
 7f8:	00cd5401 	sbceq	r5, sp, r1, lsl #8
 7fc:	91020000 	mrsls	r0, (UNDEF: 2)
 800:	890f0068 	stmdbhi	pc, {r3, r5, r6}	; <UNPREDICTABLE>
 804:	01000002 	tsteq	r0, r2
 808:	00095841 	andeq	r5, r9, r1, asr #16
 80c:	0000bc20 	andeq	fp, r0, r0, lsr #24
 810:	a39c0100 	orrsge	r0, ip, #0, 2
 814:	16000003 	strne	r0, [r0], -r3
 818:	4101006f 	tstmi	r1, pc, rrx
 81c:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
 820:	17549102 	ldrbne	r9, [r4, -r2, lsl #2]
 824:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 828:	00cd4101 	sbceq	r4, sp, r1, lsl #2
 82c:	91020000 	mrsls	r0, (UNDEF: 2)
 830:	02f40650 	rscseq	r0, r4, #80, 12	; 0x5000000
 834:	42010000 	andmi	r0, r1, #0
 838:	000000cd 	andeq	r0, r0, sp, asr #1
 83c:	066c9102 	strbteq	r9, [ip], -r2, lsl #2
 840:	000002ed 	andeq	r0, r0, sp, ror #5
 844:	00cd4301 	sbceq	r4, sp, r1, lsl #6
 848:	91020000 	mrsls	r0, (UNDEF: 2)
 84c:	00721068 	rsbseq	r1, r2, r8, rrx
 850:	00cd4401 	sbceq	r4, sp, r1, lsl #8
 854:	91020000 	mrsls	r0, (UNDEF: 2)
 858:	097e1264 	ldmdbeq	lr!, {r2, r5, r6, r9, ip}^
 85c:	008e2000 	addeq	r2, lr, r0
 860:	79100000 	ldmdbvc	r0, {}	; <UNPREDICTABLE>
 864:	cd450100 	stfgte	f0, [r5, #-0]
 868:	02000000 	andeq	r0, r0, #0
 86c:	84127491 	ldrhi	r7, [r2], #-1169	; 0xfffffb6f
 870:	7a200009 	bvc	80089c <startup-0x1f7ff764>
 874:	10000000 	andne	r0, r0, r0
 878:	46010078 			; <UNDEFINED> instruction: 0x46010078
 87c:	000000cd 	andeq	r0, r0, sp, asr #1
 880:	12709102 	rsbsne	r9, r0, #-2147483648	; 0x80000000
 884:	2000098a 	andcs	r0, r0, sl, lsl #19
 888:	00000066 	andeq	r0, r0, r6, rrx
 88c:	00727810 	rsbseq	r7, r2, r0, lsl r8
 890:	00cd4701 	sbceq	r4, sp, r1, lsl #14
 894:	91020000 	mrsls	r0, (UNDEF: 2)
 898:	72791060 	rsbsvc	r1, r9, #96	; 0x60
 89c:	cd480100 	stfgte	f0, [r8, #-0]
 8a0:	02000000 	andeq	r0, r0, #0
 8a4:	00005c91 	muleq	r0, r1, ip
 8a8:	520f0000 	andpl	r0, pc, #0
 8ac:	01000003 	tsteq	r0, r3
 8b0:	00093e36 	andeq	r3, r9, r6, lsr lr
 8b4:	00001a20 	andeq	r1, r0, r0, lsr #20
 8b8:	d29c0100 	addsle	r0, ip, #0, 2
 8bc:	16000003 	strne	r0, [r0], -r3
 8c0:	3601006f 	strcc	r0, [r1], -pc, rrx
 8c4:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
 8c8:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
 8cc:	00000289 	andeq	r0, r0, r9, lsl #5
 8d0:	00cd3301 	sbceq	r3, sp, r1, lsl #6
 8d4:	00140000 	andseq	r0, r4, r0
 8d8:	03640f00 	cmneq	r4, #0, 30
 8dc:	2b010000 	blcs	408e4 <startup-0x1ffbf71c>
 8e0:	20000924 	andcs	r0, r0, r4, lsr #18
 8e4:	0000001a 	andeq	r0, r0, sl, lsl r0
 8e8:	04019c01 	streq	r9, [r1], #-3073	; 0xfffff3ff
 8ec:	6f160000 	svcvs	0x00160000
 8f0:	b62b0100 	strtlt	r0, [fp], -r0, lsl #2
 8f4:	02000001 	andeq	r0, r0, #1
 8f8:	89157491 	ldmdbhi	r5, {r0, r4, r7, sl, ip, sp, lr}
 8fc:	01000002 	tsteq	r0, r2
 900:	0000cd33 	andeq	ip, r0, r3, lsr sp
 904:	00001400 	andeq	r1, r0, r0, lsl #8
 908:	00033718 	andeq	r3, r3, r8, lsl r7
 90c:	04260100 	strteq	r0, [r6], #-256	; 0xffffff00
 910:	20200009 	eorcs	r0, r0, r9
 914:	01000000 	mrseq	r0, (UNDEF: 0)
 918:	00043f9c 	muleq	r4, ip, pc	; <UNPREDICTABLE>
 91c:	006f1600 	rsbeq	r1, pc, r0, lsl #12
 920:	01b62601 			; <UNDEFINED> instruction: 0x01b62601
 924:	91020000 	mrsls	r0, (UNDEF: 2)
 928:	03861774 	orreq	r1, r6, #116, 14	; 0x1d00000
 92c:	26010000 	strcs	r0, [r1], -r0
 930:	000000cd 	andeq	r0, r0, sp, asr #1
 934:	17709102 	ldrbne	r9, [r0, -r2, lsl #2]!
 938:	0000038d 	andeq	r0, r0, sp, lsl #7
 93c:	00cd2601 	sbceq	r2, sp, r1, lsl #12
 940:	91020000 	mrsls	r0, (UNDEF: 2)
 944:	1919006c 	ldmdbne	r9, {r2, r3, r5, r6}
 948:	01000003 	tsteq	r0, r3
 94c:	00000004 	andeq	r0, r0, r4
 950:	00000c20 	andeq	r0, r0, r0, lsr #24
 954:	009c0100 	addseq	r0, ip, r0, lsl #2

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	00001349 	andeq	r1, r0, r9, asr #6
  20:	0b002403 	bleq	9034 <startup-0x1fff6fcc>
  24:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  28:	0400000e 	streq	r0, [r0], #-14
  2c:	13490101 	movtne	r0, #37121	; 0x9101
  30:	00001301 	andeq	r1, r0, r1, lsl #6
  34:	49002105 	stmdbmi	r0, {r0, r2, r8, sp}
  38:	000b2f13 	andeq	r2, fp, r3, lsl pc
  3c:	00340600 	eorseq	r0, r4, r0, lsl #12
  40:	0b3a0e03 	bleq	e83854 <startup-0x1f17c7ac>
  44:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  48:	00001802 	andeq	r1, r0, r2, lsl #16
  4c:	3f012e07 	svccc	0x00012e07
  50:	3a0e0319 	bcc	380cbc <startup-0x1fc7f344>
  54:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
  58:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  5c:	97184006 	ldrls	r4, [r8, -r6]
  60:	13011942 	movwne	r1, #6466	; 0x1942
  64:	05080000 	streq	r0, [r8, #-0]
  68:	3a080300 	bcc	200c70 <startup-0x1fdff390>
  6c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  70:	00180213 	andseq	r0, r8, r3, lsl r2
  74:	00340900 	eorseq	r0, r4, r0, lsl #18
  78:	0b3a0803 	bleq	e8208c <startup-0x1f17df74>
  7c:	1349053b 	movtne	r0, #38203	; 0x953b
  80:	00001802 	andeq	r1, r0, r2, lsl #16
  84:	11010b0a 	tstne	r1, sl, lsl #22
  88:	00061201 	andeq	r1, r6, r1, lsl #4
  8c:	00340b00 	eorseq	r0, r4, r0, lsl #22
  90:	0b3a0e03 	bleq	e838a4 <startup-0x1f17c75c>
  94:	1349053b 	movtne	r0, #38203	; 0x953b
  98:	00001802 	andeq	r1, r0, r2, lsl #16
  9c:	3f012e0c 	svccc	0x00012e0c
  a0:	3a0e0319 	bcc	380d0c <startup-0x1fc7f2f4>
  a4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
  a8:	11134919 	tstne	r3, r9, lsl r9
  ac:	40061201 	andmi	r1, r6, r1, lsl #4
  b0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
  b4:	00001301 	andeq	r1, r0, r1, lsl #6
  b8:	3f002e0d 	svccc	0x00002e0d
  bc:	3a0e0319 	bcc	380d28 <startup-0x1fc7f2d8>
  c0:	11053b0b 	tstne	r5, fp, lsl #22
  c4:	40061201 	andmi	r1, r6, r1, lsl #4
  c8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  cc:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
  d0:	03193f01 	tsteq	r9, #1, 30
  d4:	3b0b3a0e 	blcc	2ce914 <startup-0x1fd316ec>
  d8:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
  dc:	96184006 	ldrls	r4, [r8], -r6
  e0:	13011942 	movwne	r1, #6466	; 0x1942
  e4:	0b0f0000 	bleq	3c00ec <startup-0x1fc3ff14>
  e8:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
  ec:	00130106 	andseq	r0, r3, r6, lsl #2
  f0:	00341000 	eorseq	r1, r4, r0
  f4:	0b3a0803 	bleq	e82108 <startup-0x1f17def8>
  f8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  fc:	00001802 	andeq	r1, r0, r2, lsl #16
 100:	3f012e11 	svccc	0x00012e11
 104:	3a0e0319 	bcc	380d70 <startup-0x1fc7f290>
 108:	110b3b0b 	tstne	fp, fp, lsl #22
 10c:	40061201 	andmi	r1, r6, r1, lsl #4
 110:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 114:	00001301 	andeq	r1, r0, r1, lsl #6
 118:	3f012e12 	svccc	0x00012e12
 11c:	3a0e0319 	bcc	380d88 <startup-0x1fc7f278>
 120:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 124:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 128:	97184006 	ldrls	r4, [r8, -r6]
 12c:	13011942 	movwne	r1, #6466	; 0x1942
 130:	05130000 	ldreq	r0, [r3, #-0]
 134:	3a080300 	bcc	200d3c <startup-0x1fdff2c4>
 138:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 13c:	00180213 	andseq	r0, r8, r3, lsl r2
 140:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
 144:	0b3a0e03 	bleq	e83958 <startup-0x1f17c6a8>
 148:	01110b3b 	tsteq	r1, fp, lsr fp
 14c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 150:	01194296 			; <UNDEFINED> instruction: 0x01194296
 154:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
 158:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
 15c:	0b3b0b3a 	bleq	ec2e4c <startup-0x1f13d1b4>
 160:	06120111 			; <UNDEFINED> instruction: 0x06120111
 164:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 168:	16000019 			; <UNDEFINED> instruction: 0x16000019
 16c:	0e03012e 	adfeqsp	f0, f3, #0.5
 170:	0b3b0b3a 	bleq	ec2e60 <startup-0x1f13d1a0>
 174:	13491927 	movtne	r1, #39207	; 0x9927
 178:	06120111 			; <UNDEFINED> instruction: 0x06120111
 17c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 180:	00130119 	andseq	r0, r3, r9, lsl r1
 184:	00051700 	andeq	r1, r5, r0, lsl #14
 188:	0b3a0e03 	bleq	e8399c <startup-0x1f17c664>
 18c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 190:	00001802 	andeq	r1, r0, r2, lsl #16
 194:	03012e18 	movweq	r2, #7704	; 0x1e18
 198:	3b0b3a0e 	blcc	2ce9d8 <startup-0x1fd31628>
 19c:	1119270b 	tstne	r9, fp, lsl #14
 1a0:	40061201 	andmi	r1, r6, r1, lsl #4
 1a4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1a8:	00001301 	andeq	r1, r0, r1, lsl #6
 1ac:	03012e19 	movweq	r2, #7705	; 0x1e19
 1b0:	3b0b3a0e 	blcc	2ce9f0 <startup-0x1fd31610>
 1b4:	1119270b 	tstne	r9, fp, lsl #14
 1b8:	40061201 	andmi	r1, r6, r1, lsl #4
 1bc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 1c0:	00001301 	andeq	r1, r0, r1, lsl #6
 1c4:	3f012e1a 	svccc	0x00012e1a
 1c8:	3a0e0319 	bcc	380e34 <startup-0x1fc7f1cc>
 1cc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 1d0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 1d4:	96184006 	ldrls	r4, [r8], -r6
 1d8:	13011942 	movwne	r1, #6466	; 0x1942
 1dc:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
 1e0:	3a0e0300 	bcc	380de8 <startup-0x1fc7f218>
 1e4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 1e8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 1ec:	96184006 	ldrls	r4, [r8], -r6
 1f0:	00001942 	andeq	r1, r0, r2, asr #18
 1f4:	03002e1c 	movweq	r2, #3612	; 0xe1c
 1f8:	3b0b3a0e 	blcc	2cea38 <startup-0x1fd315c8>
 1fc:	1119270b 	tstne	r9, fp, lsl #14
 200:	40061201 	andmi	r1, r6, r1, lsl #4
 204:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 208:	01000000 	mrseq	r0, (UNDEF: 0)
 20c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 210:	0e030b13 	vmoveq.32	d3[0], r0
 214:	17550e1b 	smmlane	r5, fp, lr, r0
 218:	17100111 			; <UNDEFINED> instruction: 0x17100111
 21c:	16020000 	strne	r0, [r2], -r0
 220:	3a0e0300 	bcc	380e28 <startup-0x1fc7f1d8>
 224:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 228:	03000013 	movweq	r0, #19
 22c:	0b0b0024 	bleq	2c02c4 <startup-0x1fd3fd3c>
 230:	0e030b3e 	vmoveq.16	d3[0], r0
 234:	01040000 	mrseq	r0, (UNDEF: 4)
 238:	01134901 	tsteq	r3, r1, lsl #18
 23c:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
 240:	13490021 	movtne	r0, #36897	; 0x9021
 244:	00000b2f 	andeq	r0, r0, pc, lsr #22
 248:	03003406 	movweq	r3, #1030	; 0x406
 24c:	3b0b3a0e 	blcc	2cea8c <startup-0x1fd31574>
 250:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 254:	07000018 	smladeq	r0, r8, r0, r0
 258:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 25c:	0b3a0b0b 	bleq	e82e90 <startup-0x1f17d170>
 260:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 264:	0d080000 	stceq	0, cr0, [r8, #-0]
 268:	3a080300 	bcc	200e70 <startup-0x1fdff190>
 26c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 270:	000b3813 	andeq	r3, fp, r3, lsl r8
 274:	000d0900 	andeq	r0, sp, r0, lsl #18
 278:	0b3a0e03 	bleq	e83a8c <startup-0x1f17c574>
 27c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 280:	00000b38 	andeq	r0, r0, r8, lsr fp
 284:	0b00240a 	bleq	92b4 <startup-0x1fff6d4c>
 288:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 28c:	0b000008 	bleq	2b4 <startup-0x1ffffd4c>
 290:	0b0b000f 	bleq	2c02d4 <startup-0x1fd3fd2c>
 294:	00001349 	andeq	r1, r0, r9, asr #6
 298:	2701150c 	strcs	r1, [r1, -ip, lsl #10]
 29c:	00130119 	andseq	r0, r3, r9, lsl r1
 2a0:	00050d00 	andeq	r0, r5, r0, lsl #26
 2a4:	00001349 	andeq	r1, r0, r9, asr #6
 2a8:	0300340e 	movweq	r3, #1038	; 0x40e
 2ac:	3b0b3a0e 	blcc	2ceaec <startup-0x1fd31514>
 2b0:	3f13490b 	svccc	0x0013490b
 2b4:	00180219 	andseq	r0, r8, r9, lsl r2
 2b8:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
 2bc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2c0:	0b3b0b3a 	bleq	ec2fb0 <startup-0x1f13d050>
 2c4:	01111927 	tsteq	r1, r7, lsr #18
 2c8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2cc:	01194296 			; <UNDEFINED> instruction: 0x01194296
 2d0:	10000013 	andne	r0, r0, r3, lsl r0
 2d4:	08030034 	stmdaeq	r3, {r2, r4, r5}
 2d8:	0b3b0b3a 	bleq	ec2fc8 <startup-0x1f13d038>
 2dc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 2e0:	0b110000 	bleq	4402e8 <startup-0x1fbbfd18>
 2e4:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 2e8:	00130106 	andseq	r0, r3, r6, lsl #2
 2ec:	010b1200 	mrseq	r1, R11_fiq
 2f0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2f4:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
 2f8:	03193f01 	tsteq	r9, #1, 30
 2fc:	3b0b3a0e 	blcc	2ceb3c <startup-0x1fd314c4>
 300:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 304:	00130119 	andseq	r0, r3, r9, lsl r1
 308:	00181400 	andseq	r1, r8, r0, lsl #8
 30c:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
 310:	03193f01 	tsteq	r9, #1, 30
 314:	3b0b3a0e 	blcc	2ceb54 <startup-0x1fd314ac>
 318:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 31c:	16000019 			; <UNDEFINED> instruction: 0x16000019
 320:	08030005 	stmdaeq	r3, {r0, r2}
 324:	0b3b0b3a 	bleq	ec3014 <startup-0x1f13cfec>
 328:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 32c:	05170000 	ldreq	r0, [r7, #-0]
 330:	3a0e0300 	bcc	380f38 <startup-0x1fc7f0c8>
 334:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 338:	00180213 	andseq	r0, r8, r3, lsl r2
 33c:	012e1800 			; <UNDEFINED> instruction: 0x012e1800
 340:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 344:	0b3b0b3a 	bleq	ec3034 <startup-0x1f13cfcc>
 348:	01111927 	tsteq	r1, r7, lsr #18
 34c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 350:	01194297 			; <UNDEFINED> instruction: 0x01194297
 354:	19000013 	stmdbne	r0, {r0, r1, r4}
 358:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 35c:	0b3a0e03 	bleq	e83b70 <startup-0x1f17c490>
 360:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 364:	06120111 			; <UNDEFINED> instruction: 0x06120111
 368:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 36c:	00000019 	andeq	r0, r0, r9, lsl r0

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000008f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
  20:	00000024 	andeq	r0, r0, r4, lsr #32
  24:	05070002 	streq	r0, [r7, #-2]
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	20000904 	andcs	r0, r0, r4, lsl #18
  34:	000002c8 	andeq	r0, r0, r8, asr #5
  38:	20000000 	andcs	r0, r0, r0
  3c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0000021b 	andeq	r0, r0, fp, lsl r2
   4:	00520002 	subseq	r0, r2, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	616b736f 	cmnvs	fp, pc, ror #6
  28:	2f696772 	svccs	0x00696772
  2c:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
  30:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
  34:	6f6d2f73 	svcvs	0x006d2f73
  38:	6f422f70 	svcvs	0x00422f70
  3c:	00736469 	rsbseq	r6, r3, r9, ror #8
  40:	69726400 	ldmdbvs	r2!, {sl, sp, lr}^
  44:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
  48:	0100632e 	tsteq	r0, lr, lsr #6
  4c:	72640000 	rsbvc	r0, r4, #0
  50:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
  54:	00682e73 	rsbeq	r2, r8, r3, ror lr
  58:	00000001 	andeq	r0, r0, r1
  5c:	10020500 	andne	r0, r2, r0, lsl #10
  60:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
  64:	3d2f0131 	stfccs	f0, [pc, #-196]!	; ffffffa8 <ball+0xdfffeba8>
  68:	003d3d3d 	eorseq	r3, sp, sp, lsr sp
  6c:	06010402 	streq	r0, [r1], -r2, lsl #8
  70:	3d670620 	stclcc	6, cr0, [r7, #-128]!	; 0xffffff80
  74:	2f2f2fa0 	svccs	0x002f2fa0
  78:	2f214b3e 	svccs	0x00214b3e
  7c:	372f2f2f 	strcc	r2, [pc, -pc, lsr #30]!
  80:	214f4c43 	cmpcs	pc, r3, asr #24
  84:	4f403a59 	svcmi	0x00403a59
  88:	c9675968 	stmdbgt	r7!, {r3, r5, r6, r8, fp, ip, lr}^
  8c:	5968684b 	stmdbpl	r8!, {r0, r1, r3, r6, fp, sp, lr}^
  90:	764bbb67 	strbvc	fp, [fp], -r7, ror #22
  94:	59774b67 	ldmdbpl	r7!, {r0, r1, r2, r5, r6, r8, r9, fp, lr}^
  98:	684b83bb 	stmdavs	fp, {r0, r1, r3, r4, r5, r7, r8, r9, pc}^
  9c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
  a0:	2f3d313d 	svccs	0x003d313d
  a4:	684b2f3d 	stmdavs	fp, {r0, r2, r3, r4, r5, r8, r9, sl, fp, sp}^
  a8:	bc3d3d23 	ldclt	13, cr3, [sp], #-140	; 0xffffff74
  ac:	3d3d3d67 	ldccc	13, cr3, [sp, #-412]!	; 0xfffffe64
  b0:	3d2f593d 			; <UNDEFINED> instruction: 0x3d2f593d
  b4:	3d3d592f 			; <UNDEFINED> instruction: 0x3d3d592f
  b8:	01040200 	mrseq	r0, R12_usr
  bc:	4b064a06 	blmi	1928dc <startup-0x1fe6d724>
  c0:	ca3d3059 	bgt	f4c22c <startup-0x1f0b3dd4>
  c4:	2f594b91 	svccs	0x00594b91
  c8:	003e2f3d 	eorseq	r2, lr, sp, lsr pc
  cc:	06010402 	streq	r0, [r1], -r2, lsl #8
  d0:	594b064a 	stmdbpl	fp, {r1, r3, r6, r9, sl}^
  d4:	3d3d3d31 	ldccc	13, cr3, [sp, #-196]!	; 0xffffff3c
  d8:	593d9168 	ldmdbpl	sp!, {r3, r5, r6, r8, ip, pc}
  dc:	4c833d3d 	stcmi	13, cr3, [r3], {61}	; 0x3d
  e0:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
  e4:	674c833d 	smlaldxvs	r8, ip, sp, r3
  e8:	2f4c6759 	svccs	0x004c6759
  ec:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
  f0:	4b4b4b3e 	blmi	12d2df0 <startup-0x1ed2d210>
  f4:	3e3d4c4b 	cdpcc	12, 3, cr4, cr13, cr11, {2}
  f8:	4b9f4b3d 	blmi	fe7d2df4 <ball+0xde7d19f4>
  fc:	03040200 	movweq	r0, #16896	; 0x4200
 100:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 104:	02004903 	andeq	r4, r0, #49152	; 0xc000
 108:	58060104 	stmdapl	r6, {r2, r8}
 10c:	02040200 	andeq	r0, r4, #0, 4
 110:	02004706 	andeq	r4, r0, #1572864	; 0x180000
 114:	58060104 	stmdapl	r6, {r2, r8}
 118:	e5515106 	ldrb	r5, [r1, #-262]	; 0xfffffefa
 11c:	01040200 	mrseq	r0, R12_usr
 120:	4c065806 	stcmi	8, cr5, [r6], {6}
 124:	84084b92 	strhi	r4, [r8], #-2962	; 0xfffff46e
 128:	c8087903 	stmdagt	r8, {r0, r1, r8, fp, ip, sp, lr}
 12c:	68200903 	stmdavs	r0!, {r0, r1, r8, fp}
 130:	02004b3d 	andeq	r4, r0, #62464	; 0xf400
 134:	004b0304 	subeq	r0, fp, r4, lsl #6
 138:	8f030402 	svchi	0x00030402
 13c:	01040200 	mrseq	r0, R12_usr
 140:	02005806 	andeq	r5, r0, #393216	; 0x60000
 144:	57060204 	strpl	r0, [r6, -r4, lsl #4]
 148:	01040200 	mrseq	r0, R12_usr
 14c:	4f065806 	svcmi	0x00065806
 150:	004b3d76 	subeq	r3, fp, r6, ror sp
 154:	4b030402 	blmi	c1164 <startup-0x1ff3ee9c>
 158:	03040200 	movweq	r0, #16896	; 0x4200
 15c:	04020091 	streq	r0, [r2], #-145	; 0xffffff6f
 160:	02009f03 	andeq	r9, r0, #3, 30
 164:	00bc0304 	adcseq	r0, ip, r4, lsl #6
 168:	4b030402 	blmi	c1178 <startup-0x1ff3ee88>
 16c:	03040200 	movweq	r0, #16896	; 0x4200
 170:	004a7a03 	subeq	r7, sl, r3, lsl #20
 174:	06010402 	streq	r0, [r1], -r2, lsl #8
 178:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
 17c:	00490602 	subeq	r0, r9, r2, lsl #12
 180:	06010402 	streq	r0, [r1], -r2, lsl #8
 184:	0a030658 	beq	c1aec <startup-0x1ff3e514>
 188:	02004b4a 	andeq	r4, r0, #75776	; 0x12800
 18c:	004b0304 	subeq	r0, fp, r4, lsl #6
 190:	c9030402 	stmdbgt	r3, {r1, sl}
 194:	03040200 	movweq	r0, #16896	; 0x4200
 198:	0402009f 	streq	r0, [r2], #-159	; 0xffffff61
 19c:	0200bc03 	andeq	fp, r0, #768	; 0x300
 1a0:	004b0304 	subeq	r0, fp, r4, lsl #6
 1a4:	03030402 	movweq	r0, #13314	; 0x3402
 1a8:	02004a7a 	andeq	r4, r0, #499712	; 0x7a000
 1ac:	58060104 	stmdapl	r6, {r2, r8}
 1b0:	02040200 	andeq	r0, r4, #0, 4
 1b4:	02005706 	andeq	r5, r0, #1572864	; 0x180000
 1b8:	58060104 	stmdapl	r6, {r2, r8}
 1bc:	4a0a0306 	bmi	280ddc <startup-0x1fd7f224>
 1c0:	303d306a 	eorscc	r3, sp, sl, rrx
 1c4:	76673f3e 	uqasxvc	r3, r7, lr
 1c8:	6a677767 	bvs	19ddf6c <startup-0x1e622094>
 1cc:	082f6967 	stmdaeq	pc!, {r0, r1, r2, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
 1d0:	4b6a3d4d 	blmi	1a8f70c <startup-0x1e5708f4>
 1d4:	4b9f594b 	blmi	fe7d6708 <ball+0xde7d5308>
 1d8:	02004c83 	andeq	r4, r0, #33536	; 0x8300
 1dc:	66060104 	strvs	r0, [r6], -r4, lsl #2
 1e0:	02004b06 	andeq	r4, r0, #6144	; 0x1800
 1e4:	66060104 	strvs	r0, [r6], -r4, lsl #2
 1e8:	02004b06 	andeq	r4, r0, #6144	; 0x1800
 1ec:	66060104 	strvs	r0, [r6], -r4, lsl #2
 1f0:	02004b06 	andeq	r4, r0, #6144	; 0x1800
 1f4:	66060104 	strvs	r0, [r6], -r4, lsl #2
 1f8:	02004c06 	andeq	r4, r0, #1536	; 0x600
 1fc:	75030204 	strvc	r0, [r3, #-516]	; 0xfffffdfc
 200:	040200d6 	streq	r0, [r2], #-214	; 0xffffff2a
 204:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 208:	3d580e03 	ldclcc	14, cr0, [r8, #-12]
 20c:	02003059 	andeq	r3, r0, #89	; 0x59
 210:	a15a0104 	cmpge	sl, r4, lsl #2
 214:	754b4b67 	strbvc	r4, [fp, #-2919]	; 0xfffff499
 218:	0b025976 	bleq	967f8 <startup-0x1ff69808>
 21c:	fe010100 	cdp2	1, 0, cr0, cr1, cr0, {0}
 220:	02000000 	andeq	r0, r0, #0
 224:	00005200 	andeq	r5, r0, r0, lsl #4
 228:	fb010200 	blx	40a32 <startup-0x1ffbf5ce>
 22c:	01000d0e 	tsteq	r0, lr, lsl #26
 230:	00010101 	andeq	r0, r1, r1, lsl #2
 234:	00010000 	andeq	r0, r1, r0
 238:	3a430100 	bcc	10c0640 <startup-0x1ef3f9c0>
 23c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 240:	6f2f7372 	svcvs	0x002f7372
 244:	72616b73 	rsbvc	r6, r1, #117760	; 0x1cc00
 248:	442f6967 	strtmi	r6, [pc], #-2407	; 250 <startup-0x1ffffdb0>
 24c:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 250:	73746e65 	cmnvc	r4, #1616	; 0x650
 254:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 258:	696f422f 	stmdbvs	pc!, {r0, r1, r2, r3, r5, r9, lr}^	; <UNPREDICTABLE>
 25c:	00007364 	andeq	r7, r0, r4, ror #6
 260:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 264:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
 268:	00010063 	andeq	r0, r1, r3, rrx
 26c:	69726400 	ldmdbvs	r2!, {sl, sp, lr}^
 270:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 274:	0100682e 	tsteq	r0, lr, lsr #16
 278:	00000000 	andeq	r0, r0, r0
 27c:	00000205 	andeq	r0, r0, r5, lsl #4
 280:	13162000 	tstne	r6, #0
 284:	212f2121 			; <UNDEFINED> instruction: 0x212f2121
 288:	01000302 	tsteq	r0, r2, lsl #6
 28c:	02050001 	andeq	r0, r5, #1
 290:	20000904 	andcs	r0, r0, r4, lsl #18
 294:	67012503 	strvs	r2, [r1, -r3, lsl #10]
 298:	524c3d3d 	subpl	r3, ip, #3904	; 0xf40
 29c:	59524c59 	ldmdbpl	r2, {r0, r3, r4, r6, sl, fp, lr}^
 2a0:	4b4b594c 	blmi	12d67d8 <startup-0x1ed29828>
 2a4:	9f3d3d67 	svcls	0x003d3d67
 2a8:	0200bb9f 	andeq	fp, r0, #162816	; 0x27c00
 2ac:	2a080204 	bcs	200ac4 <startup-0x1fdff53c>
 2b0:	01040200 	mrseq	r0, R12_usr
 2b4:	02003c06 	andeq	r3, r0, #1536	; 0x600
 2b8:	49060204 	stmdbmi	r6, {r2, r9}
 2bc:	01040200 	mrseq	r0, R12_usr
 2c0:	52063c06 	andpl	r3, r6, #1536	; 0x600
 2c4:	674b4b4c 	strbvs	r4, [fp, -ip, asr #22]
 2c8:	3d4b4b67 	vstrcc	d20, [fp, #-412]	; 0xfffffe64
 2cc:	595a3d3d 	ldmdbpl	sl, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}^
 2d0:	595a3d5a 	ldmdbpl	sl, {r1, r3, r4, r6, r8, sl, fp, ip, sp}^
 2d4:	17034b5a 	smlsdne	r3, sl, fp, r4
 2d8:	352f3d4a 	strcc	r3, [pc, #-3402]!	; fffff596 <ball+0xdfffe196>
 2dc:	3059592f 	subscc	r5, r9, pc, lsr #18
 2e0:	03040200 	movweq	r0, #16896	; 0x4200
 2e4:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 2e8:	02007503 	andeq	r7, r0, #12582912	; 0xc00000
 2ec:	00720304 	rsbseq	r0, r2, r4, lsl #6
 2f0:	06010402 	streq	r0, [r1], -r2, lsl #8
 2f4:	0040063c 	subeq	r0, r0, ip, lsr r6
 2f8:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 2fc:	03040200 	movweq	r0, #16896	; 0x4200
 300:	04020075 	streq	r0, [r2], #-117	; 0xffffff8b
 304:	02007203 	andeq	r7, r0, #805306368	; 0x30000000
 308:	3c060104 	stfccs	f0, [r6], {4}
 30c:	692f4106 	stmdbvs	pc!, {r1, r2, r8, lr}	; <UNPREDICTABLE>
 310:	bb595959 	bllt	165687c <startup-0x1e9a9784>
 314:	76838375 			; <UNDEFINED> instruction: 0x76838375
 318:	3c75032f 	ldclcc	3, cr0, [r5], #-188	; 0xffffff44
 31c:	01000502 	tsteq	r0, r2, lsl #10
 320:	Address 0x00000320 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	65676170 	strbvs	r6, [r7, #-368]!	; 0xfffffe90
   4:	67657300 	strbvs	r7, [r5, -r0, lsl #6]!
   8:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
   c:	61760073 	cmnvs	r6, r3, ror r0
  10:	0065756c 	rsbeq	r7, r5, ip, ror #10
  14:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
  18:	635f7463 	cmpvs	pc, #1660944384	; 0x63000000
  1c:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
  20:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
  24:	6e690072 	mcrvs	0, 3, r0, cr9, cr2, {3}
  28:	6f007469 	svcvs	0x00007469
  2c:	61567475 	cmpvs	r6, r5, ror r4
  30:	7267006c 	rsbvc	r0, r7, #108	; 0x6c
  34:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  38:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
  3c:	645f6461 	ldrbvs	r6, [pc], #-1121	; 44 <startup-0x1fffffbc>
  40:	00617461 	rsbeq	r7, r1, r1, ror #8
  44:	20554e47 	subscs	r4, r5, r7, asr #28
  48:	20393943 	eorscs	r3, r9, r3, asr #18
  4c:	2e322e37 	mrccs	14, 1, r2, cr2, cr7, {1}
  50:	30322031 	eorscc	r2, r2, r1, lsr r0
  54:	39303731 	ldmdbcc	r0!, {r0, r4, r5, r8, r9, sl, ip, sp}
  58:	28203430 	stmdacs	r0!, {r4, r5, sl, ip, sp}
  5c:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
  60:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  64:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
  68:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
  6c:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
  70:	372d6465 	strcc	r6, [sp, -r5, ror #8]!
  74:	6172622d 	cmnvs	r2, sp, lsr #4
  78:	2068636e 	rsbcs	r6, r8, lr, ror #6
  7c:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  80:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  84:	35353220 	ldrcc	r3, [r5, #-544]!	; 0xfffffde0
  88:	5d343032 	ldcpl	0, cr3, [r4, #-200]!	; 0xffffff38
  8c:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  90:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  94:	616d2d20 	cmnvs	sp, r0, lsr #26
  98:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  9c:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  a0:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  a4:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
  a8:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
  ac:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  b0:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
  b4:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  b8:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  bc:	616d2d20 	cmnvs	sp, r0, lsr #26
  c0:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  c4:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  c8:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  cc:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
  d0:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
  d4:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
  d8:	00393963 	eorseq	r3, r9, r3, ror #18
  dc:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  e0:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
  e4:	61686320 	cmnvs	r8, r0, lsr #6
  e8:	65640072 	strbvs	r0, [r4, #-114]!	; 0xffffff8e
  ec:	5f79616c 	svcpl	0x0079616c
  f0:	6e303035 	mrcvs	0, 1, r3, cr0, cr5, {1}
  f4:	61620073 	smcvs	8195	; 0x2003
  f8:	67006573 	smlsdxvs	r0, r3, r5, r6
  fc:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 100:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 104:	5f746961 	svcpl	0x00746961
 108:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 10c:	75620079 	strbvc	r0, [r2, #-121]!	; 0xffffff87
 110:	67007973 	smlsdxvs	r0, r3, r9, r7
 114:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 118:	695f6369 	ldmdbvs	pc, {r0, r3, r5, r6, r8, r9, sp, lr}^	; <UNPREDICTABLE>
 11c:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
 120:	7a696c61 	bvc	1a5b2ac <startup-0x1e5a4d54>
 124:	72670065 	rsbvc	r0, r7, #101	; 0x65
 128:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 12c:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 130:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 134:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
 138:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 13c:	61726700 	cmnvs	r2, r0, lsl #14
 140:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 144:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 148:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 14c:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
 150:	6e750074 	mrcvs	0, 3, r0, cr5, cr4, {3}
 154:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 158:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
 15c:	7500746e 	strvc	r7, [r0, #-1134]	; 0xfffffb92
 160:	38746e69 	ldmdacc	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
 164:	6400745f 	strvs	r7, [r0], #-1119	; 0xfffffba1
 168:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 16c:	6b696d5f 	blvs	1a5b6f0 <startup-0x1e5a4910>
 170:	64006f72 	strvs	r6, [r0], #-3954	; 0xfffff08e
 174:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 178:	3035325f 	eorscc	r3, r5, pc, asr r2
 17c:	4300736e 	movwmi	r7, #878	; 0x36e
 180:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 184:	2f737265 	svccs	0x00737265
 188:	616b736f 	cmnvs	fp, pc, ror #6
 18c:	2f696772 	svccs	0x00696772
 190:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 194:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 198:	6f6d2f73 	svcvs	0x006d2f73
 19c:	6f422f70 	svcvs	0x00422f70
 1a0:	2f736469 	svccs	0x00736469
 1a4:	76697264 	strbtvc	r7, [r9], -r4, ror #4
 1a8:	2e737265 	cdpcs	2, 7, cr7, cr3, cr5, {3}
 1ac:	3a430063 	bcc	10c0340 <startup-0x1ef3fcc0>
 1b0:	6573555c 	ldrbvs	r5, [r3, #-1372]!	; 0xfffffaa4
 1b4:	6f5c7372 	svcvs	0x005c7372
 1b8:	72616b73 	rsbvc	r6, r1, #117760	; 0x1cc00
 1bc:	445c6967 	ldrbmi	r6, [ip], #-2407	; 0xfffff699
 1c0:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 1c4:	73746e65 	cmnvc	r4, #1616	; 0x650
 1c8:	706f6d5c 	rsbvc	r6, pc, ip, asr sp	; <UNPREDICTABLE>
 1cc:	696f425c 	stmdbvs	pc!, {r2, r3, r4, r6, r9, lr}^	; <UNPREDICTABLE>
 1d0:	69007364 	stmdbvs	r0, {r2, r5, r6, r8, r9, ip, sp, lr}
 1d4:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
 1d8:	78697000 	stmdavc	r9!, {ip, sp, lr}^
 1dc:	6d006c65 	stcvs	12, cr6, [r0, #-404]	; 0xfffffe6c
 1e0:	006b7361 	rsbeq	r7, fp, r1, ror #6
 1e4:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 1e8:	65640078 	strbvs	r0, [r4, #-120]!	; 0xffffff88
 1ec:	5f79616c 	svcpl	0x0079616c
 1f0:	6c6c696d 			; <UNDEFINED> instruction: 0x6c6c696d
 1f4:	72670069 	rsbvc	r0, r7, #105	; 0x69
 1f8:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 1fc:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 200:	5f657469 	svcpl	0x00657469
 204:	61746164 	cmnvs	r4, r4, ror #2
 208:	74756f00 	ldrbtvc	r6, [r5], #-3840	; 0xfffff100
 20c:	67657337 			; <UNDEFINED> instruction: 0x67657337
 210:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 214:	72670062 	rsbvc	r0, r7, #98	; 0x62
 218:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 21c:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 220:	00657469 	rsbeq	r7, r5, r9, ror #8
 224:	70617267 	rsbvc	r7, r1, r7, ror #4
 228:	5f636968 	svcpl	0x00636968
 22c:	61656c63 	cmnvs	r5, r3, ror #24
 230:	63735f72 	cmnvs	r3, #456	; 0x1c8
 234:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 238:	61726400 	cmnvs	r2, r0, lsl #8
 23c:	75625f77 	strbvc	r5, [r2, #-3959]!	; 0xfffff089
 240:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 244:	61726700 	cmnvs	r2, r0, lsl #14
 248:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 24c:	6165725f 	cmnvs	r5, pc, asr r2
 250:	656b0064 	strbvs	r0, [fp, #-100]!	; 0xffffff9c
 254:	63007379 	movwvs	r7, #889	; 0x379
 258:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 25c:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
 260:	00726566 	rsbseq	r6, r2, r6, ror #10
 264:	70617267 	rsbvc	r7, r1, r7, ror #4
 268:	5f636968 	svcpl	0x00636968
 26c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 270:	6f635f65 	svcvs	0x00635f65
 274:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
 278:	47500064 	ldrbmi	r0, [r0, -r4, rrx]
 27c:	454d4f45 	strbmi	r4, [sp, #-3909]	; 0xfffff0bb
 280:	00595254 	subseq	r5, r9, r4, asr r2
 284:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
 288:	69617000 	stmdbvs	r1!, {ip, sp, lr}^
 28c:	6400746e 	strvs	r7, [r0], #-1134	; 0xfffffb92
 290:	00787269 	rsbseq	r7, r8, r9, ror #4
 294:	79726964 	ldmdbvc	r2!, {r2, r5, r6, r8, fp, sp, lr}^
 298:	6f507400 	svcvs	0x00507400
 29c:	00746e69 	rsbseq	r6, r4, r9, ror #28
 2a0:	4e494f50 	mcrmi	15, 2, r4, cr9, cr0, {2}
 2a4:	3a430054 	bcc	10c03fc <startup-0x1ef3fc04>
 2a8:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 2ac:	6f2f7372 	svcvs	0x002f7372
 2b0:	72616b73 	rsbvc	r6, r1, #117760	; 0x1cc00
 2b4:	442f6967 	strtmi	r6, [pc], #-2407	; 2bc <startup-0x1ffffd44>
 2b8:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 2bc:	73746e65 	cmnvc	r4, #1616	; 0x650
 2c0:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 2c4:	696f422f 	stmdbvs	pc!, {r0, r1, r2, r3, r5, r9, lr}^	; <UNPREDICTABLE>
 2c8:	732f7364 			; <UNDEFINED> instruction: 0x732f7364
 2cc:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 2d0:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
 2d4:	736f7000 	cmnvc	pc, #0
 2d8:	6f700078 	svcvs	0x00700078
 2dc:	62007973 	andvs	r7, r0, #1884160	; 0x1cc000
 2e0:	5f6c6c61 	svcpl	0x006c6c61
 2e4:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; 150 <startup-0x1ffffeb0>
 2e8:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 2ec:	69656800 	stmdbvs	r5!, {fp, sp, lr}^
 2f0:	00746867 	rsbseq	r6, r4, r7, ror #16
 2f4:	74646977 	strbtvc	r6, [r4], #-2423	; 0xfffff689
 2f8:	616d0068 	cmnvs	sp, r8, rrx
 2fc:	63006e69 	movwvs	r6, #3689	; 0xe69
 300:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
 304:	77656e00 	strbvc	r6, [r5, -r0, lsl #28]!
 308:	656e0078 	strbvs	r0, [lr, #-120]!	; 0xffffff88
 30c:	74007977 	strvc	r7, [r0], #-2423	; 0xfffff689
 310:	6d6f6547 	cfstr64vs	mvdx6, [pc, #-284]!	; 1fc <startup-0x1ffffe04>
 314:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 318:	61747300 	cmnvs	r4, r0, lsl #6
 31c:	70757472 	rsbsvc	r7, r5, r2, ror r4
 320:	7a697300 	bvc	1a5cf28 <startup-0x1e5a30d8>
 324:	73007865 	movwvc	r7, #2149	; 0x865
 328:	79657a69 	stmdbvc	r5!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
 32c:	6c616200 	sfmvs	f6, 2, [r1], #-0
 330:	7264006c 	rsbvc	r0, r4, #108	; 0x6c
 334:	73007761 	movwvc	r7, #1889	; 0x761
 338:	6f5f7465 	svcvs	0x005f7465
 33c:	63656a62 	cmnvs	r5, #401408	; 0x62000
 340:	70735f74 	rsbsvc	r5, r3, r4, ror pc
 344:	00646565 	rsbeq	r6, r4, r5, ror #10
 348:	5f746573 	svcpl	0x00746573
 34c:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 350:	6c630064 	stclvs	0, cr0, [r3], #-400	; 0xfffffe70
 354:	5f726165 	svcpl	0x00726165
 358:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 35c:	74007463 	strvc	r7, [r0], #-1123	; 0xfffffb9d
 360:	006a624f 	rsbeq	r6, sl, pc, asr #4
 364:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 368:	6a626f5f 	bvs	189c0ec <startup-0x1e763f14>
 36c:	00746365 	rsbseq	r6, r4, r5, ror #6
 370:	706d756e 	rsbvc	r7, sp, lr, ror #10
 374:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 378:	6f6d0073 	svcvs	0x006d0073
 37c:	6f5f6576 	svcvs	0x005f6576
 380:	63656a62 	cmnvs	r5, #401408	; 0x62000
 384:	70730074 	rsbsvc	r0, r3, r4, ror r0
 388:	78646565 	stmdavc	r4!, {r0, r2, r5, r6, r8, sl, sp, lr}^
 38c:	65707300 	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
 390:	00796465 	rsbseq	r6, r9, r5, ror #8
 394:	4a424f50 	bmi	10940dc <startup-0x1ef6bf24>
 398:	00544345 	subseq	r4, r4, r5, asr #6

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <ball+0xdfffdf0e>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000018 	andeq	r0, r0, r8, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000044 	andeq	r0, r0, r4, asr #32
  20:	40080e41 	andmi	r0, r8, r1, asr #28
  24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  28:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  2c:	00000018 	andeq	r0, r0, r8, lsl r0
  30:	00000000 	andeq	r0, r0, r0
  34:	20000054 	andcs	r0, r0, r4, asr r0
  38:	00000012 	andeq	r0, r0, r2, lsl r0
  3c:	40080e41 	andmi	r0, r8, r1, asr #28
  40:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  44:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	20000066 	andcs	r0, r0, r6, rrx
  54:	0000002e 	andeq	r0, r0, lr, lsr #32
  58:	40080e41 	andmi	r0, r8, r1, asr #28
  5c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  60:	100e4101 	andne	r4, lr, r1, lsl #2
  64:	00070d41 	andeq	r0, r7, r1, asr #26
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	20000094 	mulcs	r0, r4, r0
  74:	00000028 	andeq	r0, r0, r8, lsr #32
  78:	40080e41 	andmi	r0, r8, r1, asr #28
  7c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  80:	100e4101 	andne	r4, lr, r1, lsl #2
  84:	00070d41 	andeq	r0, r7, r1, asr #26
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	200000bc 	strhcs	r0, [r0], -ip
  94:	00000050 	andeq	r0, r0, r0, asr r0
  98:	40080e41 	andmi	r0, r8, r1, asr #28
  9c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a0:	180e4101 	stmdane	lr, {r0, r8, lr}
  a4:	00070d41 	andeq	r0, r7, r1, asr #26
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	2000010c 	andcs	r0, r0, ip, lsl #2
  b4:	00000050 	andeq	r0, r0, r0, asr r0
  b8:	40080e41 	andmi	r0, r8, r1, asr #28
  bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c0:	180e4101 	stmdane	lr, {r0, r8, lr}
  c4:	00070d41 	andeq	r0, r7, r1, asr #26
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	2000015c 	andcs	r0, r0, ip, asr r1
  d4:	00000068 	andeq	r0, r0, r8, rrx
  d8:	40080e41 	andmi	r0, r8, r1, asr #28
  dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  e0:	180e4101 	stmdane	lr, {r0, r8, lr}
  e4:	00070d41 	andeq	r0, r7, r1, asr #26
  e8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	200001c4 	andcs	r0, r0, r4, asr #3
  f4:	00000070 	andeq	r0, r0, r0, ror r0
  f8:	40080e41 	andmi	r0, r8, r1, asr #28
  fc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 100:	100e4101 	andne	r4, lr, r1, lsl #2
 104:	00070d41 	andeq	r0, r7, r1, asr #26
 108:	0000001c 	andeq	r0, r0, ip, lsl r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	20000234 	andcs	r0, r0, r4, lsr r2
 114:	00000090 	muleq	r0, r0, r0
 118:	40080e41 	andmi	r0, r8, r1, asr #28
 11c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 120:	180e4101 	stmdane	lr, {r0, r8, lr}
 124:	00070d41 	andeq	r0, r7, r1, asr #26
 128:	0000001c 	andeq	r0, r0, ip, lsl r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	200002c4 	andcs	r0, r0, r4, asr #5
 134:	00000074 	andeq	r0, r0, r4, ror r0
 138:	40080e41 	andmi	r0, r8, r1, asr #28
 13c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 140:	100e4101 	andne	r4, lr, r1, lsl #2
 144:	00070d41 	andeq	r0, r7, r1, asr #26
 148:	0000001c 	andeq	r0, r0, ip, lsl r0
 14c:	00000000 	andeq	r0, r0, r0
 150:	20000338 	andcs	r0, r0, r8, lsr r3
 154:	00000046 	andeq	r0, r0, r6, asr #32
 158:	40080e41 	andmi	r0, r8, r1, asr #28
 15c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 160:	100e4101 	andne	r4, lr, r1, lsl #2
 164:	00070d41 	andeq	r0, r7, r1, asr #26
 168:	0000001c 	andeq	r0, r0, ip, lsl r0
 16c:	00000000 	andeq	r0, r0, r0
 170:	2000037e 	andcs	r0, r0, lr, ror r3
 174:	00000046 	andeq	r0, r0, r6, asr #32
 178:	40080e41 	andmi	r0, r8, r1, asr #28
 17c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 180:	100e4101 	andne	r4, lr, r1, lsl #2
 184:	00070d41 	andeq	r0, r7, r1, asr #26
 188:	0000001c 	andeq	r0, r0, ip, lsl r0
 18c:	00000000 	andeq	r0, r0, r0
 190:	200003c4 	andcs	r0, r0, r4, asr #7
 194:	0000002a 	andeq	r0, r0, sl, lsr #32
 198:	40080e41 	andmi	r0, r8, r1, asr #28
 19c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1a0:	100e4101 	andne	r4, lr, r1, lsl #2
 1a4:	00070d41 	andeq	r0, r7, r1, asr #26
 1a8:	00000018 	andeq	r0, r0, r8, lsl r0
 1ac:	00000000 	andeq	r0, r0, r0
 1b0:	200003ee 	andcs	r0, r0, lr, ror #7
 1b4:	00000056 	andeq	r0, r0, r6, asr r0
 1b8:	40080e41 	andmi	r0, r8, r1, asr #28
 1bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1c0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c8:	00000000 	andeq	r0, r0, r0
 1cc:	20000444 	andcs	r0, r0, r4, asr #8
 1d0:	00000066 	andeq	r0, r0, r6, rrx
 1d4:	40080e41 	andmi	r0, r8, r1, asr #28
 1d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1dc:	100e4101 	andne	r4, lr, r1, lsl #2
 1e0:	00070d41 	andeq	r0, r7, r1, asr #26
 1e4:	00000020 	andeq	r0, r0, r0, lsr #32
 1e8:	00000000 	andeq	r0, r0, r0
 1ec:	200004aa 	andcs	r0, r0, sl, lsr #9
 1f0:	000000c6 	andeq	r0, r0, r6, asr #1
 1f4:	400c0e41 	andmi	r0, ip, r1, asr #28
 1f8:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 1fc:	018e4002 	orreq	r4, lr, r2
 200:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 204:	0000070d 	andeq	r0, r0, sp, lsl #14
 208:	0000001c 	andeq	r0, r0, ip, lsl r0
 20c:	00000000 	andeq	r0, r0, r0
 210:	20000570 	andcs	r0, r0, r0, ror r5
 214:	0000005c 	andeq	r0, r0, ip, asr r0
 218:	40080e41 	andmi	r0, r8, r1, asr #28
 21c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 220:	100e4101 	andne	r4, lr, r1, lsl #2
 224:	00070d41 	andeq	r0, r7, r1, asr #26
 228:	0000001c 	andeq	r0, r0, ip, lsl r0
 22c:	00000000 	andeq	r0, r0, r0
 230:	200005cc 	andcs	r0, r0, ip, asr #11
 234:	00000120 	andeq	r0, r0, r0, lsr #2
 238:	40080e41 	andmi	r0, r8, r1, asr #28
 23c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 240:	100e4101 	andne	r4, lr, r1, lsl #2
 244:	00070d41 	andeq	r0, r7, r1, asr #26
 248:	00000018 	andeq	r0, r0, r8, lsl r0
 24c:	00000000 	andeq	r0, r0, r0
 250:	200006ec 	andcs	r0, r0, ip, ror #13
 254:	000000ac 	andeq	r0, r0, ip, lsr #1
 258:	40080e41 	andmi	r0, r8, r1, asr #28
 25c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 260:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 264:	00000020 	andeq	r0, r0, r0, lsr #32
 268:	00000000 	andeq	r0, r0, r0
 26c:	20000798 	mulcs	r0, r8, r7
 270:	00000114 	andeq	r0, r0, r4, lsl r1
 274:	400c0e41 	andmi	r0, ip, r1, asr #28
 278:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 27c:	018e4002 	orreq	r4, lr, r2
 280:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
 284:	0000070d 	andeq	r0, r0, sp, lsl #14
 288:	00000024 	andeq	r0, r0, r4, lsr #32
 28c:	00000000 	andeq	r0, r0, r0
 290:	200008ac 	andcs	r0, r0, ip, lsr #17
 294:	00000054 	andeq	r0, r0, r4, asr r0
 298:	40100e41 	andsmi	r0, r0, r1, asr #28
 29c:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 2a0:	02874003 	addeq	r4, r7, #3
 2a4:	41018e40 	tstmi	r1, r0, asr #28
 2a8:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
 2ac:	00000007 	andeq	r0, r0, r7
 2b0:	0000000c 	andeq	r0, r0, ip
 2b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2b8:	7c020001 	stcvc	0, cr0, [r2], {1}
 2bc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2c0:	0000000c 	andeq	r0, r0, ip
 2c4:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 2c8:	20000000 	andcs	r0, r0, r0
 2cc:	0000000c 	andeq	r0, r0, ip
 2d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2d4:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 2d8:	20000904 	andcs	r0, r0, r4, lsl #18
 2dc:	00000020 	andeq	r0, r0, r0, lsr #32
 2e0:	40080e41 	andmi	r0, r8, r1, asr #28
 2e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2e8:	180e4101 	stmdane	lr, {r0, r8, lr}
 2ec:	00070d41 	andeq	r0, r7, r1, asr #26
 2f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2f4:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 2f8:	20000924 	andcs	r0, r0, r4, lsr #18
 2fc:	0000001a 	andeq	r0, r0, sl, lsl r0
 300:	40080e41 	andmi	r0, r8, r1, asr #28
 304:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 308:	100e4101 	andne	r4, lr, r1, lsl #2
 30c:	00070d41 	andeq	r0, r7, r1, asr #26
 310:	0000001c 	andeq	r0, r0, ip, lsl r0
 314:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 318:	2000093e 	andcs	r0, r0, lr, lsr r9
 31c:	0000001a 	andeq	r0, r0, sl, lsl r0
 320:	40080e41 	andmi	r0, r8, r1, asr #28
 324:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 328:	100e4101 	andne	r4, lr, r1, lsl #2
 32c:	00070d41 	andeq	r0, r7, r1, asr #26
 330:	0000001c 	andeq	r0, r0, ip, lsl r0
 334:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 338:	20000958 	andcs	r0, r0, r8, asr r9
 33c:	000000bc 	strheq	r0, [r0], -ip
 340:	40080e41 	andmi	r0, r8, r1, asr #28
 344:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 348:	300e4101 	andcc	r4, lr, r1, lsl #2
 34c:	00070d41 	andeq	r0, r7, r1, asr #26
 350:	0000001c 	andeq	r0, r0, ip, lsl r0
 354:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 358:	20000a14 	andcs	r0, r0, r4, lsl sl
 35c:	0000009c 	muleq	r0, ip, r0
 360:	40080e41 	andmi	r0, r8, r1, asr #28
 364:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 368:	200e4101 	andcs	r4, lr, r1, lsl #2
 36c:	00070d41 	andeq	r0, r7, r1, asr #26
 370:	0000001c 	andeq	r0, r0, ip, lsl r0
 374:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 378:	20000ab0 			; <UNDEFINED> instruction: 0x20000ab0
 37c:	0000011c 	andeq	r0, r0, ip, lsl r1
 380:	40080e41 	andmi	r0, r8, r1, asr #28
 384:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 388:	200e4101 	andcs	r4, lr, r1, lsl #2
 38c:	00070d41 	andeq	r0, r7, r1, asr #26

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000904 	andcs	r0, r0, r4, lsl #18
   4:	20000bcc 	andcs	r0, r0, ip, asr #23
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
