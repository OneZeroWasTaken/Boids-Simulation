
./Debug/Boids.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#include "drivers.h"

__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 f8d9 	bl	200001ba <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <set_object_speed>:
    void (* clear) (struct tObj *);
    void (* move) (struct tObj *);
    void (* set_speed) (struct tObj *, int, int);
} OBJECT, *POBJECT;

void set_object_speed(POBJECT o, int speedx, int speedy) {
20000010:	b580      	push	{r7, lr}
20000012:	b084      	sub	sp, #16
20000014:	af00      	add	r7, sp, #0
20000016:	60f8      	str	r0, [r7, #12]
20000018:	60b9      	str	r1, [r7, #8]
2000001a:	607a      	str	r2, [r7, #4]
    o->dirx = speedx;
2000001c:	68fb      	ldr	r3, [r7, #12]
2000001e:	68ba      	ldr	r2, [r7, #8]
20000020:	605a      	str	r2, [r3, #4]
    o->diry = speedy;
20000022:	68fb      	ldr	r3, [r7, #12]
20000024:	687a      	ldr	r2, [r7, #4]
20000026:	609a      	str	r2, [r3, #8]
}
20000028:	46c0      	nop			; (mov r8, r8)
2000002a:	46bd      	mov	sp, r7
2000002c:	b004      	add	sp, #16
2000002e:	bd80      	pop	{r7, pc}

20000030 <draw_object>:

void draw_object(POBJECT o) {
20000030:	b580      	push	{r7, lr}
20000032:	b082      	sub	sp, #8
20000034:	af00      	add	r7, sp, #0
20000036:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < numpoints; i++) {
        POINT p = o->geo->px[i];
        pixel(o->posx + p.x, o->posy + p.y, 1);
    }
	*/
	 paint(o, 1);
20000038:	687b      	ldr	r3, [r7, #4]
2000003a:	2101      	movs	r1, #1
2000003c:	0018      	movs	r0, r3
2000003e:	f000 f811 	bl	20000064 <paint>
}
20000042:	46c0      	nop			; (mov r8, r8)
20000044:	46bd      	mov	sp, r7
20000046:	b002      	add	sp, #8
20000048:	bd80      	pop	{r7, pc}

2000004a <clear_object>:

void clear_object(POBJECT o) {
2000004a:	b580      	push	{r7, lr}
2000004c:	b082      	sub	sp, #8
2000004e:	af00      	add	r7, sp, #0
20000050:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < numpoints; i++) {
        POINT p = o->geo->px[i];
        pixel(o->posx + p.x, o->posy + p.y, 0);
    }
	 * */
	 paint(o, 0);
20000052:	687b      	ldr	r3, [r7, #4]
20000054:	2100      	movs	r1, #0
20000056:	0018      	movs	r0, r3
20000058:	f000 f804 	bl	20000064 <paint>
}
2000005c:	46c0      	nop			; (mov r8, r8)
2000005e:	46bd      	mov	sp, r7
20000060:	b002      	add	sp, #8
20000062:	bd80      	pop	{r7, pc}

20000064 <paint>:

void paint(POBJECT o, int color) {
20000064:	b580      	push	{r7, lr}
20000066:	b08a      	sub	sp, #40	; 0x28
20000068:	af00      	add	r7, sp, #0
2000006a:	6078      	str	r0, [r7, #4]
2000006c:	6039      	str	r1, [r7, #0]
    int width = o->geo->sizex;
2000006e:	687b      	ldr	r3, [r7, #4]
20000070:	681b      	ldr	r3, [r3, #0]
20000072:	685b      	ldr	r3, [r3, #4]
20000074:	61fb      	str	r3, [r7, #28]
    int height = o->geo->sizey;
20000076:	687b      	ldr	r3, [r7, #4]
20000078:	681b      	ldr	r3, [r3, #0]
2000007a:	689b      	ldr	r3, [r3, #8]
2000007c:	61bb      	str	r3, [r7, #24]
	int r = width/2;
2000007e:	69fb      	ldr	r3, [r7, #28]
20000080:	2b00      	cmp	r3, #0
20000082:	da00      	bge.n	20000086 <paint+0x22>
20000084:	3301      	adds	r3, #1
20000086:	105b      	asrs	r3, r3, #1
20000088:	617b      	str	r3, [r7, #20]
	for (int y=0; y<height; y++) {
2000008a:	2300      	movs	r3, #0
2000008c:	627b      	str	r3, [r7, #36]	; 0x24
2000008e:	e03d      	b.n	2000010c <paint+0xa8>
		for (int x=0; x<width; x++) {
20000090:	2300      	movs	r3, #0
20000092:	623b      	str	r3, [r7, #32]
20000094:	e033      	b.n	200000fe <paint+0x9a>
			int xr = x-width/2;
20000096:	69fb      	ldr	r3, [r7, #28]
20000098:	2b00      	cmp	r3, #0
2000009a:	da00      	bge.n	2000009e <paint+0x3a>
2000009c:	3301      	adds	r3, #1
2000009e:	105b      	asrs	r3, r3, #1
200000a0:	425b      	negs	r3, r3
200000a2:	001a      	movs	r2, r3
200000a4:	6a3b      	ldr	r3, [r7, #32]
200000a6:	189b      	adds	r3, r3, r2
200000a8:	613b      	str	r3, [r7, #16]
			int yr = y-height/2;
200000aa:	69bb      	ldr	r3, [r7, #24]
200000ac:	2b00      	cmp	r3, #0
200000ae:	da00      	bge.n	200000b2 <paint+0x4e>
200000b0:	3301      	adds	r3, #1
200000b2:	105b      	asrs	r3, r3, #1
200000b4:	425b      	negs	r3, r3
200000b6:	001a      	movs	r2, r3
200000b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200000ba:	189b      	adds	r3, r3, r2
200000bc:	60fb      	str	r3, [r7, #12]
			if (xr*xr+yr*yr < r*r)
200000be:	693b      	ldr	r3, [r7, #16]
200000c0:	435b      	muls	r3, r3
200000c2:	001a      	movs	r2, r3
200000c4:	68fb      	ldr	r3, [r7, #12]
200000c6:	435b      	muls	r3, r3
200000c8:	18d2      	adds	r2, r2, r3
200000ca:	697b      	ldr	r3, [r7, #20]
200000cc:	435b      	muls	r3, r3
200000ce:	429a      	cmp	r2, r3
200000d0:	da12      	bge.n	200000f8 <paint+0x94>
				pixel(o->posx + x, o->posy + y, color);
200000d2:	687b      	ldr	r3, [r7, #4]
200000d4:	68db      	ldr	r3, [r3, #12]
200000d6:	b2da      	uxtb	r2, r3
200000d8:	6a3b      	ldr	r3, [r7, #32]
200000da:	b2db      	uxtb	r3, r3
200000dc:	18d3      	adds	r3, r2, r3
200000de:	b2d8      	uxtb	r0, r3
200000e0:	687b      	ldr	r3, [r7, #4]
200000e2:	691b      	ldr	r3, [r3, #16]
200000e4:	b2da      	uxtb	r2, r3
200000e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200000e8:	b2db      	uxtb	r3, r3
200000ea:	18d3      	adds	r3, r2, r3
200000ec:	b2db      	uxtb	r3, r3
200000ee:	683a      	ldr	r2, [r7, #0]
200000f0:	b2d2      	uxtb	r2, r2
200000f2:	0019      	movs	r1, r3
200000f4:	f000 fb4a 	bl	2000078c <pixel>
		for (int x=0; x<width; x++) {
200000f8:	6a3b      	ldr	r3, [r7, #32]
200000fa:	3301      	adds	r3, #1
200000fc:	623b      	str	r3, [r7, #32]
200000fe:	6a3a      	ldr	r2, [r7, #32]
20000100:	69fb      	ldr	r3, [r7, #28]
20000102:	429a      	cmp	r2, r3
20000104:	dbc7      	blt.n	20000096 <paint+0x32>
	for (int y=0; y<height; y++) {
20000106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000108:	3301      	adds	r3, #1
2000010a:	627b      	str	r3, [r7, #36]	; 0x24
2000010c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000010e:	69bb      	ldr	r3, [r7, #24]
20000110:	429a      	cmp	r2, r3
20000112:	dbbd      	blt.n	20000090 <paint+0x2c>
		}
	}
}
20000114:	46c0      	nop			; (mov r8, r8)
20000116:	46c0      	nop			; (mov r8, r8)
20000118:	46bd      	mov	sp, r7
2000011a:	b00a      	add	sp, #40	; 0x28
2000011c:	bd80      	pop	{r7, pc}

2000011e <move_object>:

void move_object(POBJECT o) {
2000011e:	b580      	push	{r7, lr}
20000120:	b086      	sub	sp, #24
20000122:	af00      	add	r7, sp, #0
20000124:	6078      	str	r0, [r7, #4]
    clear_object(o);
20000126:	687b      	ldr	r3, [r7, #4]
20000128:	0018      	movs	r0, r3
2000012a:	f7ff ff8e 	bl	2000004a <clear_object>
    int newx = o->posx + o->dirx;
2000012e:	687b      	ldr	r3, [r7, #4]
20000130:	68da      	ldr	r2, [r3, #12]
20000132:	687b      	ldr	r3, [r7, #4]
20000134:	685b      	ldr	r3, [r3, #4]
20000136:	18d3      	adds	r3, r2, r3
20000138:	617b      	str	r3, [r7, #20]
    int newy = o->posy + o->diry;
2000013a:	687b      	ldr	r3, [r7, #4]
2000013c:	691a      	ldr	r2, [r3, #16]
2000013e:	687b      	ldr	r3, [r7, #4]
20000140:	689b      	ldr	r3, [r3, #8]
20000142:	18d3      	adds	r3, r2, r3
20000144:	613b      	str	r3, [r7, #16]
    int width = o->geo->sizex;
20000146:	687b      	ldr	r3, [r7, #4]
20000148:	681b      	ldr	r3, [r3, #0]
2000014a:	685b      	ldr	r3, [r3, #4]
2000014c:	60fb      	str	r3, [r7, #12]
    int height = o->geo->sizey;
2000014e:	687b      	ldr	r3, [r7, #4]
20000150:	681b      	ldr	r3, [r3, #0]
20000152:	689b      	ldr	r3, [r3, #8]
20000154:	60bb      	str	r3, [r7, #8]
    o->posx = newx;
20000156:	687b      	ldr	r3, [r7, #4]
20000158:	697a      	ldr	r2, [r7, #20]
2000015a:	60da      	str	r2, [r3, #12]
    o->posy = newy;
2000015c:	687b      	ldr	r3, [r7, #4]
2000015e:	693a      	ldr	r2, [r7, #16]
20000160:	611a      	str	r2, [r3, #16]
    if (newx < 1) {
20000162:	697b      	ldr	r3, [r7, #20]
20000164:	2b00      	cmp	r3, #0
20000166:	dc04      	bgt.n	20000172 <move_object+0x54>
        o->dirx *= -1;
20000168:	687b      	ldr	r3, [r7, #4]
2000016a:	685b      	ldr	r3, [r3, #4]
2000016c:	425a      	negs	r2, r3
2000016e:	687b      	ldr	r3, [r7, #4]
20000170:	605a      	str	r2, [r3, #4]
    }
    if (newx + width > 128) {
20000172:	697a      	ldr	r2, [r7, #20]
20000174:	68fb      	ldr	r3, [r7, #12]
20000176:	18d3      	adds	r3, r2, r3
20000178:	2b80      	cmp	r3, #128	; 0x80
2000017a:	dd04      	ble.n	20000186 <move_object+0x68>
        o->dirx *= -1;
2000017c:	687b      	ldr	r3, [r7, #4]
2000017e:	685b      	ldr	r3, [r3, #4]
20000180:	425a      	negs	r2, r3
20000182:	687b      	ldr	r3, [r7, #4]
20000184:	605a      	str	r2, [r3, #4]
    }
    if (newy < 1) {
20000186:	693b      	ldr	r3, [r7, #16]
20000188:	2b00      	cmp	r3, #0
2000018a:	dc04      	bgt.n	20000196 <move_object+0x78>
        o->diry *= -1;
2000018c:	687b      	ldr	r3, [r7, #4]
2000018e:	689b      	ldr	r3, [r3, #8]
20000190:	425a      	negs	r2, r3
20000192:	687b      	ldr	r3, [r7, #4]
20000194:	609a      	str	r2, [r3, #8]
    }
    if (newy + height > 64) {
20000196:	693a      	ldr	r2, [r7, #16]
20000198:	68bb      	ldr	r3, [r7, #8]
2000019a:	18d3      	adds	r3, r2, r3
2000019c:	2b40      	cmp	r3, #64	; 0x40
2000019e:	dd04      	ble.n	200001aa <move_object+0x8c>
        o->diry *= -1;
200001a0:	687b      	ldr	r3, [r7, #4]
200001a2:	689b      	ldr	r3, [r3, #8]
200001a4:	425a      	negs	r2, r3
200001a6:	687b      	ldr	r3, [r7, #4]
200001a8:	609a      	str	r2, [r3, #8]
    }
    draw_object(o);
200001aa:	687b      	ldr	r3, [r7, #4]
200001ac:	0018      	movs	r0, r3
200001ae:	f7ff ff3f 	bl	20000030 <draw_object>
}
200001b2:	46c0      	nop			; (mov r8, r8)
200001b4:	46bd      	mov	sp, r7
200001b6:	b006      	add	sp, #24
200001b8:	bd80      	pop	{r7, pc}

200001ba <main>:
	int xvel, yvel;
} BOID, *pBOID;



void main(void) {
200001ba:	b590      	push	{r4, r7, lr}
200001bc:	b087      	sub	sp, #28
200001be:	af00      	add	r7, sp, #0
    POBJECT p = &ball;
200001c0:	4b43      	ldr	r3, [pc, #268]	; (200002d0 <main+0x116>)
200001c2:	60fb      	str	r3, [r7, #12]
	init();
200001c4:	f000 fc04 	bl	200009d0 <init>
	
	clear_buffer();
200001c8:	f000 fb42 	bl	20000850 <clear_buffer>
	pixel(0, 1, 1);
200001cc:	2201      	movs	r2, #1
200001ce:	2101      	movs	r1, #1
200001d0:	2000      	movs	r0, #0
200001d2:	f000 fadb 	bl	2000078c <pixel>
	uint8_t data = buffer[0][0];
200001d6:	230b      	movs	r3, #11
200001d8:	18fb      	adds	r3, r7, r3
200001da:	4a3e      	ldr	r2, [pc, #248]	; (200002d4 <main+0x11a>)
200001dc:	7812      	ldrb	r2, [r2, #0]
200001de:	701a      	strb	r2, [r3, #0]
	//draw_buffer();

    for (int i = 0; i < 128; i++) {
200001e0:	2300      	movs	r3, #0
200001e2:	617b      	str	r3, [r7, #20]
200001e4:	e010      	b.n	20000208 <main+0x4e>
        pixel(i, 0, 1);
200001e6:	697b      	ldr	r3, [r7, #20]
200001e8:	b2db      	uxtb	r3, r3
200001ea:	2201      	movs	r2, #1
200001ec:	2100      	movs	r1, #0
200001ee:	0018      	movs	r0, r3
200001f0:	f000 facc 	bl	2000078c <pixel>
        pixel(i, 63, 1);
200001f4:	697b      	ldr	r3, [r7, #20]
200001f6:	b2db      	uxtb	r3, r3
200001f8:	2201      	movs	r2, #1
200001fa:	213f      	movs	r1, #63	; 0x3f
200001fc:	0018      	movs	r0, r3
200001fe:	f000 fac5 	bl	2000078c <pixel>
    for (int i = 0; i < 128; i++) {
20000202:	697b      	ldr	r3, [r7, #20]
20000204:	3301      	adds	r3, #1
20000206:	617b      	str	r3, [r7, #20]
20000208:	697b      	ldr	r3, [r7, #20]
2000020a:	2b7f      	cmp	r3, #127	; 0x7f
2000020c:	ddeb      	ble.n	200001e6 <main+0x2c>
    }
    for (int i = 0; i < 64; i++) {
2000020e:	2300      	movs	r3, #0
20000210:	613b      	str	r3, [r7, #16]
20000212:	e010      	b.n	20000236 <main+0x7c>
        pixel(0, i, 1);
20000214:	693b      	ldr	r3, [r7, #16]
20000216:	b2db      	uxtb	r3, r3
20000218:	2201      	movs	r2, #1
2000021a:	0019      	movs	r1, r3
2000021c:	2000      	movs	r0, #0
2000021e:	f000 fab5 	bl	2000078c <pixel>
        pixel(127, i, 1);
20000222:	693b      	ldr	r3, [r7, #16]
20000224:	b2db      	uxtb	r3, r3
20000226:	2201      	movs	r2, #1
20000228:	0019      	movs	r1, r3
2000022a:	207f      	movs	r0, #127	; 0x7f
2000022c:	f000 faae 	bl	2000078c <pixel>
    for (int i = 0; i < 64; i++) {
20000230:	693b      	ldr	r3, [r7, #16]
20000232:	3301      	adds	r3, #1
20000234:	613b      	str	r3, [r7, #16]
20000236:	693b      	ldr	r3, [r7, #16]
20000238:	2b3f      	cmp	r3, #63	; 0x3f
2000023a:	ddeb      	ble.n	20000214 <main+0x5a>
    }
    draw_buffer();
2000023c:	f000 fb36 	bl	200008ac <draw_buffer>
	
	int speed = 4;
20000240:	2304      	movs	r3, #4
20000242:	607b      	str	r3, [r7, #4]
    p->set_speed(p, speed, 0);
20000244:	68fb      	ldr	r3, [r7, #12]
20000246:	6a1b      	ldr	r3, [r3, #32]
20000248:	6879      	ldr	r1, [r7, #4]
2000024a:	68f8      	ldr	r0, [r7, #12]
2000024c:	2200      	movs	r2, #0
2000024e:	4798      	blx	r3
	char c;
    while(1) {
        p->move(p);
20000250:	68fb      	ldr	r3, [r7, #12]
20000252:	69db      	ldr	r3, [r3, #28]
20000254:	68fa      	ldr	r2, [r7, #12]
20000256:	0010      	movs	r0, r2
20000258:	4798      	blx	r3
		c = keyb();
2000025a:	1cfc      	adds	r4, r7, #3
2000025c:	f000 fc0a 	bl	20000a74 <keyb>
20000260:	0003      	movs	r3, r0
20000262:	7023      	strb	r3, [r4, #0]
		out7seg(c);
20000264:	1cfb      	adds	r3, r7, #3
20000266:	781b      	ldrb	r3, [r3, #0]
20000268:	0018      	movs	r0, r3
2000026a:	f000 fc8d 	bl	20000b88 <out7seg>
		switch (c) {
2000026e:	1cfb      	adds	r3, r7, #3
20000270:	781b      	ldrb	r3, [r3, #0]
20000272:	2b06      	cmp	r3, #6
20000274:	d008      	beq.n	20000288 <main+0xce>
20000276:	dc25      	bgt.n	200002c4 <main+0x10a>
20000278:	2b05      	cmp	r3, #5
2000027a:	d01c      	beq.n	200002b6 <main+0xfc>
2000027c:	dc22      	bgt.n	200002c4 <main+0x10a>
2000027e:	2b02      	cmp	r3, #2
20000280:	d009      	beq.n	20000296 <main+0xdc>
20000282:	2b04      	cmp	r3, #4
20000284:	d00f      	beq.n	200002a6 <main+0xec>
20000286:	e01d      	b.n	200002c4 <main+0x10a>
			case 6: p->set_speed(p, speed, 0); break;
20000288:	68fb      	ldr	r3, [r7, #12]
2000028a:	6a1b      	ldr	r3, [r3, #32]
2000028c:	6879      	ldr	r1, [r7, #4]
2000028e:	68f8      	ldr	r0, [r7, #12]
20000290:	2200      	movs	r2, #0
20000292:	4798      	blx	r3
20000294:	e016      	b.n	200002c4 <main+0x10a>
			case 2: p->set_speed(p, 0, -speed); break;
20000296:	68fb      	ldr	r3, [r7, #12]
20000298:	6a1b      	ldr	r3, [r3, #32]
2000029a:	687a      	ldr	r2, [r7, #4]
2000029c:	4252      	negs	r2, r2
2000029e:	68f8      	ldr	r0, [r7, #12]
200002a0:	2100      	movs	r1, #0
200002a2:	4798      	blx	r3
200002a4:	e00e      	b.n	200002c4 <main+0x10a>
			case 4: p->set_speed(p, -speed, 0); break;
200002a6:	68fb      	ldr	r3, [r7, #12]
200002a8:	6a1b      	ldr	r3, [r3, #32]
200002aa:	687a      	ldr	r2, [r7, #4]
200002ac:	4251      	negs	r1, r2
200002ae:	68f8      	ldr	r0, [r7, #12]
200002b0:	2200      	movs	r2, #0
200002b2:	4798      	blx	r3
200002b4:	e006      	b.n	200002c4 <main+0x10a>
			case 5: p->set_speed(p, 0, speed); break;
200002b6:	68fb      	ldr	r3, [r7, #12]
200002b8:	6a1b      	ldr	r3, [r3, #32]
200002ba:	687a      	ldr	r2, [r7, #4]
200002bc:	68f8      	ldr	r0, [r7, #12]
200002be:	2100      	movs	r1, #0
200002c0:	4798      	blx	r3
200002c2:	46c0      	nop			; (mov r8, r8)
		}
	draw_buffer();
200002c4:	f000 faf2 	bl	200008ac <draw_buffer>
		delay_milli(20);
200002c8:	2014      	movs	r0, #20
200002ca:	f000 f84f 	bl	2000036c <delay_milli>
    while(1) {
200002ce:	e7bf      	b.n	20000250 <main+0x96>
200002d0:	2000140c 	andcs	r1, r0, ip, lsl #8
200002d4:	20000bd8 	ldrdcs	r0, [r0], -r8

200002d8 <delay_250ns>:
#define KB_OUT  (volatile unsigned char *) (0x40020C15)
#define KB_IN   (volatile unsigned char *) (0x40020C11)

#define SEG_OUT (unsigned char *) GPIO_D_ODR

static void delay_250ns(void) {
200002d8:	b580      	push	{r7, lr}
200002da:	af00      	add	r7, sp, #0
    *STK_CTRL = 0;
200002dc:	4b0c      	ldr	r3, [pc, #48]	; (20000310 <delay_250ns+0x38>)
200002de:	2200      	movs	r2, #0
200002e0:	601a      	str	r2, [r3, #0]
    *STK_LOAD = (168/4)-1;
200002e2:	4b0c      	ldr	r3, [pc, #48]	; (20000314 <delay_250ns+0x3c>)
200002e4:	2229      	movs	r2, #41	; 0x29
200002e6:	601a      	str	r2, [r3, #0]
    *STK_VAL = 0;
200002e8:	4b0b      	ldr	r3, [pc, #44]	; (20000318 <delay_250ns+0x40>)
200002ea:	2200      	movs	r2, #0
200002ec:	601a      	str	r2, [r3, #0]
    *STK_CTRL = 5;
200002ee:	4b08      	ldr	r3, [pc, #32]	; (20000310 <delay_250ns+0x38>)
200002f0:	2205      	movs	r2, #5
200002f2:	601a      	str	r2, [r3, #0]
    while((*STK_CTRL & 0x10000) == 0);
200002f4:	46c0      	nop			; (mov r8, r8)
200002f6:	4b06      	ldr	r3, [pc, #24]	; (20000310 <delay_250ns+0x38>)
200002f8:	681a      	ldr	r2, [r3, #0]
200002fa:	2380      	movs	r3, #128	; 0x80
200002fc:	025b      	lsls	r3, r3, #9
200002fe:	4013      	ands	r3, r2
20000300:	d0f9      	beq.n	200002f6 <delay_250ns+0x1e>
    *STK_CTRL = 0;
20000302:	4b03      	ldr	r3, [pc, #12]	; (20000310 <delay_250ns+0x38>)
20000304:	2200      	movs	r2, #0
20000306:	601a      	str	r2, [r3, #0]
}
20000308:	46c0      	nop			; (mov r8, r8)
2000030a:	46bd      	mov	sp, r7
2000030c:	bd80      	pop	{r7, pc}
2000030e:	46c0      	nop			; (mov r8, r8)
20000310:	e000e010 	and	lr, r0, r0, lsl r0
20000314:	e000e014 	and	lr, r0, r4, lsl r0
20000318:	e000e018 	and	lr, r0, r8, lsl r0

2000031c <delay_500ns>:

static void delay_500ns(void) {
2000031c:	b580      	push	{r7, lr}
2000031e:	af00      	add	r7, sp, #0
    delay_250ns();
20000320:	f7ff ffda 	bl	200002d8 <delay_250ns>
    delay_250ns();
20000324:	f7ff ffd8 	bl	200002d8 <delay_250ns>
}
20000328:	46c0      	nop			; (mov r8, r8)
2000032a:	46bd      	mov	sp, r7
2000032c:	bd80      	pop	{r7, pc}

2000032e <delay_mikro>:

void delay_mikro(unsigned int us) {
2000032e:	b580      	push	{r7, lr}
20000330:	b082      	sub	sp, #8
20000332:	af00      	add	r7, sp, #0
20000334:	6078      	str	r0, [r7, #4]
    #ifdef SIMULATOR
        if (us > 500) {
20000336:	687a      	ldr	r2, [r7, #4]
20000338:	23fa      	movs	r3, #250	; 0xfa
2000033a:	005b      	lsls	r3, r3, #1
2000033c:	429a      	cmp	r2, r3
2000033e:	d90d      	bls.n	2000035c <delay_mikro+0x2e>
            us = 1;
20000340:	2301      	movs	r3, #1
20000342:	607b      	str	r3, [r7, #4]
        }
    #endif
    while (us > 0) {
20000344:	e00a      	b.n	2000035c <delay_mikro+0x2e>
        delay_250ns();
20000346:	f7ff ffc7 	bl	200002d8 <delay_250ns>
        delay_250ns();
2000034a:	f7ff ffc5 	bl	200002d8 <delay_250ns>
        delay_250ns();
2000034e:	f7ff ffc3 	bl	200002d8 <delay_250ns>
        delay_250ns();
20000352:	f7ff ffc1 	bl	200002d8 <delay_250ns>
        us--;
20000356:	687b      	ldr	r3, [r7, #4]
20000358:	3b01      	subs	r3, #1
2000035a:	607b      	str	r3, [r7, #4]
    while (us > 0) {
2000035c:	687b      	ldr	r3, [r7, #4]
2000035e:	2b00      	cmp	r3, #0
20000360:	d1f1      	bne.n	20000346 <delay_mikro+0x18>
    }
}
20000362:	46c0      	nop			; (mov r8, r8)
20000364:	46c0      	nop			; (mov r8, r8)
20000366:	46bd      	mov	sp, r7
20000368:	b002      	add	sp, #8
2000036a:	bd80      	pop	{r7, pc}

2000036c <delay_milli>:

void delay_milli(unsigned int ms) {
2000036c:	b580      	push	{r7, lr}
2000036e:	b082      	sub	sp, #8
20000370:	af00      	add	r7, sp, #0
20000372:	6078      	str	r0, [r7, #4]
    #ifdef SIMULATOR
        ms = 1;
20000374:	2301      	movs	r3, #1
20000376:	607b      	str	r3, [r7, #4]
    #endif
    while (ms > 0) {
20000378:	e007      	b.n	2000038a <delay_milli+0x1e>
        delay_mikro(1000);
2000037a:	23fa      	movs	r3, #250	; 0xfa
2000037c:	009b      	lsls	r3, r3, #2
2000037e:	0018      	movs	r0, r3
20000380:	f7ff ffd5 	bl	2000032e <delay_mikro>
        ms--;
20000384:	687b      	ldr	r3, [r7, #4]
20000386:	3b01      	subs	r3, #1
20000388:	607b      	str	r3, [r7, #4]
    while (ms > 0) {
2000038a:	687b      	ldr	r3, [r7, #4]
2000038c:	2b00      	cmp	r3, #0
2000038e:	d1f4      	bne.n	2000037a <delay_milli+0xe>
    }
}
20000390:	46c0      	nop			; (mov r8, r8)
20000392:	46c0      	nop			; (mov r8, r8)
20000394:	46bd      	mov	sp, r7
20000396:	b002      	add	sp, #8
20000398:	bd80      	pop	{r7, pc}

2000039a <graphic_ctrl_bit_set>:


typedef unsigned char uint8_t;

static void graphic_ctrl_bit_set(uint8_t x) {
2000039a:	b580      	push	{r7, lr}
2000039c:	b084      	sub	sp, #16
2000039e:	af00      	add	r7, sp, #0
200003a0:	0002      	movs	r2, r0
200003a2:	1dfb      	adds	r3, r7, #7
200003a4:	701a      	strb	r2, [r3, #0]
    uint8_t c;
    c = *portOdrLow;
200003a6:	4a10      	ldr	r2, [pc, #64]	; (200003e8 <graphic_ctrl_bit_set+0x4e>)
200003a8:	200f      	movs	r0, #15
200003aa:	183b      	adds	r3, r7, r0
200003ac:	7812      	ldrb	r2, [r2, #0]
200003ae:	701a      	strb	r2, [r3, #0]
    c &= ~B_SELECT;
200003b0:	183b      	adds	r3, r7, r0
200003b2:	183a      	adds	r2, r7, r0
200003b4:	7812      	ldrb	r2, [r2, #0]
200003b6:	2104      	movs	r1, #4
200003b8:	438a      	bics	r2, r1
200003ba:	701a      	strb	r2, [r3, #0]
    c |= (~B_SELECT & x);
200003bc:	1dfb      	adds	r3, r7, #7
200003be:	781b      	ldrb	r3, [r3, #0]
200003c0:	b25b      	sxtb	r3, r3
200003c2:	2204      	movs	r2, #4
200003c4:	4393      	bics	r3, r2
200003c6:	b25a      	sxtb	r2, r3
200003c8:	183b      	adds	r3, r7, r0
200003ca:	781b      	ldrb	r3, [r3, #0]
200003cc:	b25b      	sxtb	r3, r3
200003ce:	4313      	orrs	r3, r2
200003d0:	b25a      	sxtb	r2, r3
200003d2:	183b      	adds	r3, r7, r0
200003d4:	701a      	strb	r2, [r3, #0]
    *portOdrLow = c;
200003d6:	4a04      	ldr	r2, [pc, #16]	; (200003e8 <graphic_ctrl_bit_set+0x4e>)
200003d8:	183b      	adds	r3, r7, r0
200003da:	781b      	ldrb	r3, [r3, #0]
200003dc:	7013      	strb	r3, [r2, #0]
}
200003de:	46c0      	nop			; (mov r8, r8)
200003e0:	46bd      	mov	sp, r7
200003e2:	b004      	add	sp, #16
200003e4:	bd80      	pop	{r7, pc}
200003e6:	46c0      	nop			; (mov r8, r8)
200003e8:	40021014 	andmi	r1, r2, r4, lsl r0

200003ec <graphic_ctrl_bit_clear>:

static void graphic_ctrl_bit_clear(uint8_t x) {
200003ec:	b580      	push	{r7, lr}
200003ee:	b084      	sub	sp, #16
200003f0:	af00      	add	r7, sp, #0
200003f2:	0002      	movs	r2, r0
200003f4:	1dfb      	adds	r3, r7, #7
200003f6:	701a      	strb	r2, [r3, #0]
    uint8_t c;
    c = *portOdrLow;
200003f8:	4a0f      	ldr	r2, [pc, #60]	; (20000438 <graphic_ctrl_bit_clear+0x4c>)
200003fa:	200f      	movs	r0, #15
200003fc:	183b      	adds	r3, r7, r0
200003fe:	7812      	ldrb	r2, [r2, #0]
20000400:	701a      	strb	r2, [r3, #0]
    c &= ~B_SELECT;
20000402:	183b      	adds	r3, r7, r0
20000404:	183a      	adds	r2, r7, r0
20000406:	7812      	ldrb	r2, [r2, #0]
20000408:	2104      	movs	r1, #4
2000040a:	438a      	bics	r2, r1
2000040c:	701a      	strb	r2, [r3, #0]
    c &= ~x;
2000040e:	1dfb      	adds	r3, r7, #7
20000410:	781b      	ldrb	r3, [r3, #0]
20000412:	b25b      	sxtb	r3, r3
20000414:	43db      	mvns	r3, r3
20000416:	b25b      	sxtb	r3, r3
20000418:	183a      	adds	r2, r7, r0
2000041a:	7812      	ldrb	r2, [r2, #0]
2000041c:	b252      	sxtb	r2, r2
2000041e:	4013      	ands	r3, r2
20000420:	b25a      	sxtb	r2, r3
20000422:	183b      	adds	r3, r7, r0
20000424:	701a      	strb	r2, [r3, #0]
    *portOdrLow = c;
20000426:	4a04      	ldr	r2, [pc, #16]	; (20000438 <graphic_ctrl_bit_clear+0x4c>)
20000428:	183b      	adds	r3, r7, r0
2000042a:	781b      	ldrb	r3, [r3, #0]
2000042c:	7013      	strb	r3, [r2, #0]
}
2000042e:	46c0      	nop			; (mov r8, r8)
20000430:	46bd      	mov	sp, r7
20000432:	b004      	add	sp, #16
20000434:	bd80      	pop	{r7, pc}
20000436:	46c0      	nop			; (mov r8, r8)
20000438:	40021014 	andmi	r1, r2, r4, lsl r0

2000043c <select_controller>:

static void select_controller(uint8_t controller) {
2000043c:	b580      	push	{r7, lr}
2000043e:	b084      	sub	sp, #16
20000440:	af00      	add	r7, sp, #0
20000442:	0002      	movs	r2, r0
20000444:	1dfb      	adds	r3, r7, #7
20000446:	701a      	strb	r2, [r3, #0]
    uint8_t mask = (B_CS1 | B_CS2);
20000448:	200f      	movs	r0, #15
2000044a:	183b      	adds	r3, r7, r0
2000044c:	2218      	movs	r2, #24
2000044e:	701a      	strb	r2, [r3, #0]
    controller &= mask;
20000450:	1dfb      	adds	r3, r7, #7
20000452:	1dfa      	adds	r2, r7, #7
20000454:	1839      	adds	r1, r7, r0
20000456:	7812      	ldrb	r2, [r2, #0]
20000458:	7809      	ldrb	r1, [r1, #0]
2000045a:	400a      	ands	r2, r1
2000045c:	701a      	strb	r2, [r3, #0]
    
    uint8_t c;
    c = *portOdrLow;
2000045e:	4a10      	ldr	r2, [pc, #64]	; (200004a0 <select_controller+0x64>)
20000460:	210e      	movs	r1, #14
20000462:	187b      	adds	r3, r7, r1
20000464:	7812      	ldrb	r2, [r2, #0]
20000466:	701a      	strb	r2, [r3, #0]
    c &= ~mask;     //Set CS1 and CS2 to 0
20000468:	183b      	adds	r3, r7, r0
2000046a:	781b      	ldrb	r3, [r3, #0]
2000046c:	b25b      	sxtb	r3, r3
2000046e:	43db      	mvns	r3, r3
20000470:	b25b      	sxtb	r3, r3
20000472:	187a      	adds	r2, r7, r1
20000474:	7812      	ldrb	r2, [r2, #0]
20000476:	b252      	sxtb	r2, r2
20000478:	4013      	ands	r3, r2
2000047a:	b25a      	sxtb	r2, r3
2000047c:	187b      	adds	r3, r7, r1
2000047e:	701a      	strb	r2, [r3, #0]
    c |= controller;//OR in CS1 and CS2 from controller
20000480:	187b      	adds	r3, r7, r1
20000482:	0008      	movs	r0, r1
20000484:	1879      	adds	r1, r7, r1
20000486:	1dfa      	adds	r2, r7, #7
20000488:	7809      	ldrb	r1, [r1, #0]
2000048a:	7812      	ldrb	r2, [r2, #0]
2000048c:	430a      	orrs	r2, r1
2000048e:	701a      	strb	r2, [r3, #0]
    *portOdrLow = c;
20000490:	4a03      	ldr	r2, [pc, #12]	; (200004a0 <select_controller+0x64>)
20000492:	183b      	adds	r3, r7, r0
20000494:	781b      	ldrb	r3, [r3, #0]
20000496:	7013      	strb	r3, [r2, #0]
}
20000498:	46c0      	nop			; (mov r8, r8)
2000049a:	46bd      	mov	sp, r7
2000049c:	b004      	add	sp, #16
2000049e:	bd80      	pop	{r7, pc}
200004a0:	40021014 	andmi	r1, r2, r4, lsl r0

200004a4 <graphic_wait_ready>:

static void graphic_wait_ready(void) {
200004a4:	b580      	push	{r7, lr}
200004a6:	b082      	sub	sp, #8
200004a8:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_clear(B_E);
200004aa:	2040      	movs	r0, #64	; 0x40
200004ac:	f7ff ff9e 	bl	200003ec <graphic_ctrl_bit_clear>
    *portModer = 0x00005555;
200004b0:	4b14      	ldr	r3, [pc, #80]	; (20000504 <graphic_wait_ready+0x60>)
200004b2:	4a15      	ldr	r2, [pc, #84]	; (20000508 <graphic_wait_ready+0x64>)
200004b4:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_RS);
200004b6:	2001      	movs	r0, #1
200004b8:	f7ff ff98 	bl	200003ec <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_set(B_RW);
200004bc:	2002      	movs	r0, #2
200004be:	f7ff ff6c 	bl	2000039a <graphic_ctrl_bit_set>
    delay_500ns();
200004c2:	f7ff ff2b 	bl	2000031c <delay_500ns>
    
    while(1) {
        graphic_ctrl_bit_set(B_E);
200004c6:	2040      	movs	r0, #64	; 0x40
200004c8:	f7ff ff67 	bl	2000039a <graphic_ctrl_bit_set>
        delay_500ns();
200004cc:	f7ff ff26 	bl	2000031c <delay_500ns>
        graphic_ctrl_bit_clear(B_E);
200004d0:	2040      	movs	r0, #64	; 0x40
200004d2:	f7ff ff8b 	bl	200003ec <graphic_ctrl_bit_clear>
        delay_500ns();
200004d6:	f7ff ff21 	bl	2000031c <delay_500ns>
        uint8_t busy = *portIdrHigh;
200004da:	4a0c      	ldr	r2, [pc, #48]	; (2000050c <graphic_wait_ready+0x68>)
200004dc:	1dfb      	adds	r3, r7, #7
200004de:	7812      	ldrb	r2, [r2, #0]
200004e0:	701a      	strb	r2, [r3, #0]
        busy &= LCD_BUSY;
200004e2:	1dfb      	adds	r3, r7, #7
200004e4:	1dfa      	adds	r2, r7, #7
200004e6:	7812      	ldrb	r2, [r2, #0]
200004e8:	217f      	movs	r1, #127	; 0x7f
200004ea:	438a      	bics	r2, r1
200004ec:	701a      	strb	r2, [r3, #0]
        if (~busy) {
            break;
200004ee:	46c0      	nop			; (mov r8, r8)
        }
    }
    graphic_ctrl_bit_set(B_E);
200004f0:	2040      	movs	r0, #64	; 0x40
200004f2:	f7ff ff52 	bl	2000039a <graphic_ctrl_bit_set>
    *portModer = 0x55555555;
200004f6:	4b03      	ldr	r3, [pc, #12]	; (20000504 <graphic_wait_ready+0x60>)
200004f8:	4a05      	ldr	r2, [pc, #20]	; (20000510 <graphic_wait_ready+0x6c>)
200004fa:	601a      	str	r2, [r3, #0]
}
200004fc:	46c0      	nop			; (mov r8, r8)
200004fe:	46bd      	mov	sp, r7
20000500:	b002      	add	sp, #8
20000502:	bd80      	pop	{r7, pc}
20000504:	40021000 	andmi	r1, r2, r0
20000508:	00005555 	andeq	r5, r0, r5, asr r5
2000050c:	40021011 	andmi	r1, r2, r1, lsl r0
20000510:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000514 <graphic_read>:

static uint8_t graphic_read(uint8_t controller) {
20000514:	b580      	push	{r7, lr}
20000516:	b084      	sub	sp, #16
20000518:	af00      	add	r7, sp, #0
2000051a:	0002      	movs	r2, r0
2000051c:	1dfb      	adds	r3, r7, #7
2000051e:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20000520:	2040      	movs	r0, #64	; 0x40
20000522:	f7ff ff63 	bl	200003ec <graphic_ctrl_bit_clear>
    *portModer = 0x00005555;
20000526:	4b1b      	ldr	r3, [pc, #108]	; (20000594 <graphic_read+0x80>)
20000528:	4a1b      	ldr	r2, [pc, #108]	; (20000598 <graphic_read+0x84>)
2000052a:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_set(B_RS);
2000052c:	2001      	movs	r0, #1
2000052e:	f7ff ff34 	bl	2000039a <graphic_ctrl_bit_set>
    graphic_ctrl_bit_set(B_RW);
20000532:	2002      	movs	r0, #2
20000534:	f7ff ff31 	bl	2000039a <graphic_ctrl_bit_set>
    select_controller(controller);
20000538:	1dfb      	adds	r3, r7, #7
2000053a:	781b      	ldrb	r3, [r3, #0]
2000053c:	0018      	movs	r0, r3
2000053e:	f7ff ff7d 	bl	2000043c <select_controller>
    delay_500ns();
20000542:	f7ff feeb 	bl	2000031c <delay_500ns>
    graphic_ctrl_bit_set(B_E);
20000546:	2040      	movs	r0, #64	; 0x40
20000548:	f7ff ff27 	bl	2000039a <graphic_ctrl_bit_set>
    delay_500ns();
2000054c:	f7ff fee6 	bl	2000031c <delay_500ns>
    uint8_t rv = *portIdrHigh;
20000550:	4a12      	ldr	r2, [pc, #72]	; (2000059c <graphic_read+0x88>)
20000552:	230f      	movs	r3, #15
20000554:	18fb      	adds	r3, r7, r3
20000556:	7812      	ldrb	r2, [r2, #0]
20000558:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
2000055a:	2040      	movs	r0, #64	; 0x40
2000055c:	f7ff ff46 	bl	200003ec <graphic_ctrl_bit_clear>
    *portModer = 0x55555555;
20000560:	4b0c      	ldr	r3, [pc, #48]	; (20000594 <graphic_read+0x80>)
20000562:	4a0f      	ldr	r2, [pc, #60]	; (200005a0 <graphic_read+0x8c>)
20000564:	601a      	str	r2, [r3, #0]
    if (controller == B_CS1 || controller == B_CS2) {
20000566:	1dfb      	adds	r3, r7, #7
20000568:	781b      	ldrb	r3, [r3, #0]
2000056a:	2b08      	cmp	r3, #8
2000056c:	d003      	beq.n	20000576 <graphic_read+0x62>
2000056e:	1dfb      	adds	r3, r7, #7
20000570:	781b      	ldrb	r3, [r3, #0]
20000572:	2b10      	cmp	r3, #16
20000574:	d106      	bne.n	20000584 <graphic_read+0x70>
        select_controller(controller);
20000576:	1dfb      	adds	r3, r7, #7
20000578:	781b      	ldrb	r3, [r3, #0]
2000057a:	0018      	movs	r0, r3
2000057c:	f7ff ff5e 	bl	2000043c <select_controller>
        graphic_wait_ready();
20000580:	f7ff ff90 	bl	200004a4 <graphic_wait_ready>
    }
    return rv;
20000584:	230f      	movs	r3, #15
20000586:	18fb      	adds	r3, r7, r3
20000588:	781b      	ldrb	r3, [r3, #0]
}
2000058a:	0018      	movs	r0, r3
2000058c:	46bd      	mov	sp, r7
2000058e:	b004      	add	sp, #16
20000590:	bd80      	pop	{r7, pc}
20000592:	46c0      	nop			; (mov r8, r8)
20000594:	40021000 	andmi	r1, r2, r0
20000598:	00005555 	andeq	r5, r0, r5, asr r5
2000059c:	40021011 	andmi	r1, r2, r1, lsl r0
200005a0:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200005a4 <graphic_write>:

static void graphic_write(uint8_t value, uint8_t controller) {
200005a4:	b580      	push	{r7, lr}
200005a6:	b082      	sub	sp, #8
200005a8:	af00      	add	r7, sp, #0
200005aa:	0002      	movs	r2, r0
200005ac:	1dfb      	adds	r3, r7, #7
200005ae:	701a      	strb	r2, [r3, #0]
200005b0:	1dbb      	adds	r3, r7, #6
200005b2:	1c0a      	adds	r2, r1, #0
200005b4:	701a      	strb	r2, [r3, #0]
    *portOdrHigh = value;
200005b6:	4a17      	ldr	r2, [pc, #92]	; (20000614 <graphic_write+0x70>)
200005b8:	1dfb      	adds	r3, r7, #7
200005ba:	781b      	ldrb	r3, [r3, #0]
200005bc:	7013      	strb	r3, [r2, #0]
    select_controller(controller);
200005be:	1dbb      	adds	r3, r7, #6
200005c0:	781b      	ldrb	r3, [r3, #0]
200005c2:	0018      	movs	r0, r3
200005c4:	f7ff ff3a 	bl	2000043c <select_controller>
    delay_500ns();
200005c8:	f7ff fea8 	bl	2000031c <delay_500ns>
    graphic_ctrl_bit_set(B_E);
200005cc:	2040      	movs	r0, #64	; 0x40
200005ce:	f7ff fee4 	bl	2000039a <graphic_ctrl_bit_set>
    delay_500ns();
200005d2:	f7ff fea3 	bl	2000031c <delay_500ns>
    graphic_ctrl_bit_clear(B_E);
200005d6:	2040      	movs	r0, #64	; 0x40
200005d8:	f7ff ff08 	bl	200003ec <graphic_ctrl_bit_clear>
    
    if (controller == B_CS1 || controller == B_CS2) {
200005dc:	1dbb      	adds	r3, r7, #6
200005de:	781b      	ldrb	r3, [r3, #0]
200005e0:	2b08      	cmp	r3, #8
200005e2:	d003      	beq.n	200005ec <graphic_write+0x48>
200005e4:	1dbb      	adds	r3, r7, #6
200005e6:	781b      	ldrb	r3, [r3, #0]
200005e8:	2b10      	cmp	r3, #16
200005ea:	d106      	bne.n	200005fa <graphic_write+0x56>
        select_controller(controller);
200005ec:	1dbb      	adds	r3, r7, #6
200005ee:	781b      	ldrb	r3, [r3, #0]
200005f0:	0018      	movs	r0, r3
200005f2:	f7ff ff23 	bl	2000043c <select_controller>
        graphic_wait_ready();
200005f6:	f7ff ff55 	bl	200004a4 <graphic_wait_ready>
    }
    
    *portOdrHigh = 0;
200005fa:	4b06      	ldr	r3, [pc, #24]	; (20000614 <graphic_write+0x70>)
200005fc:	2200      	movs	r2, #0
200005fe:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_set(B_E);
20000600:	2040      	movs	r0, #64	; 0x40
20000602:	f7ff feca 	bl	2000039a <graphic_ctrl_bit_set>
    select_controller(0);
20000606:	2000      	movs	r0, #0
20000608:	f7ff ff18 	bl	2000043c <select_controller>
}
2000060c:	46c0      	nop			; (mov r8, r8)
2000060e:	46bd      	mov	sp, r7
20000610:	b002      	add	sp, #8
20000612:	bd80      	pop	{r7, pc}
20000614:	40021015 	andmi	r1, r2, r5, lsl r0

20000618 <graphic_write_command>:

static void graphic_write_command(uint8_t command, uint8_t controller) {
20000618:	b580      	push	{r7, lr}
2000061a:	b082      	sub	sp, #8
2000061c:	af00      	add	r7, sp, #0
2000061e:	0002      	movs	r2, r0
20000620:	1dfb      	adds	r3, r7, #7
20000622:	701a      	strb	r2, [r3, #0]
20000624:	1dbb      	adds	r3, r7, #6
20000626:	1c0a      	adds	r2, r1, #0
20000628:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
2000062a:	2040      	movs	r0, #64	; 0x40
2000062c:	f7ff fede 	bl	200003ec <graphic_ctrl_bit_clear>
    select_controller(controller);
20000630:	1dbb      	adds	r3, r7, #6
20000632:	781b      	ldrb	r3, [r3, #0]
20000634:	0018      	movs	r0, r3
20000636:	f7ff ff01 	bl	2000043c <select_controller>
    graphic_ctrl_bit_clear(B_RS);
2000063a:	2001      	movs	r0, #1
2000063c:	f7ff fed6 	bl	200003ec <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_clear(B_RW);
20000640:	2002      	movs	r0, #2
20000642:	f7ff fed3 	bl	200003ec <graphic_ctrl_bit_clear>
    graphic_write(command, controller);
20000646:	1dbb      	adds	r3, r7, #6
20000648:	781a      	ldrb	r2, [r3, #0]
2000064a:	1dfb      	adds	r3, r7, #7
2000064c:	781b      	ldrb	r3, [r3, #0]
2000064e:	0011      	movs	r1, r2
20000650:	0018      	movs	r0, r3
20000652:	f7ff ffa7 	bl	200005a4 <graphic_write>
}
20000656:	46c0      	nop			; (mov r8, r8)
20000658:	46bd      	mov	sp, r7
2000065a:	b002      	add	sp, #8
2000065c:	bd80      	pop	{r7, pc}

2000065e <graphic_write_data>:

static void graphic_write_data(uint8_t data, uint8_t controller) {
2000065e:	b580      	push	{r7, lr}
20000660:	b082      	sub	sp, #8
20000662:	af00      	add	r7, sp, #0
20000664:	0002      	movs	r2, r0
20000666:	1dfb      	adds	r3, r7, #7
20000668:	701a      	strb	r2, [r3, #0]
2000066a:	1dbb      	adds	r3, r7, #6
2000066c:	1c0a      	adds	r2, r1, #0
2000066e:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20000670:	2040      	movs	r0, #64	; 0x40
20000672:	f7ff febb 	bl	200003ec <graphic_ctrl_bit_clear>
    select_controller(controller);
20000676:	1dbb      	adds	r3, r7, #6
20000678:	781b      	ldrb	r3, [r3, #0]
2000067a:	0018      	movs	r0, r3
2000067c:	f7ff fede 	bl	2000043c <select_controller>
    graphic_ctrl_bit_set(B_RS);
20000680:	2001      	movs	r0, #1
20000682:	f7ff fe8a 	bl	2000039a <graphic_ctrl_bit_set>
    graphic_ctrl_bit_clear(B_RW);
20000686:	2002      	movs	r0, #2
20000688:	f7ff feb0 	bl	200003ec <graphic_ctrl_bit_clear>
    graphic_write(data, controller);
2000068c:	1dbb      	adds	r3, r7, #6
2000068e:	781a      	ldrb	r2, [r3, #0]
20000690:	1dfb      	adds	r3, r7, #7
20000692:	781b      	ldrb	r3, [r3, #0]
20000694:	0011      	movs	r1, r2
20000696:	0018      	movs	r0, r3
20000698:	f7ff ff84 	bl	200005a4 <graphic_write>
}
2000069c:	46c0      	nop			; (mov r8, r8)
2000069e:	46bd      	mov	sp, r7
200006a0:	b002      	add	sp, #8
200006a2:	bd80      	pop	{r7, pc}

200006a4 <graphic_read_data>:

static uint8_t graphic_read_data(uint8_t controller) {
200006a4:	b580      	push	{r7, lr}
200006a6:	b082      	sub	sp, #8
200006a8:	af00      	add	r7, sp, #0
200006aa:	0002      	movs	r2, r0
200006ac:	1dfb      	adds	r3, r7, #7
200006ae:	701a      	strb	r2, [r3, #0]
    graphic_read(controller);
200006b0:	1dfb      	adds	r3, r7, #7
200006b2:	781b      	ldrb	r3, [r3, #0]
200006b4:	0018      	movs	r0, r3
200006b6:	f7ff ff2d 	bl	20000514 <graphic_read>
    return graphic_read(controller);
200006ba:	1dfb      	adds	r3, r7, #7
200006bc:	781b      	ldrb	r3, [r3, #0]
200006be:	0018      	movs	r0, r3
200006c0:	f7ff ff28 	bl	20000514 <graphic_read>
200006c4:	0003      	movs	r3, r0
}
200006c6:	0018      	movs	r0, r3
200006c8:	46bd      	mov	sp, r7
200006ca:	b002      	add	sp, #8
200006cc:	bd80      	pop	{r7, pc}

200006ce <graphic_initialize>:

static void graphic_initialize() {
200006ce:	b580      	push	{r7, lr}
200006d0:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_set(B_E);
200006d2:	2040      	movs	r0, #64	; 0x40
200006d4:	f7ff fe61 	bl	2000039a <graphic_ctrl_bit_set>
    delay_mikro(10);
200006d8:	200a      	movs	r0, #10
200006da:	f7ff fe28 	bl	2000032e <delay_mikro>
    graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
200006de:	2078      	movs	r0, #120	; 0x78
200006e0:	f7ff fe84 	bl	200003ec <graphic_ctrl_bit_clear>
    delay_milli(30);
200006e4:	201e      	movs	r0, #30
200006e6:	f7ff fe41 	bl	2000036c <delay_milli>
    graphic_ctrl_bit_set(B_RST);
200006ea:	2020      	movs	r0, #32
200006ec:	f7ff fe55 	bl	2000039a <graphic_ctrl_bit_set>
    
    graphic_write_command(LCD_OFF,          B_CS1 | B_CS2);
200006f0:	2118      	movs	r1, #24
200006f2:	203e      	movs	r0, #62	; 0x3e
200006f4:	f7ff ff90 	bl	20000618 <graphic_write_command>
    graphic_write_command(LCD_ON,           B_CS1 | B_CS2);
200006f8:	2118      	movs	r1, #24
200006fa:	203f      	movs	r0, #63	; 0x3f
200006fc:	f7ff ff8c 	bl	20000618 <graphic_write_command>
    graphic_write_command(LCD_DISP_START,   B_CS1 | B_CS2);
20000700:	2118      	movs	r1, #24
20000702:	20c0      	movs	r0, #192	; 0xc0
20000704:	f7ff ff88 	bl	20000618 <graphic_write_command>
    graphic_write_command(LCD_SET_ADD,      B_CS1 | B_CS2);
20000708:	2118      	movs	r1, #24
2000070a:	2040      	movs	r0, #64	; 0x40
2000070c:	f7ff ff84 	bl	20000618 <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE,     B_CS1 | B_CS2);
20000710:	2118      	movs	r1, #24
20000712:	20b8      	movs	r0, #184	; 0xb8
20000714:	f7ff ff80 	bl	20000618 <graphic_write_command>
    
    select_controller(0);
20000718:	2000      	movs	r0, #0
2000071a:	f7ff fe8f 	bl	2000043c <select_controller>
}
2000071e:	46c0      	nop			; (mov r8, r8)
20000720:	46bd      	mov	sp, r7
20000722:	bd80      	pop	{r7, pc}

20000724 <graphic_clear_screen>:

static void graphic_clear_screen() {
20000724:	b580      	push	{r7, lr}
20000726:	b082      	sub	sp, #8
20000728:	af00      	add	r7, sp, #0
    for (uint8_t page = 0; page < 8; page++) {
2000072a:	1dfb      	adds	r3, r7, #7
2000072c:	2200      	movs	r2, #0
2000072e:	701a      	strb	r2, [r3, #0]
20000730:	e023      	b.n	2000077a <graphic_clear_screen+0x56>
        graphic_write_command(LCD_SET_PAGE | page,  B_CS1 | B_CS2);
20000732:	1dfb      	adds	r3, r7, #7
20000734:	781b      	ldrb	r3, [r3, #0]
20000736:	2248      	movs	r2, #72	; 0x48
20000738:	4252      	negs	r2, r2
2000073a:	4313      	orrs	r3, r2
2000073c:	b2db      	uxtb	r3, r3
2000073e:	2118      	movs	r1, #24
20000740:	0018      	movs	r0, r3
20000742:	f7ff ff69 	bl	20000618 <graphic_write_command>
        graphic_write_command(LCD_SET_ADD | 0,      B_CS1 | B_CS2);
20000746:	2118      	movs	r1, #24
20000748:	2040      	movs	r0, #64	; 0x40
2000074a:	f7ff ff65 	bl	20000618 <graphic_write_command>
        for (uint8_t add = 0; add < 64; add++) {
2000074e:	1dbb      	adds	r3, r7, #6
20000750:	2200      	movs	r2, #0
20000752:	701a      	strb	r2, [r3, #0]
20000754:	e008      	b.n	20000768 <graphic_clear_screen+0x44>
            graphic_write_data(0, B_CS1 | B_CS2);
20000756:	2118      	movs	r1, #24
20000758:	2000      	movs	r0, #0
2000075a:	f7ff ff80 	bl	2000065e <graphic_write_data>
        for (uint8_t add = 0; add < 64; add++) {
2000075e:	1dbb      	adds	r3, r7, #6
20000760:	781a      	ldrb	r2, [r3, #0]
20000762:	1dbb      	adds	r3, r7, #6
20000764:	3201      	adds	r2, #1
20000766:	701a      	strb	r2, [r3, #0]
20000768:	1dbb      	adds	r3, r7, #6
2000076a:	781b      	ldrb	r3, [r3, #0]
2000076c:	2b3f      	cmp	r3, #63	; 0x3f
2000076e:	d9f2      	bls.n	20000756 <graphic_clear_screen+0x32>
    for (uint8_t page = 0; page < 8; page++) {
20000770:	1dfb      	adds	r3, r7, #7
20000772:	781a      	ldrb	r2, [r3, #0]
20000774:	1dfb      	adds	r3, r7, #7
20000776:	3201      	adds	r2, #1
20000778:	701a      	strb	r2, [r3, #0]
2000077a:	1dfb      	adds	r3, r7, #7
2000077c:	781b      	ldrb	r3, [r3, #0]
2000077e:	2b07      	cmp	r3, #7
20000780:	d9d7      	bls.n	20000732 <graphic_clear_screen+0xe>
        }
    }
}
20000782:	46c0      	nop			; (mov r8, r8)
20000784:	46c0      	nop			; (mov r8, r8)
20000786:	46bd      	mov	sp, r7
20000788:	b002      	add	sp, #8
2000078a:	bd80      	pop	{r7, pc}

2000078c <pixel>:


static uint8_t buffer[8][128];


void pixel(uint8_t x, uint8_t y, uint8_t set) {
2000078c:	b5b0      	push	{r4, r5, r7, lr}
2000078e:	b084      	sub	sp, #16
20000790:	af00      	add	r7, sp, #0
20000792:	0004      	movs	r4, r0
20000794:	0008      	movs	r0, r1
20000796:	0011      	movs	r1, r2
20000798:	1dfb      	adds	r3, r7, #7
2000079a:	1c22      	adds	r2, r4, #0
2000079c:	701a      	strb	r2, [r3, #0]
2000079e:	1dbb      	adds	r3, r7, #6
200007a0:	1c02      	adds	r2, r0, #0
200007a2:	701a      	strb	r2, [r3, #0]
200007a4:	1d7b      	adds	r3, r7, #5
200007a6:	1c0a      	adds	r2, r1, #0
200007a8:	701a      	strb	r2, [r3, #0]
	if (x>127 || y>63) return;
200007aa:	1dfb      	adds	r3, r7, #7
200007ac:	781b      	ldrb	r3, [r3, #0]
200007ae:	b25b      	sxtb	r3, r3
200007b0:	2b00      	cmp	r3, #0
200007b2:	db46      	blt.n	20000842 <pixel+0xb6>
200007b4:	1dbb      	adds	r3, r7, #6
200007b6:	781b      	ldrb	r3, [r3, #0]
200007b8:	2b3f      	cmp	r3, #63	; 0x3f
200007ba:	d842      	bhi.n	20000842 <pixel+0xb6>
	
    uint8_t mask = 1 << (y % 8);
200007bc:	1dbb      	adds	r3, r7, #6
200007be:	781b      	ldrb	r3, [r3, #0]
200007c0:	2207      	movs	r2, #7
200007c2:	4013      	ands	r3, r2
200007c4:	2201      	movs	r2, #1
200007c6:	409a      	lsls	r2, r3
200007c8:	250f      	movs	r5, #15
200007ca:	197b      	adds	r3, r7, r5
200007cc:	701a      	strb	r2, [r3, #0]
	
	if (set) {
200007ce:	1d7b      	adds	r3, r7, #5
200007d0:	781b      	ldrb	r3, [r3, #0]
200007d2:	2b00      	cmp	r3, #0
200007d4:	d017      	beq.n	20000806 <pixel+0x7a>
		buffer[y/8][x] |= mask;
200007d6:	1dbb      	adds	r3, r7, #6
200007d8:	781b      	ldrb	r3, [r3, #0]
200007da:	08db      	lsrs	r3, r3, #3
200007dc:	b2d8      	uxtb	r0, r3
200007de:	0002      	movs	r2, r0
200007e0:	1dfb      	adds	r3, r7, #7
200007e2:	781b      	ldrb	r3, [r3, #0]
200007e4:	4919      	ldr	r1, [pc, #100]	; (2000084c <pixel+0xc0>)
200007e6:	01d2      	lsls	r2, r2, #7
200007e8:	188a      	adds	r2, r1, r2
200007ea:	5cd1      	ldrb	r1, [r2, r3]
200007ec:	0004      	movs	r4, r0
200007ee:	1dfb      	adds	r3, r7, #7
200007f0:	781b      	ldrb	r3, [r3, #0]
200007f2:	197a      	adds	r2, r7, r5
200007f4:	7812      	ldrb	r2, [r2, #0]
200007f6:	430a      	orrs	r2, r1
200007f8:	b2d0      	uxtb	r0, r2
200007fa:	4914      	ldr	r1, [pc, #80]	; (2000084c <pixel+0xc0>)
200007fc:	01e2      	lsls	r2, r4, #7
200007fe:	188a      	adds	r2, r1, r2
20000800:	1c01      	adds	r1, r0, #0
20000802:	54d1      	strb	r1, [r2, r3]
20000804:	e01e      	b.n	20000844 <pixel+0xb8>
	} else {
		buffer[y/8][x] &= ~mask;
20000806:	1dbb      	adds	r3, r7, #6
20000808:	781b      	ldrb	r3, [r3, #0]
2000080a:	08db      	lsrs	r3, r3, #3
2000080c:	b2d8      	uxtb	r0, r3
2000080e:	0002      	movs	r2, r0
20000810:	1dfb      	adds	r3, r7, #7
20000812:	781b      	ldrb	r3, [r3, #0]
20000814:	490d      	ldr	r1, [pc, #52]	; (2000084c <pixel+0xc0>)
20000816:	01d2      	lsls	r2, r2, #7
20000818:	188a      	adds	r2, r1, r2
2000081a:	5cd3      	ldrb	r3, [r2, r3]
2000081c:	b25b      	sxtb	r3, r3
2000081e:	220f      	movs	r2, #15
20000820:	18ba      	adds	r2, r7, r2
20000822:	7812      	ldrb	r2, [r2, #0]
20000824:	b252      	sxtb	r2, r2
20000826:	43d2      	mvns	r2, r2
20000828:	b252      	sxtb	r2, r2
2000082a:	4013      	ands	r3, r2
2000082c:	b259      	sxtb	r1, r3
2000082e:	0002      	movs	r2, r0
20000830:	1dfb      	adds	r3, r7, #7
20000832:	781b      	ldrb	r3, [r3, #0]
20000834:	b2c8      	uxtb	r0, r1
20000836:	4905      	ldr	r1, [pc, #20]	; (2000084c <pixel+0xc0>)
20000838:	01d2      	lsls	r2, r2, #7
2000083a:	188a      	adds	r2, r1, r2
2000083c:	1c01      	adds	r1, r0, #0
2000083e:	54d1      	strb	r1, [r2, r3]
20000840:	e000      	b.n	20000844 <pixel+0xb8>
	if (x>127 || y>63) return;
20000842:	46c0      	nop			; (mov r8, r8)
	}
}
20000844:	46bd      	mov	sp, r7
20000846:	b004      	add	sp, #16
20000848:	bdb0      	pop	{r4, r5, r7, pc}
2000084a:	46c0      	nop			; (mov r8, r8)
2000084c:	20000fd8 	ldrdcs	r0, [r0], -r8

20000850 <clear_buffer>:

void clear_buffer() {
20000850:	b580      	push	{r7, lr}
20000852:	b082      	sub	sp, #8
20000854:	af00      	add	r7, sp, #0
	for (uint8_t y = 0; y<8; y++) {
20000856:	1dfb      	adds	r3, r7, #7
20000858:	2200      	movs	r2, #0
2000085a:	701a      	strb	r2, [r3, #0]
2000085c:	e01b      	b.n	20000896 <clear_buffer+0x46>
		for (uint8_t x = 0; x<128; x++) {
2000085e:	1dbb      	adds	r3, r7, #6
20000860:	2200      	movs	r2, #0
20000862:	701a      	strb	r2, [r3, #0]
20000864:	e00d      	b.n	20000882 <clear_buffer+0x32>
			buffer[y][x] = 0;
20000866:	1dfb      	adds	r3, r7, #7
20000868:	781a      	ldrb	r2, [r3, #0]
2000086a:	1dbb      	adds	r3, r7, #6
2000086c:	781b      	ldrb	r3, [r3, #0]
2000086e:	490e      	ldr	r1, [pc, #56]	; (200008a8 <clear_buffer+0x58>)
20000870:	01d2      	lsls	r2, r2, #7
20000872:	188a      	adds	r2, r1, r2
20000874:	2100      	movs	r1, #0
20000876:	54d1      	strb	r1, [r2, r3]
		for (uint8_t x = 0; x<128; x++) {
20000878:	1dbb      	adds	r3, r7, #6
2000087a:	781a      	ldrb	r2, [r3, #0]
2000087c:	1dbb      	adds	r3, r7, #6
2000087e:	3201      	adds	r2, #1
20000880:	701a      	strb	r2, [r3, #0]
20000882:	1dbb      	adds	r3, r7, #6
20000884:	781b      	ldrb	r3, [r3, #0]
20000886:	b25b      	sxtb	r3, r3
20000888:	2b00      	cmp	r3, #0
2000088a:	daec      	bge.n	20000866 <clear_buffer+0x16>
	for (uint8_t y = 0; y<8; y++) {
2000088c:	1dfb      	adds	r3, r7, #7
2000088e:	781a      	ldrb	r2, [r3, #0]
20000890:	1dfb      	adds	r3, r7, #7
20000892:	3201      	adds	r2, #1
20000894:	701a      	strb	r2, [r3, #0]
20000896:	1dfb      	adds	r3, r7, #7
20000898:	781b      	ldrb	r3, [r3, #0]
2000089a:	2b07      	cmp	r3, #7
2000089c:	d9df      	bls.n	2000085e <clear_buffer+0xe>
		}
	}
}
2000089e:	46c0      	nop			; (mov r8, r8)
200008a0:	46c0      	nop			; (mov r8, r8)
200008a2:	46bd      	mov	sp, r7
200008a4:	b002      	add	sp, #8
200008a6:	bd80      	pop	{r7, pc}
200008a8:	20000fd8 	ldrdcs	r0, [r0], -r8

200008ac <draw_buffer>:

void draw_buffer() {
200008ac:	b580      	push	{r7, lr}
200008ae:	b082      	sub	sp, #8
200008b0:	af00      	add	r7, sp, #0
	for (uint8_t y = 0; y<8; y++) {
200008b2:	1dfb      	adds	r3, r7, #7
200008b4:	2200      	movs	r2, #0
200008b6:	701a      	strb	r2, [r3, #0]
200008b8:	e038      	b.n	2000092c <draw_buffer+0x80>
		for (uint8_t x = 0; x<64; x++) {
200008ba:	1dbb      	adds	r3, r7, #6
200008bc:	2200      	movs	r2, #0
200008be:	701a      	strb	r2, [r3, #0]
200008c0:	e02b      	b.n	2000091a <draw_buffer+0x6e>
			graphic_write_command(LCD_SET_ADD | x, B_CS1);
200008c2:	1dbb      	adds	r3, r7, #6
200008c4:	781b      	ldrb	r3, [r3, #0]
200008c6:	2240      	movs	r2, #64	; 0x40
200008c8:	4313      	orrs	r3, r2
200008ca:	b2db      	uxtb	r3, r3
200008cc:	2108      	movs	r1, #8
200008ce:	0018      	movs	r0, r3
200008d0:	f7ff fea2 	bl	20000618 <graphic_write_command>
			graphic_write_command(LCD_SET_PAGE | y, B_CS1);
200008d4:	1dfb      	adds	r3, r7, #7
200008d6:	781b      	ldrb	r3, [r3, #0]
200008d8:	2248      	movs	r2, #72	; 0x48
200008da:	4252      	negs	r2, r2
200008dc:	4313      	orrs	r3, r2
200008de:	b2db      	uxtb	r3, r3
200008e0:	2108      	movs	r1, #8
200008e2:	0018      	movs	r0, r3
200008e4:	f7ff fe98 	bl	20000618 <graphic_write_command>
			graphic_write_data(buffer[y][x], B_CS1);
200008e8:	1dfb      	adds	r3, r7, #7
200008ea:	781a      	ldrb	r2, [r3, #0]
200008ec:	1dbb      	adds	r3, r7, #6
200008ee:	781b      	ldrb	r3, [r3, #0]
200008f0:	4936      	ldr	r1, [pc, #216]	; (200009cc <draw_buffer+0x120>)
200008f2:	01d2      	lsls	r2, r2, #7
200008f4:	188a      	adds	r2, r1, r2
200008f6:	5cd3      	ldrb	r3, [r2, r3]
200008f8:	2108      	movs	r1, #8
200008fa:	0018      	movs	r0, r3
200008fc:	f7ff feaf 	bl	2000065e <graphic_write_data>
			
			graphic_write_command(LCD_ON,           B_CS1 | B_CS2);
20000900:	2118      	movs	r1, #24
20000902:	203f      	movs	r0, #63	; 0x3f
20000904:	f7ff fe88 	bl	20000618 <graphic_write_command>
			graphic_write_command(LCD_DISP_START,   B_CS1 | B_CS2);
20000908:	2118      	movs	r1, #24
2000090a:	20c0      	movs	r0, #192	; 0xc0
2000090c:	f7ff fe84 	bl	20000618 <graphic_write_command>
		for (uint8_t x = 0; x<64; x++) {
20000910:	1dbb      	adds	r3, r7, #6
20000912:	781a      	ldrb	r2, [r3, #0]
20000914:	1dbb      	adds	r3, r7, #6
20000916:	3201      	adds	r2, #1
20000918:	701a      	strb	r2, [r3, #0]
2000091a:	1dbb      	adds	r3, r7, #6
2000091c:	781b      	ldrb	r3, [r3, #0]
2000091e:	2b3f      	cmp	r3, #63	; 0x3f
20000920:	d9cf      	bls.n	200008c2 <draw_buffer+0x16>
	for (uint8_t y = 0; y<8; y++) {
20000922:	1dfb      	adds	r3, r7, #7
20000924:	781a      	ldrb	r2, [r3, #0]
20000926:	1dfb      	adds	r3, r7, #7
20000928:	3201      	adds	r2, #1
2000092a:	701a      	strb	r2, [r3, #0]
2000092c:	1dfb      	adds	r3, r7, #7
2000092e:	781b      	ldrb	r3, [r3, #0]
20000930:	2b07      	cmp	r3, #7
20000932:	d9c2      	bls.n	200008ba <draw_buffer+0xe>
		}
	}
	for (uint8_t y = 0; y<8; y++) {
20000934:	1d7b      	adds	r3, r7, #5
20000936:	2200      	movs	r2, #0
20000938:	701a      	strb	r2, [r3, #0]
2000093a:	e03d      	b.n	200009b8 <draw_buffer+0x10c>
		for (uint8_t x = 64; x<128; x++) {
2000093c:	1d3b      	adds	r3, r7, #4
2000093e:	2240      	movs	r2, #64	; 0x40
20000940:	701a      	strb	r2, [r3, #0]
20000942:	e02f      	b.n	200009a4 <draw_buffer+0xf8>
			graphic_write_command(LCD_SET_ADD | x-64, B_CS2);
20000944:	1d3b      	adds	r3, r7, #4
20000946:	781b      	ldrb	r3, [r3, #0]
20000948:	3b40      	subs	r3, #64	; 0x40
2000094a:	b2db      	uxtb	r3, r3
2000094c:	b25b      	sxtb	r3, r3
2000094e:	2240      	movs	r2, #64	; 0x40
20000950:	4313      	orrs	r3, r2
20000952:	b25b      	sxtb	r3, r3
20000954:	b2db      	uxtb	r3, r3
20000956:	2110      	movs	r1, #16
20000958:	0018      	movs	r0, r3
2000095a:	f7ff fe5d 	bl	20000618 <graphic_write_command>
			graphic_write_command(LCD_SET_PAGE | y, B_CS2);
2000095e:	1d7b      	adds	r3, r7, #5
20000960:	781b      	ldrb	r3, [r3, #0]
20000962:	2248      	movs	r2, #72	; 0x48
20000964:	4252      	negs	r2, r2
20000966:	4313      	orrs	r3, r2
20000968:	b2db      	uxtb	r3, r3
2000096a:	2110      	movs	r1, #16
2000096c:	0018      	movs	r0, r3
2000096e:	f7ff fe53 	bl	20000618 <graphic_write_command>
			graphic_write_data(buffer[y][x], B_CS2);
20000972:	1d7b      	adds	r3, r7, #5
20000974:	781a      	ldrb	r2, [r3, #0]
20000976:	1d3b      	adds	r3, r7, #4
20000978:	781b      	ldrb	r3, [r3, #0]
2000097a:	4914      	ldr	r1, [pc, #80]	; (200009cc <draw_buffer+0x120>)
2000097c:	01d2      	lsls	r2, r2, #7
2000097e:	188a      	adds	r2, r1, r2
20000980:	5cd3      	ldrb	r3, [r2, r3]
20000982:	2110      	movs	r1, #16
20000984:	0018      	movs	r0, r3
20000986:	f7ff fe6a 	bl	2000065e <graphic_write_data>
			
			graphic_write_command(LCD_ON,           B_CS1 | B_CS2);
2000098a:	2118      	movs	r1, #24
2000098c:	203f      	movs	r0, #63	; 0x3f
2000098e:	f7ff fe43 	bl	20000618 <graphic_write_command>
			graphic_write_command(LCD_DISP_START,   B_CS1 | B_CS2);
20000992:	2118      	movs	r1, #24
20000994:	20c0      	movs	r0, #192	; 0xc0
20000996:	f7ff fe3f 	bl	20000618 <graphic_write_command>
		for (uint8_t x = 64; x<128; x++) {
2000099a:	1d3b      	adds	r3, r7, #4
2000099c:	781a      	ldrb	r2, [r3, #0]
2000099e:	1d3b      	adds	r3, r7, #4
200009a0:	3201      	adds	r2, #1
200009a2:	701a      	strb	r2, [r3, #0]
200009a4:	1d3b      	adds	r3, r7, #4
200009a6:	781b      	ldrb	r3, [r3, #0]
200009a8:	b25b      	sxtb	r3, r3
200009aa:	2b00      	cmp	r3, #0
200009ac:	daca      	bge.n	20000944 <draw_buffer+0x98>
	for (uint8_t y = 0; y<8; y++) {
200009ae:	1d7b      	adds	r3, r7, #5
200009b0:	781a      	ldrb	r2, [r3, #0]
200009b2:	1d7b      	adds	r3, r7, #5
200009b4:	3201      	adds	r2, #1
200009b6:	701a      	strb	r2, [r3, #0]
200009b8:	1d7b      	adds	r3, r7, #5
200009ba:	781b      	ldrb	r3, [r3, #0]
200009bc:	2b07      	cmp	r3, #7
200009be:	d9bd      	bls.n	2000093c <draw_buffer+0x90>
		}
	}
}
200009c0:	46c0      	nop			; (mov r8, r8)
200009c2:	46c0      	nop			; (mov r8, r8)
200009c4:	46bd      	mov	sp, r7
200009c6:	b002      	add	sp, #8
200009c8:	bd80      	pop	{r7, pc}
200009ca:	46c0      	nop			; (mov r8, r8)
200009cc:	20000fd8 	ldrdcs	r0, [r0], -r8

200009d0 <init>:


void init() {
200009d0:	b580      	push	{r7, lr}
200009d2:	af00      	add	r7, sp, #0
	#ifdef USBDM
	*((unsigned long *) 0x40023830) = 0x18;
	__asm volatile( " LDR R0,=0x08000209\n BLX R0 \n");
	#endif
    *portModer = 0x55555555; // Set E0-15 to output
200009d4:	4b1e      	ldr	r3, [pc, #120]	; (20000a50 <init+0x80>)
200009d6:	4a1f      	ldr	r2, [pc, #124]	; (20000a54 <init+0x84>)
200009d8:	601a      	str	r2, [r3, #0]
	
	*((unsigned long *) 0x40023830) = 0x18;
200009da:	4b1f      	ldr	r3, [pc, #124]	; (20000a58 <init+0x88>)
200009dc:	2218      	movs	r2, #24
200009de:	601a      	str	r2, [r3, #0]
    // GPIO_D 8-15 ska bli keypad
    // Set MODER
    *GPIO_D_MODER &= 0x0000FFFF;
200009e0:	4b1e      	ldr	r3, [pc, #120]	; (20000a5c <init+0x8c>)
200009e2:	681a      	ldr	r2, [r3, #0]
200009e4:	4b1d      	ldr	r3, [pc, #116]	; (20000a5c <init+0x8c>)
200009e6:	0412      	lsls	r2, r2, #16
200009e8:	0c12      	lsrs	r2, r2, #16
200009ea:	601a      	str	r2, [r3, #0]
    *GPIO_D_MODER |= 0x55000000;
200009ec:	4b1b      	ldr	r3, [pc, #108]	; (20000a5c <init+0x8c>)
200009ee:	681a      	ldr	r2, [r3, #0]
200009f0:	4b1a      	ldr	r3, [pc, #104]	; (20000a5c <init+0x8c>)
200009f2:	21aa      	movs	r1, #170	; 0xaa
200009f4:	05c9      	lsls	r1, r1, #23
200009f6:	430a      	orrs	r2, r1
200009f8:	601a      	str	r2, [r3, #0]
    // Set OTYPER
    *GPIO_D_OTYPER &= 0xFFFF00FF;
200009fa:	4b19      	ldr	r3, [pc, #100]	; (20000a60 <init+0x90>)
200009fc:	681a      	ldr	r2, [r3, #0]
200009fe:	4b18      	ldr	r3, [pc, #96]	; (20000a60 <init+0x90>)
20000a00:	4918      	ldr	r1, [pc, #96]	; (20000a64 <init+0x94>)
20000a02:	400a      	ands	r2, r1
20000a04:	601a      	str	r2, [r3, #0]
    *GPIO_D_OTYPER |= 0x00000F00;
20000a06:	4b16      	ldr	r3, [pc, #88]	; (20000a60 <init+0x90>)
20000a08:	681a      	ldr	r2, [r3, #0]
20000a0a:	4b15      	ldr	r3, [pc, #84]	; (20000a60 <init+0x90>)
20000a0c:	21f0      	movs	r1, #240	; 0xf0
20000a0e:	0109      	lsls	r1, r1, #4
20000a10:	430a      	orrs	r2, r1
20000a12:	601a      	str	r2, [r3, #0]
    
    // Set PUPDR
    *GPIO_D_PUPDR &= 0x0000FFFF;
20000a14:	4b14      	ldr	r3, [pc, #80]	; (20000a68 <init+0x98>)
20000a16:	681a      	ldr	r2, [r3, #0]
20000a18:	4b13      	ldr	r3, [pc, #76]	; (20000a68 <init+0x98>)
20000a1a:	0412      	lsls	r2, r2, #16
20000a1c:	0c12      	lsrs	r2, r2, #16
20000a1e:	601a      	str	r2, [r3, #0]
    *GPIO_D_PUPDR |= 0xFFAA0000;
20000a20:	4b11      	ldr	r3, [pc, #68]	; (20000a68 <init+0x98>)
20000a22:	681a      	ldr	r2, [r3, #0]
20000a24:	4b10      	ldr	r3, [pc, #64]	; (20000a68 <init+0x98>)
20000a26:	4911      	ldr	r1, [pc, #68]	; (20000a6c <init+0x9c>)
20000a28:	430a      	orrs	r2, r1
20000a2a:	601a      	str	r2, [r3, #0]
    
    // GPIO_D 0-7 ska bli 7seg
    // Set MODER
    *GPIO_D_MODER &= 0xFFFF0000;
20000a2c:	4b0b      	ldr	r3, [pc, #44]	; (20000a5c <init+0x8c>)
20000a2e:	681a      	ldr	r2, [r3, #0]
20000a30:	4b0a      	ldr	r3, [pc, #40]	; (20000a5c <init+0x8c>)
20000a32:	0c12      	lsrs	r2, r2, #16
20000a34:	0412      	lsls	r2, r2, #16
20000a36:	601a      	str	r2, [r3, #0]
    *GPIO_D_MODER |= 0x00005555;
20000a38:	4b08      	ldr	r3, [pc, #32]	; (20000a5c <init+0x8c>)
20000a3a:	681a      	ldr	r2, [r3, #0]
20000a3c:	4b07      	ldr	r3, [pc, #28]	; (20000a5c <init+0x8c>)
20000a3e:	490c      	ldr	r1, [pc, #48]	; (20000a70 <init+0xa0>)
20000a40:	430a      	orrs	r2, r1
20000a42:	601a      	str	r2, [r3, #0]
	
	
    graphic_initialize();
20000a44:	f7ff fe43 	bl	200006ce <graphic_initialize>
}
20000a48:	46c0      	nop			; (mov r8, r8)
20000a4a:	46bd      	mov	sp, r7
20000a4c:	bd80      	pop	{r7, pc}
20000a4e:	46c0      	nop			; (mov r8, r8)
20000a50:	40021000 	andmi	r1, r2, r0
20000a54:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000a58:	40023830 	andmi	r3, r2, r0, lsr r8
20000a5c:	40020c00 	andmi	r0, r2, r0, lsl #24
20000a60:	40020c04 	andmi	r0, r2, r4, lsl #24
20000a64:	ffff00ff 			; <UNDEFINED> instruction: 0xffff00ff
20000a68:	40020c0c 	andmi	r0, r2, ip, lsl #24
20000a6c:	ffaa0000 			; <UNDEFINED> instruction: 0xffaa0000
20000a70:	00005555 	andeq	r5, r0, r5, asr r5

20000a74 <keyb>:


unsigned char keyb(void) {
20000a74:	b590      	push	{r4, r7, lr}
20000a76:	b087      	sub	sp, #28
20000a78:	af00      	add	r7, sp, #0
    unsigned char keys[] = {1, 2, 3,10,
20000a7a:	003b      	movs	r3, r7
20000a7c:	4a3f      	ldr	r2, [pc, #252]	; (20000b7c <keyb+0x108>)
20000a7e:	ca13      	ldmia	r2!, {r0, r1, r4}
20000a80:	c313      	stmia	r3!, {r0, r1, r4}
20000a82:	6812      	ldr	r2, [r2, #0]
20000a84:	601a      	str	r2, [r3, #0]
                            4, 5, 6,11,
                            7, 8, 9,12,
                            14,0,15,13};
    char index = 0xFF;
20000a86:	2317      	movs	r3, #23
20000a88:	18fb      	adds	r3, r7, r3
20000a8a:	22ff      	movs	r2, #255	; 0xff
20000a8c:	701a      	strb	r2, [r3, #0]
    char base = 0x10;
20000a8e:	2314      	movs	r3, #20
20000a90:	18fb      	adds	r3, r7, r3
20000a92:	2210      	movs	r2, #16
20000a94:	701a      	strb	r2, [r3, #0]
    for (char row = 0; row<5; row++) {
20000a96:	2316      	movs	r3, #22
20000a98:	18fb      	adds	r3, r7, r3
20000a9a:	2200      	movs	r2, #0
20000a9c:	701a      	strb	r2, [r3, #0]
20000a9e:	e054      	b.n	20000b4a <keyb+0xd6>
        char outVal = base << row;
20000aa0:	2314      	movs	r3, #20
20000aa2:	18fb      	adds	r3, r7, r3
20000aa4:	781a      	ldrb	r2, [r3, #0]
20000aa6:	2316      	movs	r3, #22
20000aa8:	18fb      	adds	r3, r7, r3
20000aaa:	781b      	ldrb	r3, [r3, #0]
20000aac:	409a      	lsls	r2, r3
20000aae:	2113      	movs	r1, #19
20000ab0:	187b      	adds	r3, r7, r1
20000ab2:	701a      	strb	r2, [r3, #0]
        *KB_OUT = outVal;
20000ab4:	4a32      	ldr	r2, [pc, #200]	; (20000b80 <keyb+0x10c>)
20000ab6:	187b      	adds	r3, r7, r1
20000ab8:	781b      	ldrb	r3, [r3, #0]
20000aba:	7013      	strb	r3, [r2, #0]
        char inVal = *KB_IN & 0x0F;
20000abc:	4b31      	ldr	r3, [pc, #196]	; (20000b84 <keyb+0x110>)
20000abe:	781b      	ldrb	r3, [r3, #0]
20000ac0:	b2da      	uxtb	r2, r3
20000ac2:	2012      	movs	r0, #18
20000ac4:	183b      	adds	r3, r7, r0
20000ac6:	210f      	movs	r1, #15
20000ac8:	400a      	ands	r2, r1
20000aca:	701a      	strb	r2, [r3, #0]
        if (inVal != 0) {
20000acc:	183b      	adds	r3, r7, r0
20000ace:	781b      	ldrb	r3, [r3, #0]
20000ad0:	2b00      	cmp	r3, #0
20000ad2:	d034      	beq.n	20000b3e <keyb+0xca>
            char col;
            if (inVal & 0x01) col = 0;
20000ad4:	183b      	adds	r3, r7, r0
20000ad6:	781b      	ldrb	r3, [r3, #0]
20000ad8:	2201      	movs	r2, #1
20000ada:	4013      	ands	r3, r2
20000adc:	d003      	beq.n	20000ae6 <keyb+0x72>
20000ade:	2315      	movs	r3, #21
20000ae0:	18fb      	adds	r3, r7, r3
20000ae2:	2200      	movs	r2, #0
20000ae4:	701a      	strb	r2, [r3, #0]
            if (inVal & 0x02) col = 1;
20000ae6:	2312      	movs	r3, #18
20000ae8:	18fb      	adds	r3, r7, r3
20000aea:	781b      	ldrb	r3, [r3, #0]
20000aec:	2202      	movs	r2, #2
20000aee:	4013      	ands	r3, r2
20000af0:	d003      	beq.n	20000afa <keyb+0x86>
20000af2:	2315      	movs	r3, #21
20000af4:	18fb      	adds	r3, r7, r3
20000af6:	2201      	movs	r2, #1
20000af8:	701a      	strb	r2, [r3, #0]
            if (inVal & 0x04) col = 2;
20000afa:	2312      	movs	r3, #18
20000afc:	18fb      	adds	r3, r7, r3
20000afe:	781b      	ldrb	r3, [r3, #0]
20000b00:	2204      	movs	r2, #4
20000b02:	4013      	ands	r3, r2
20000b04:	d003      	beq.n	20000b0e <keyb+0x9a>
20000b06:	2315      	movs	r3, #21
20000b08:	18fb      	adds	r3, r7, r3
20000b0a:	2202      	movs	r2, #2
20000b0c:	701a      	strb	r2, [r3, #0]
            if (inVal & 0x08) col = 3;
20000b0e:	2312      	movs	r3, #18
20000b10:	18fb      	adds	r3, r7, r3
20000b12:	781b      	ldrb	r3, [r3, #0]
20000b14:	2208      	movs	r2, #8
20000b16:	4013      	ands	r3, r2
20000b18:	d003      	beq.n	20000b22 <keyb+0xae>
20000b1a:	2315      	movs	r3, #21
20000b1c:	18fb      	adds	r3, r7, r3
20000b1e:	2203      	movs	r2, #3
20000b20:	701a      	strb	r2, [r3, #0]
            
            index = row*4+col-4;
20000b22:	2316      	movs	r3, #22
20000b24:	18fb      	adds	r3, r7, r3
20000b26:	781b      	ldrb	r3, [r3, #0]
20000b28:	009b      	lsls	r3, r3, #2
20000b2a:	b2da      	uxtb	r2, r3
20000b2c:	2315      	movs	r3, #21
20000b2e:	18fb      	adds	r3, r7, r3
20000b30:	781b      	ldrb	r3, [r3, #0]
20000b32:	18d3      	adds	r3, r2, r3
20000b34:	b2da      	uxtb	r2, r3
20000b36:	2317      	movs	r3, #23
20000b38:	18fb      	adds	r3, r7, r3
20000b3a:	3a04      	subs	r2, #4
20000b3c:	701a      	strb	r2, [r3, #0]
    for (char row = 0; row<5; row++) {
20000b3e:	2116      	movs	r1, #22
20000b40:	187b      	adds	r3, r7, r1
20000b42:	781a      	ldrb	r2, [r3, #0]
20000b44:	187b      	adds	r3, r7, r1
20000b46:	3201      	adds	r2, #1
20000b48:	701a      	strb	r2, [r3, #0]
20000b4a:	2316      	movs	r3, #22
20000b4c:	18fb      	adds	r3, r7, r3
20000b4e:	781b      	ldrb	r3, [r3, #0]
20000b50:	2b04      	cmp	r3, #4
20000b52:	d9a5      	bls.n	20000aa0 <keyb+0x2c>
        }
    }
    *KB_OUT = 0;
20000b54:	4b0a      	ldr	r3, [pc, #40]	; (20000b80 <keyb+0x10c>)
20000b56:	2200      	movs	r2, #0
20000b58:	701a      	strb	r2, [r3, #0]
    if (index == 0xFF) {
20000b5a:	2317      	movs	r3, #23
20000b5c:	18fb      	adds	r3, r7, r3
20000b5e:	781b      	ldrb	r3, [r3, #0]
20000b60:	2bff      	cmp	r3, #255	; 0xff
20000b62:	d101      	bne.n	20000b68 <keyb+0xf4>
        return 0xFF;
20000b64:	23ff      	movs	r3, #255	; 0xff
20000b66:	e004      	b.n	20000b72 <keyb+0xfe>
    } else {
        return keys[index];
20000b68:	2317      	movs	r3, #23
20000b6a:	18fb      	adds	r3, r7, r3
20000b6c:	781b      	ldrb	r3, [r3, #0]
20000b6e:	003a      	movs	r2, r7
20000b70:	5cd3      	ldrb	r3, [r2, r3]
    }
}
20000b72:	0018      	movs	r0, r3
20000b74:	46bd      	mov	sp, r7
20000b76:	b007      	add	sp, #28
20000b78:	bd90      	pop	{r4, r7, pc}
20000b7a:	46c0      	nop			; (mov r8, r8)
20000b7c:	20001430 	andcs	r1, r0, r0, lsr r4
20000b80:	40020c15 	andmi	r0, r2, r5, lsl ip
20000b84:	40020c11 	andmi	r0, r2, r1, lsl ip

20000b88 <out7seg>:


void out7seg(unsigned char c) {
20000b88:	b5f0      	push	{r4, r5, r6, r7, lr}
20000b8a:	b089      	sub	sp, #36	; 0x24
20000b8c:	af00      	add	r7, sp, #0
20000b8e:	0002      	movs	r2, r0
20000b90:	1dfb      	adds	r3, r7, #7
20000b92:	701a      	strb	r2, [r3, #0]
    char out = 0;
20000b94:	211f      	movs	r1, #31
20000b96:	187b      	adds	r3, r7, r1
20000b98:	2200      	movs	r2, #0
20000b9a:	701a      	strb	r2, [r3, #0]
    if (c<16) {
20000b9c:	1dfb      	adds	r3, r7, #7
20000b9e:	781b      	ldrb	r3, [r3, #0]
20000ba0:	2b0f      	cmp	r3, #15
20000ba2:	d80c      	bhi.n	20000bbe <out7seg+0x36>
        char segCodes[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71};
20000ba4:	200c      	movs	r0, #12
20000ba6:	183b      	adds	r3, r7, r0
20000ba8:	4a09      	ldr	r2, [pc, #36]	; (20000bd0 <out7seg+0x48>)
20000baa:	ca70      	ldmia	r2!, {r4, r5, r6}
20000bac:	c370      	stmia	r3!, {r4, r5, r6}
20000bae:	6812      	ldr	r2, [r2, #0]
20000bb0:	601a      	str	r2, [r3, #0]
        out = segCodes[c];
20000bb2:	1dfb      	adds	r3, r7, #7
20000bb4:	781a      	ldrb	r2, [r3, #0]
20000bb6:	187b      	adds	r3, r7, r1
20000bb8:	1839      	adds	r1, r7, r0
20000bba:	5c8a      	ldrb	r2, [r1, r2]
20000bbc:	701a      	strb	r2, [r3, #0]
    }
    *SEG_OUT = out;
20000bbe:	4a05      	ldr	r2, [pc, #20]	; (20000bd4 <out7seg+0x4c>)
20000bc0:	231f      	movs	r3, #31
20000bc2:	18fb      	adds	r3, r7, r3
20000bc4:	781b      	ldrb	r3, [r3, #0]
20000bc6:	7013      	strb	r3, [r2, #0]
}
20000bc8:	46c0      	nop			; (mov r8, r8)
20000bca:	46bd      	mov	sp, r7
20000bcc:	b009      	add	sp, #36	; 0x24
20000bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
20000bd0:	20001440 	andcs	r1, r0, r0, asr #8
20000bd4:	40020c14 	andmi	r0, r2, r4, lsl ip

20000bd8 <buffer>:
	...

20000fd8 <buffer>:
	...

200013d8 <ball_geometry>:
200013d8:	0000000c 	andeq	r0, r0, ip
200013dc:	0000001e 	andeq	r0, r0, lr, lsl r0
200013e0:	0000001e 	andeq	r0, r0, lr, lsl r0
200013e4:	02000100 	andeq	r0, r0, #0, 2
200013e8:	01010001 	tsteq	r1, r1
200013ec:	03010201 	movweq	r0, #4609	; 0x1201
200013f0:	01020002 	tsteq	r2, r2
200013f4:	03020202 	movweq	r0, #8706	; 0x2202
200013f8:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

2000140c <ball>:
2000140c:	200013d8 	ldrdcs	r1, [r0], -r8
20001410:	00000001 	andeq	r0, r0, r1
20001414:	00000001 	andeq	r0, r0, r1
20001418:	00000032 	andeq	r0, r0, r2, lsr r0
2000141c:	0000001e 	andeq	r0, r0, lr, lsl r0
20001420:	20000031 	andcs	r0, r0, r1, lsr r0
20001424:	2000004b 	andcs	r0, r0, fp, asr #32
20001428:	2000011f 	andcs	r0, r0, pc, lsl r1
2000142c:	20000011 	andcs	r0, r0, r1, lsl r0
20001430:	0a030201 	beq	200c1c3c <ball+0xc0830>
20001434:	0b060504 	bleq	2018284c <ball+0x181440>
20001438:	0c090807 	stceq	8, cr0, [r9], {7}
2000143c:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 2000140c <ball>
20001440:	4f5b063f 	svcmi	0x005b063f
20001444:	077d6d66 	ldrbeq	r6, [sp, -r6, ror #26]!
20001448:	7c776f7f 	ldclvc	15, cr6, [r7], #-508	; 0xfffffe04
2000144c:	71795e39 	cmnvc	r9, r9, lsr lr

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000469 	andeq	r0, r0, r9, ror #8
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000061 	andeq	r0, r0, r1, rrx
  10:	0000ea0c 	andeq	lr, r0, ip, lsl #20
  14:	0001aa00 	andeq	sl, r1, r0, lsl #20
	...
  24:	015a0200 	cmpeq	sl, r0, lsl #4
  28:	01020000 	mrseq	r0, (UNDEF: 2)
  2c:	00003117 	andeq	r3, r0, r7, lsl r1
  30:	08010300 	stmdaeq	r1, {r8, r9}
  34:	0000003f 	andeq	r0, r0, pc, lsr r0
  38:	00002504 	andeq	r2, r0, r4, lsl #10
  3c:	00004e00 	andeq	r4, r0, r0, lsl #28
  40:	004e0500 	subeq	r0, lr, r0, lsl #10
  44:	05070000 	streq	r0, [r7, #-0]
  48:	0000004e 	andeq	r0, r0, lr, asr #32
  4c:	0403007f 	streq	r0, [r3], #-127	; 0xffffff81
  50:	00014307 	andeq	r4, r1, r7, lsl #6
  54:	03a20600 			; <UNDEFINED> instruction: 0x03a20600
  58:	02020000 	andeq	r0, r2, #0
  5c:	00003810 	andeq	r3, r0, r0, lsl r8
  60:	d8030500 	stmdale	r3, {r8, sl}
  64:	0720000b 	streq	r0, [r0, -fp]!
  68:	00000032 	andeq	r0, r0, r2, lsr r0
  6c:	100e0102 	andne	r0, lr, r2, lsl #2
  70:	0000008b 	andeq	r0, r0, fp, lsl #1
  74:	01007808 	tsteq	r0, r8, lsl #16
  78:	00250d0f 	eoreq	r0, r5, pc, lsl #26
  7c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
  80:	10010079 	andne	r0, r1, r9, ror r0
  84:	0000250d 	andeq	r2, r0, sp, lsl #10
  88:	02000100 	andeq	r0, r0, #0, 2
  8c:	00000039 	andeq	r0, r0, r9, lsr r0
  90:	67031101 	strvs	r1, [r3, -r1, lsl #2]
  94:	07000000 	streq	r0, [r0, -r0]
  98:	00000150 	andeq	r0, r0, r0, asr r1
  9c:	10150134 	andsne	r0, r5, r4, lsr r1
  a0:	000000d8 	ldrdeq	r0, [r0], -r8
  a4:	0001f009 	andeq	pc, r1, r9
  a8:	09160100 	ldmdbeq	r6, {r8}
  ac:	000000d8 	ldrdeq	r0, [r0], -r8
  b0:	016a0900 	cmneq	sl, r0, lsl #18
  b4:	17010000 	strne	r0, [r1, -r0]
  b8:	0000d809 	andeq	sp, r0, r9, lsl #16
  bc:	70090400 	andvc	r0, r9, r0, lsl #8
  c0:	01000001 	tsteq	r0, r1
  c4:	00d80918 	sbcseq	r0, r8, r8, lsl r9
  c8:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
  cc:	01007870 	tsteq	r0, r0, ror r8
  d0:	00df0b19 	sbcseq	r0, pc, r9, lsl fp	; <UNPREDICTABLE>
  d4:	000c0000 	andeq	r0, ip, r0
  d8:	6905040a 	stmdbvs	r5, {r1, r3, sl}
  dc:	0400746e 	streq	r7, [r0], #-1134	; 0xfffffb92
  e0:	0000008b 	andeq	r0, r0, fp, lsl #1
  e4:	000000ef 	andeq	r0, r0, pc, ror #1
  e8:	00004e05 	andeq	r4, r0, r5, lsl #28
  ec:	02001300 	andeq	r1, r0, #0, 6
  f0:	00000001 	andeq	r0, r0, r1
  f4:	97031a01 	strls	r1, [r3, -r1, lsl #20]
  f8:	02000000 	andeq	r0, r0, #0
  fc:	00000000 	andeq	r0, r0, r0
 100:	070e1a01 	streq	r1, [lr, -r1, lsl #20]
 104:	0b000001 	bleq	110 <startup-0x1ffffef0>
 108:	00009704 	andeq	r9, r0, r4, lsl #14
 10c:	000a0700 	andeq	r0, sl, r0, lsl #14
 110:	01240000 			; <UNDEFINED> instruction: 0x01240000
 114:	0190101c 	orrseq	r1, r0, ip, lsl r0
 118:	67080000 	strvs	r0, [r8, -r0]
 11c:	01006f65 	tsteq	r0, r5, ror #30
 120:	00fb0f1d 	rscseq	r0, fp, sp, lsl pc
 124:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 128:	0000001a 	andeq	r0, r0, sl, lsl r0
 12c:	d8091e01 	stmdale	r9, {r0, r9, sl, fp, ip}
 130:	04000000 	streq	r0, [r0], #-0
 134:	00001f09 	andeq	r1, r0, r9, lsl #30
 138:	0f1e0100 	svceq	0x001e0100
 13c:	000000d8 	ldrdeq	r0, [r0], -r8
 140:	00570908 	subseq	r0, r7, r8, lsl #18
 144:	1f010000 	svcne	0x00010000
 148:	0000d809 	andeq	sp, r0, r9, lsl #16
 14c:	5c090c00 	stcpl	12, cr0, [r9], {-0}
 150:	01000000 	mrseq	r0, (UNDEF: 0)
 154:	00d80f1f 	sbcseq	r0, r8, pc, lsl pc
 158:	09100000 	ldmdbeq	r0, {}	; <UNPREDICTABLE>
 15c:	0000017b 	andeq	r0, r0, fp, ror r1
 160:	a10d2001 	tstge	sp, r1
 164:	14000001 	strne	r0, [r0], #-1
 168:	0002b309 	andeq	fp, r2, r9, lsl #6
 16c:	0d210100 	stfeqs	f0, [r1, #-0]
 170:	000001a1 	andeq	r0, r0, r1, lsr #3
 174:	000f0918 	andeq	r0, pc, r8, lsl r9	; <UNPREDICTABLE>
 178:	22010000 	andcs	r0, r1, #0
 17c:	0001a10d 	andeq	sl, r1, sp, lsl #2
 180:	4d091c00 	stcmi	12, cr1, [r9, #-0]
 184:	01000000 	mrseq	r0, (UNDEF: 0)
 188:	01bc0d23 			; <UNDEFINED> instruction: 0x01bc0d23
 18c:	00200000 	eoreq	r0, r0, r0
 190:	00019b0c 	andeq	r9, r1, ip, lsl #22
 194:	019b0d00 	orrseq	r0, fp, r0, lsl #26
 198:	0b000000 	bleq	1a0 <startup-0x1ffffe60>
 19c:	00010d04 	andeq	r0, r1, r4, lsl #26
 1a0:	90040b00 	andls	r0, r4, r0, lsl #22
 1a4:	0c000001 	stceq	0, cr0, [r0], {1}
 1a8:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
 1ac:	00019b0d 	andeq	r9, r1, sp, lsl #22
 1b0:	00d80d00 	sbcseq	r0, r8, r0, lsl #26
 1b4:	d80d0000 	stmdale	sp, {}	; <UNPREDICTABLE>
 1b8:	00000000 	andeq	r0, r0, r0
 1bc:	01a7040b 			; <UNDEFINED> instruction: 0x01a7040b
 1c0:	15020000 	strne	r0, [r2, #-0]
 1c4:	01000002 	tsteq	r0, r2
 1c8:	010d0324 	tsteq	sp, r4, lsr #6
 1cc:	14020000 	strne	r0, [r2], #-0
 1d0:	01000002 	tsteq	r0, r2
 1d4:	019b0c24 	orrseq	r0, fp, r4, lsr #24
 1d8:	240e0000 	strcs	r0, [lr], #-0
 1dc:	01000000 	mrseq	r0, (UNDEF: 0)
 1e0:	00ef0a66 	rsceq	r0, pc, r6, ror #20
 1e4:	03050000 	movweq	r0, #20480	; 0x5000
 1e8:	200013d8 	ldrdcs	r1, [r0], -r8
 1ec:	00017606 	andeq	r7, r1, r6, lsl #12
 1f0:	0f700100 	svceq	0x00700100
 1f4:	000001c2 	andeq	r0, r0, r2, asr #3
 1f8:	140c0305 	strne	r0, [ip], #-773	; 0xfffffcfb
 1fc:	2e0f2000 	cdpcs	0, 0, cr2, cr15, cr0, {0}
 200:	01000001 	tsteq	r0, r1
 204:	01ba0682 			; <UNDEFINED> instruction: 0x01ba0682
 208:	011e2000 	tsteq	lr, r0
 20c:	9c010000 	stcls	0, cr0, [r1], {-0}
 210:	0000029b 	muleq	r0, fp, r2
 214:	01007010 	tsteq	r0, r0, lsl r0
 218:	01ce0d83 	biceq	r0, lr, r3, lsl #27
 21c:	91020000 	mrsls	r0, (UNDEF: 2)
 220:	025b0664 	subseq	r0, fp, #100, 12	; 0x6400000
 224:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
 228:	0000250a 	andeq	r2, r0, sl, lsl #10
 22c:	63910200 	orrsvs	r0, r1, #0, 4
 230:	00019706 	andeq	r9, r1, r6, lsl #14
 234:	06950100 	ldreq	r0, [r5], r0, lsl #2
 238:	000000d8 	ldrdeq	r0, [r0], -r8
 23c:	105c9102 	subsne	r9, ip, r2, lsl #2
 240:	97010063 	strls	r0, [r1, -r3, rrx]
 244:	00029b07 	andeq	r9, r2, r7, lsl #22
 248:	5b910200 	blpl	fe440a50 <ball+0xde43f644>
 24c:	0001e011 	andeq	lr, r1, r1, lsl r0
 250:	00002e20 	andeq	r2, r0, r0, lsr #28
 254:	00026700 	andeq	r6, r2, r0, lsl #14
 258:	00691000 	rsbeq	r1, r9, r0
 25c:	d80e8b01 	stmdale	lr, {r0, r8, r9, fp, pc}
 260:	02000000 	andeq	r0, r0, #0
 264:	11006c91 			; <UNDEFINED> instruction: 0x11006c91
 268:	2000020e 	andcs	r0, r0, lr, lsl #4
 26c:	0000002e 	andeq	r0, r0, lr, lsr #32
 270:	00000282 	andeq	r0, r0, r2, lsl #5
 274:	01006910 	tsteq	r0, r0, lsl r9
 278:	00d80e8f 	sbcseq	r0, r8, pc, lsl #29
 27c:	91020000 	mrsls	r0, (UNDEF: 2)
 280:	50120068 	andspl	r0, r2, r8, rrx
 284:	7e200002 	cdpvc	0, 2, cr0, cr0, cr2, {0}
 288:	13000000 	movwne	r0, #0
 28c:	00000180 	andeq	r0, r0, r0, lsl #3
 290:	d803a301 	stmdale	r3, {r0, r8, r9, sp, pc}
 294:	14000000 	strne	r0, [r0], #-0
 298:	03000000 	movweq	r0, #0
 29c:	00480801 	subeq	r0, r8, r1, lsl #16
 2a0:	fa0f0000 	blx	3c02a8 <startup-0x1fc3fd58>
 2a4:	01000001 	tsteq	r0, r1
 2a8:	011e064f 	tsteq	lr, pc, asr #12
 2ac:	009c2000 	addseq	r2, ip, r0
 2b0:	9c010000 	stcls	0, cr0, [r1], {-0}
 2b4:	00000302 	andeq	r0, r0, r2, lsl #6
 2b8:	01006f15 	tsteq	r0, r5, lsl pc
 2bc:	01ce1a4f 	biceq	r1, lr, pc, asr #20
 2c0:	91020000 	mrsls	r0, (UNDEF: 2)
 2c4:	01390664 	teqeq	r9, r4, ror #12
 2c8:	51010000 	mrspl	r0, (UNDEF: 1)
 2cc:	0000d809 	andeq	sp, r0, r9, lsl #16
 2d0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 2d4:	00013e06 	andeq	r3, r1, r6, lsl #28
 2d8:	09520100 	ldmdbeq	r2, {r8}^
 2dc:	000000d8 	ldrdeq	r0, [r0], -r8
 2e0:	06709102 	ldrbteq	r9, [r0], -r2, lsl #2
 2e4:	000000e4 	andeq	r0, r0, r4, ror #1
 2e8:	d8095301 	stmdale	r9, {r0, r8, r9, ip, lr}
 2ec:	02000000 	andeq	r0, r0, #0
 2f0:	dd066c91 	stcle	12, cr6, [r6, #-580]	; 0xfffffdbc
 2f4:	01000000 	mrseq	r0, (UNDEF: 0)
 2f8:	00d80954 	sbcseq	r0, r8, r4, asr r9
 2fc:	91020000 	mrsls	r0, (UNDEF: 2)
 300:	140f0068 	strne	r0, [pc], #-104	; 308 <startup-0x1ffffcf8>
 304:	01000000 	mrseq	r0, (UNDEF: 0)
 308:	00640641 	rsbeq	r0, r4, r1, asr #12
 30c:	00ba2000 	adcseq	r2, sl, r0
 310:	9c010000 	stcls	0, cr0, [r1], {-0}
 314:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
 318:	01006f15 	tsteq	r0, r5, lsl pc
 31c:	01ce1441 	biceq	r1, lr, r1, asr #8
 320:	91020000 	mrsls	r0, (UNDEF: 2)
 324:	01331654 	teqeq	r3, r4, asr r6
 328:	41010000 	mrsmi	r0, (UNDEF: 1)
 32c:	0000d81b 	andeq	sp, r0, fp, lsl r8
 330:	50910200 	addspl	r0, r1, r0, lsl #4
 334:	0000e406 	andeq	lr, r0, r6, lsl #8
 338:	09420100 	stmdbeq	r2, {r8}^
 33c:	000000d8 	ldrdeq	r0, [r0], -r8
 340:	066c9102 	strbteq	r9, [ip], -r2, lsl #2
 344:	000000dd 	ldrdeq	r0, [r0], -sp
 348:	d8094301 	stmdale	r9, {r0, r8, r9, lr}
 34c:	02000000 	andeq	r0, r0, #0
 350:	72106891 	andsvc	r6, r0, #9502720	; 0x910000
 354:	06440100 	strbeq	r0, [r4], -r0, lsl #2
 358:	000000d8 	ldrdeq	r0, [r0], -r8
 35c:	12649102 	rsbne	r9, r4, #-2147483648	; 0x80000000
 360:	2000008a 	andcs	r0, r0, sl, lsl #1
 364:	0000008a 	andeq	r0, r0, sl, lsl #1
 368:	01007910 	tsteq	r0, r0, lsl r9
 36c:	00d80b45 	sbcseq	r0, r8, r5, asr #22
 370:	91020000 	mrsls	r0, (UNDEF: 2)
 374:	00901274 	addseq	r1, r0, r4, ror r2
 378:	00762000 	rsbseq	r2, r6, r0
 37c:	78100000 	ldmdavc	r0, {}	; <UNPREDICTABLE>
 380:	0c460100 	stfeqe	f0, [r6], {-0}
 384:	000000d8 	ldrdeq	r0, [r0], -r8
 388:	12709102 	rsbsne	r9, r0, #-2147483648	; 0x80000000
 38c:	20000096 	mulcs	r0, r6, r0
 390:	00000062 	andeq	r0, r0, r2, rrx
 394:	00727810 	rsbseq	r7, r2, r0, lsl r8
 398:	d8084701 	stmdale	r8, {r0, r8, r9, sl, lr}
 39c:	02000000 	andeq	r0, r0, #0
 3a0:	79106091 	ldmdbvc	r0, {r0, r4, r7, sp, lr}
 3a4:	48010072 	stmdami	r1, {r1, r4, r5, r6}
 3a8:	0000d808 	andeq	sp, r0, r8, lsl #16
 3ac:	5c910200 	lfmpl	f0, 4, [r1], {0}
 3b0:	00000000 	andeq	r0, r0, r0
 3b4:	00019d0f 	andeq	r9, r1, pc, lsl #26
 3b8:	06360100 	ldrteq	r0, [r6], -r0, lsl #2
 3bc:	2000004a 	andcs	r0, r0, sl, asr #32
 3c0:	0000001a 	andeq	r0, r0, sl, lsl r0
 3c4:	03e69c01 	mvneq	r9, #256	; 0x100
 3c8:	6f150000 	svcvs	0x00150000
 3cc:	1b360100 	blne	d807d4 <startup-0x1f27f82c>
 3d0:	000001ce 	andeq	r0, r0, lr, asr #3
 3d4:	13749102 	cmnne	r4, #-2147483648	; 0x80000000
 3d8:	00000014 	andeq	r0, r0, r4, lsl r0
 3dc:	d8033301 	stmdale	r3, {r0, r8, r9, ip, sp}
 3e0:	14000000 	strne	r0, [r0], #-0
 3e4:	e40f0000 	str	r0, [pc], #-0	; 3ec <startup-0x1ffffc14>
 3e8:	01000001 	tsteq	r0, r1
 3ec:	0030062b 	eorseq	r0, r0, fp, lsr #12
 3f0:	001a2000 	andseq	r2, sl, r0
 3f4:	9c010000 	stcls	0, cr0, [r1], {-0}
 3f8:	00000418 	andeq	r0, r0, r8, lsl r4
 3fc:	01006f15 	tsteq	r0, r5, lsl pc
 400:	01ce1a2b 	biceq	r1, lr, fp, lsr #20
 404:	91020000 	mrsls	r0, (UNDEF: 2)
 408:	00141374 	andseq	r1, r4, r4, ror r3
 40c:	33010000 	movwcc	r0, #4096	; 0x1000
 410:	0000d803 	andeq	sp, r0, r3, lsl #16
 414:	00001400 	andeq	r1, r0, r0, lsl #8
 418:	00018c17 	andeq	r8, r1, r7, lsl ip
 41c:	06260100 	strteq	r0, [r6], -r0, lsl #2
 420:	20000010 	andcs	r0, r0, r0, lsl r0
 424:	00000020 	andeq	r0, r0, r0, lsr #32
 428:	045a9c01 	ldrbeq	r9, [sl], #-3073	; 0xfffff3ff
 42c:	6f150000 	svcvs	0x00150000
 430:	1f260100 	svcne	0x00260100
 434:	000001ce 	andeq	r0, r0, lr, asr #3
 438:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
 43c:	00000206 	andeq	r0, r0, r6, lsl #4
 440:	d8262601 	stmdale	r6!, {r0, r9, sl, sp}
 444:	02000000 	andeq	r0, r0, #0
 448:	0d167091 	ldceq	0, cr7, [r6, #-580]	; 0xfffffdbc
 44c:	01000002 	tsteq	r0, r2
 450:	00d83226 	sbcseq	r3, r8, r6, lsr #4
 454:	91020000 	mrsls	r0, (UNDEF: 2)
 458:	6218006c 	andsvs	r0, r8, #108	; 0x6c
 45c:	01000001 	tsteq	r0, r1
 460:	00000604 	andeq	r0, r0, r4, lsl #12
 464:	000c2000 	andeq	r2, ip, r0
 468:	9c010000 	stcls	0, cr0, [r1], {-0}
 46c:	00054300 	andeq	r4, r5, r0, lsl #6
 470:	6c000400 	cfstrsvs	mvf0, [r0], {-0}
 474:	04000001 	streq	r0, [r0], #-1
 478:	00006101 	andeq	r6, r0, r1, lsl #2
 47c:	03120c00 	tsteq	r2, #0, 24
 480:	01aa0000 			; <UNDEFINED> instruction: 0x01aa0000
 484:	02d80000 	sbcseq	r0, r8, #0
 488:	09002000 	stmdbeq	r0, {sp}
 48c:	01f30000 	mvnseq	r0, r0
 490:	5a020000 	bpl	80498 <startup-0x1ff7fb68>
 494:	02000001 	andeq	r0, r0, #1
 498:	00311701 	eorseq	r1, r1, r1, lsl #14
 49c:	01030000 	mrseq	r0, (UNDEF: 3)
 4a0:	00003f08 	andeq	r3, r0, r8, lsl #30
 4a4:	00250400 	eoreq	r0, r5, r0, lsl #8
 4a8:	004e0000 	subeq	r0, lr, r0
 4ac:	4e050000 	cdpmi	0, 0, cr0, cr5, cr0, {0}
 4b0:	07000000 	streq	r0, [r0, -r0]
 4b4:	00004e05 	andeq	r4, r0, r5, lsl #28
 4b8:	03007f00 	movweq	r7, #3840	; 0xf00
 4bc:	01430704 	cmpeq	r3, r4, lsl #14
 4c0:	a2060000 	andge	r0, r6, #0
 4c4:	02000003 	andeq	r0, r0, #3
 4c8:	00381002 	eorseq	r1, r8, r2
 4cc:	03050000 	movweq	r0, #20480	; 0x5000
 4d0:	20000fd8 	ldrdcs	r0, [r0], -r8
 4d4:	0002f707 	andeq	pc, r2, r7, lsl #14
 4d8:	01510100 	cmpeq	r1, r0, lsl #2
 4dc:	000b8806 	andeq	r8, fp, r6, lsl #16
 4e0:	00005020 	andeq	r5, r0, r0, lsr #32
 4e4:	b79c0100 	ldrlt	r0, [ip, r0, lsl #2]
 4e8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 4ec:	51010063 	tstpl	r1, r3, rrx
 4f0:	00311c01 	eorseq	r1, r1, r1, lsl #24
 4f4:	91020000 	mrsls	r0, (UNDEF: 2)
 4f8:	756f094f 	strbvc	r0, [pc, #-2383]!	; fffffbb1 <ball+0xdfffe7a5>
 4fc:	52010074 	andpl	r0, r1, #116	; 0x74
 500:	00b70a01 	adcseq	r0, r7, r1, lsl #20
 504:	91020000 	mrsls	r0, (UNDEF: 2)
 508:	0ba40a67 	bleq	fe902eac <ball+0xde901aa0>
 50c:	001a2000 	andseq	r2, sl, r0
 510:	210b0000 	mrscs	r0, (UNDEF: 11)
 514:	01000002 	tsteq	r0, r2
 518:	be0e0154 	mcrlt	1, 0, r0, cr14, cr4, {2}
 51c:	02000000 	andeq	r0, r0, #0
 520:	00005491 	muleq	r0, r1, r4
 524:	48080103 	stmdami	r8, {r0, r1, r8}
 528:	04000000 	streq	r0, [r0], #-0
 52c:	000000b7 	strheq	r0, [r0], -r7
 530:	000000ce 	andeq	r0, r0, lr, asr #1
 534:	00004e05 	andeq	r4, r0, r5, lsl #28
 538:	0c000f00 	stceq	15, cr0, [r0], {-0}
 53c:	00000356 	andeq	r0, r0, r6, asr r3
 540:	0f013301 	svceq	0x00013301
 544:	00000031 	andeq	r0, r0, r1, lsr r0
 548:	20000a74 	andcs	r0, r0, r4, ror sl
 54c:	00000114 	andeq	r0, r0, r4, lsl r1
 550:	01789c01 	cmneq	r8, r1, lsl #24
 554:	970b0000 	strls	r0, [fp, -r0]
 558:	01000003 	tsteq	r0, r3
 55c:	78130134 	ldmdavc	r3, {r2, r4, r5, r8}
 560:	02000001 	andeq	r0, r0, #1
 564:	f10b5891 			; <UNDEFINED> instruction: 0xf10b5891
 568:	01000002 	tsteq	r0, r2
 56c:	b70a0138 	smladxlt	sl, r8, r1, r0
 570:	02000000 	andeq	r0, r0, #0
 574:	720b6f91 	andvc	r6, fp, #580	; 0x244
 578:	01000002 	tsteq	r0, r2
 57c:	b70a0139 	smladxlt	sl, r9, r1, r0
 580:	02000000 	andeq	r0, r0, #0
 584:	960a6c91 			; <UNDEFINED> instruction: 0x960a6c91
 588:	be20000a 	cdplt	0, 2, cr0, cr0, cr10, {0}
 58c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 590:	00776f72 	rsbseq	r6, r7, r2, ror pc
 594:	0f013a01 	svceq	0x00013a01
 598:	000000b7 	strheq	r0, [r0], -r7
 59c:	0a6e9102 	beq	1ba49ac <startup-0x1e45b654>
 5a0:	20000aa0 	andcs	r0, r0, r0, lsr #21
 5a4:	0000009e 	muleq	r0, lr, r0
 5a8:	0002470b 	andeq	r4, r2, fp, lsl #14
 5ac:	013b0100 	teqeq	fp, r0, lsl #2
 5b0:	0000b70e 	andeq	fp, r0, lr, lsl #14
 5b4:	6b910200 	blvs	fe440dbc <ball+0xde43f9b0>
 5b8:	0002e60b 	andeq	lr, r2, fp, lsl #12
 5bc:	013d0100 	teqeq	sp, r0, lsl #2
 5c0:	0000b70e 	andeq	fp, r0, lr, lsl #14
 5c4:	6a910200 	bvs	fe440dcc <ball+0xde43f9c0>
 5c8:	000ad40a 	andeq	sp, sl, sl, lsl #8
 5cc:	00006a20 	andeq	r6, r0, r0, lsr #20
 5d0:	6f630900 	svcvs	0x00630900
 5d4:	3f01006c 	svccc	0x0001006c
 5d8:	00b71201 	adcseq	r1, r7, r1, lsl #4
 5dc:	91020000 	mrsls	r0, (UNDEF: 2)
 5e0:	0000006d 	andeq	r0, r0, sp, rrx
 5e4:	00310400 	eorseq	r0, r1, r0, lsl #8
 5e8:	01880000 	orreq	r0, r8, r0
 5ec:	4e050000 	cdpmi	0, 0, cr0, cr5, cr0, {0}
 5f0:	0f000000 	svceq	0x00000000
 5f4:	02420d00 	subeq	r0, r2, #0, 26
 5f8:	15010000 	strne	r0, [r1, #-0]
 5fc:	09d00601 	ldmibeq	r0, {r0, r9, sl}^
 600:	00a42000 	adceq	r2, r4, r0
 604:	9c010000 	stcls	0, cr0, [r1], {-0}
 608:	00037e0e 	andeq	r7, r3, lr, lsl #28
 60c:	06fd0100 	ldrbteq	r0, [sp], r0, lsl #2
 610:	200008ac 	andcs	r0, r0, ip, lsr #17
 614:	00000124 	andeq	r0, r0, r4, lsr #2
 618:	02149c01 	andseq	r9, r4, #256	; 0x100
 61c:	b20f0000 	andlt	r0, pc, #0
 620:	82200008 	eorhi	r0, r0, #8
 624:	e3000000 	movw	r0, #0
 628:	10000001 	andne	r0, r0, r1
 62c:	fe010079 	mcr2	0, 0, r0, cr1, cr9, {3}
 630:	0000250f 	andeq	r2, r0, pc, lsl #10
 634:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 638:	0008ba0a 	andeq	fp, r8, sl, lsl #20
 63c:	00006820 	andeq	r6, r0, r0, lsr #16
 640:	00781000 	rsbseq	r1, r8, r0
 644:	2510ff01 	ldrcs	pc, [r0, #-3841]	; 0xfffff0ff
 648:	02000000 	andeq	r0, r0, #0
 64c:	00007691 	muleq	r0, r1, r6
 650:	0009340a 	andeq	r3, r9, sl, lsl #8
 654:	00008c20 	andeq	r8, r0, r0, lsr #24
 658:	00790900 	rsbseq	r0, r9, r0, lsl #18
 65c:	0f010801 	svceq	0x00010801
 660:	00000025 	andeq	r0, r0, r5, lsr #32
 664:	0a759102 	beq	1d64a74 <startup-0x1e29b58c>
 668:	2000093c 	andcs	r0, r0, ip, lsr r9
 66c:	00000072 	andeq	r0, r0, r2, ror r0
 670:	01007809 	tsteq	r0, r9, lsl #16
 674:	25100109 	ldrcs	r0, [r0, #-265]	; 0xfffffef7
 678:	02000000 	andeq	r0, r0, #0
 67c:	00007491 	muleq	r0, r1, r4
 680:	039c1100 	orrseq	r1, ip, #0, 2
 684:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
 688:	00085006 	andeq	r5, r8, r6
 68c:	00005c20 	andeq	r5, r0, r0, lsr #24
 690:	599c0100 	ldmibpl	ip, {r8}
 694:	0a000002 	beq	6a4 <startup-0x1ffff95c>
 698:	20000856 	andcs	r0, r0, r6, asr r8
 69c:	00000048 	andeq	r0, r0, r8, asr #32
 6a0:	01007910 	tsteq	r0, r0, lsl r9
 6a4:	00250ff6 	strdeq	r0, [r5], -r6	; <UNPREDICTABLE>
 6a8:	91020000 	mrsls	r0, (UNDEF: 2)
 6ac:	085e0a77 	ldmdaeq	lr, {r0, r1, r2, r4, r5, r6, r9, fp}^
 6b0:	002e2000 	eoreq	r2, lr, r0
 6b4:	78100000 	ldmdavc	r0, {}	; <UNPREDICTABLE>
 6b8:	10f70100 	rscsne	r0, r7, r0, lsl #2
 6bc:	00000025 	andeq	r0, r0, r5, lsr #32
 6c0:	00769102 	rsbseq	r9, r6, r2, lsl #2
 6c4:	60120000 	andsvs	r0, r2, r0
 6c8:	01000002 	tsteq	r0, r2
 6cc:	078c06e9 	streq	r0, [ip, r9, ror #13]
 6d0:	00c42000 	sbceq	r2, r4, r0
 6d4:	9c010000 	stcls	0, cr0, [r1], {-0}
 6d8:	000002a8 	andeq	r0, r0, r8, lsr #5
 6dc:	01007813 	tsteq	r0, r3, lsl r8
 6e0:	002514e9 	eoreq	r1, r5, r9, ror #9
 6e4:	91020000 	mrsls	r0, (UNDEF: 2)
 6e8:	00791367 	rsbseq	r1, r9, r7, ror #6
 6ec:	251fe901 	ldrcs	lr, [pc, #-2305]	; fffffdf3 <ball+0xdfffe9e7>
 6f0:	02000000 	andeq	r0, r0, #0
 6f4:	73136691 	tstvc	r3, #152043520	; 0x9100000
 6f8:	01007465 	tsteq	r0, r5, ror #8
 6fc:	00252ae9 	eoreq	r2, r5, r9, ror #21
 700:	91020000 	mrsls	r0, (UNDEF: 2)
 704:	02ec0665 	rsceq	r0, ip, #105906176	; 0x6500000
 708:	ec010000 	stc	0, cr0, [r1], {-0}
 70c:	0000250d 	andeq	r2, r0, sp, lsl #10
 710:	6f910200 	svcvs	0x00910200
 714:	03691400 	cmneq	r9, #0, 8
 718:	da010000 	ble	40720 <startup-0x1ffbf8e0>
 71c:	0007240d 	andeq	r2, r7, sp, lsl #8
 720:	00006820 	andeq	r6, r0, r0, lsr #16
 724:	f19c0100 			; <UNDEFINED> instruction: 0xf19c0100
 728:	0a000002 	beq	738 <startup-0x1ffff8c8>
 72c:	2000072a 	andcs	r0, r0, sl, lsr #14
 730:	00000058 	andeq	r0, r0, r8, asr r0
 734:	00021c06 	andeq	r1, r2, r6, lsl #24
 738:	12db0100 	sbcsne	r0, fp, #0, 2
 73c:	00000025 	andeq	r0, r0, r5, lsr #32
 740:	0a779102 	beq	1de4b50 <startup-0x1e21b4b0>
 744:	2000074e 	andcs	r0, r0, lr, asr #14
 748:	00000022 	andeq	r0, r0, r2, lsr #32
 74c:	64646110 	strbtvs	r6, [r4], #-272	; 0xfffffef0
 750:	16de0100 	ldrbne	r0, [lr], r0, lsl #2
 754:	00000025 	andeq	r0, r0, r5, lsr #32
 758:	00769102 	rsbseq	r9, r6, r2, lsl #2
 75c:	8f150000 	svchi	0x00150000
 760:	01000002 	tsteq	r0, r2
 764:	06ce0dca 	strbeq	r0, [lr], sl, asr #27
 768:	00562000 	subseq	r2, r6, r0
 76c:	9c010000 	stcls	0, cr0, [r1], {-0}
 770:	00024e16 	andeq	r4, r2, r6, lsl lr
 774:	10c50100 	sbcne	r0, r5, r0, lsl #2
 778:	00000025 	andeq	r0, r0, r5, lsr #32
 77c:	200006a4 	andcs	r0, r0, r4, lsr #13
 780:	0000002a 	andeq	r0, r0, sl, lsr #32
 784:	032d9c01 			; <UNDEFINED> instruction: 0x032d9c01
 788:	37170000 	ldrcc	r0, [r7, -r0]
 78c:	01000002 	tsteq	r0, r2
 790:	00252ac5 	eoreq	r2, r5, r5, asr #21
 794:	91020000 	mrsls	r0, (UNDEF: 2)
 798:	ff180077 			; <UNDEFINED> instruction: 0xff180077
 79c:	01000002 	tsteq	r0, r2
 7a0:	065e0dbd 			; <UNDEFINED> instruction: 0x065e0dbd
 7a4:	00462000 	subeq	r2, r6, r0
 7a8:	9c010000 	stcls	0, cr0, [r1], {-0}
 7ac:	00000362 	andeq	r0, r0, r2, ror #6
 7b0:	00025b17 	andeq	r5, r2, r7, lsl fp
 7b4:	28bd0100 	ldmfdcs	sp!, {r8}
 7b8:	00000025 	andeq	r0, r0, r5, lsr #32
 7bc:	17779102 	ldrbne	r9, [r7, -r2, lsl #2]!
 7c0:	00000237 	andeq	r0, r0, r7, lsr r2
 7c4:	2536bd01 	ldrcs	fp, [r6, #-3329]!	; 0xfffff2ff
 7c8:	02000000 	andeq	r0, r0, #0
 7cc:	18007691 	stmdane	r0, {r0, r4, r7, r9, sl, ip, sp, lr}
 7d0:	000003a9 	andeq	r0, r0, r9, lsr #7
 7d4:	180db501 	stmdane	sp, {r0, r8, sl, ip, sp, pc}
 7d8:	46200006 	strtmi	r0, [r0], -r6
 7dc:	01000000 	mrseq	r0, (UNDEF: 0)
 7e0:	0003979c 	muleq	r3, ip, r7
 7e4:	03b71700 			; <UNDEFINED> instruction: 0x03b71700
 7e8:	b5010000 	strlt	r0, [r1, #-0]
 7ec:	0000252b 	andeq	r2, r0, fp, lsr #10
 7f0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 7f4:	00023717 	andeq	r3, r2, r7, lsl r7
 7f8:	3cb50100 	ldfccs	f0, [r5]
 7fc:	00000025 	andeq	r0, r0, r5, lsr #32
 800:	00769102 	rsbseq	r9, r6, r2, lsl #2
 804:	00035b18 	andeq	r5, r3, r8, lsl fp
 808:	0da30100 	stfeqs	f0, [r3]
 80c:	200005a4 	andcs	r0, r0, r4, lsr #11
 810:	00000074 	andeq	r0, r0, r4, ror r0
 814:	03cc9c01 	biceq	r9, ip, #256	; 0x100
 818:	2a170000 	bcs	5c0820 <startup-0x1fa3f7e0>
 81c:	01000002 	tsteq	r0, r2
 820:	002523a3 	eoreq	r2, r5, r3, lsr #7
 824:	91020000 	mrsls	r0, (UNDEF: 2)
 828:	02371777 	eorseq	r1, r7, #31195136	; 0x1dc0000
 82c:	a3010000 	movwge	r0, #4096	; 0x1000
 830:	00002532 	andeq	r2, r0, r2, lsr r5
 834:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 838:	038a1600 	orreq	r1, sl, #0, 12
 83c:	90010000 	andls	r0, r1, r0
 840:	00002510 	andeq	r2, r0, r0, lsl r5
 844:	00051400 	andeq	r1, r5, r0, lsl #8
 848:	00009020 	andeq	r9, r0, r0, lsr #32
 84c:	049c0100 	ldreq	r0, [ip], #256	; 0x100
 850:	17000004 	strne	r0, [r0, -r4]
 854:	00000237 	andeq	r0, r0, r7, lsr r2
 858:	25259001 	strcs	r9, [r5, #-1]!
 85c:	02000000 	andeq	r0, r0, #0
 860:	72106f91 	andsvc	r6, r0, #580	; 0x244
 864:	99010076 	stmdbls	r1, {r1, r2, r4, r5, r6}
 868:	0000250d 	andeq	r2, r0, sp, lsl #10
 86c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 870:	02771800 	rsbseq	r1, r7, #0, 16
 874:	7a010000 	bvc	4087c <startup-0x1ffbf784>
 878:	0004a40d 	andeq	sl, r4, sp, lsl #8
 87c:	00007020 	andeq	r7, r0, r0, lsr #32
 880:	349c0100 	ldrcc	r0, [ip], #256	; 0x100
 884:	0a000004 	beq	89c <startup-0x1ffff764>
 888:	200004c6 	andcs	r0, r0, r6, asr #9
 88c:	0000002a 	andeq	r0, r0, sl, lsr #32
 890:	00028a06 	andeq	r8, r2, r6, lsl #20
 894:	11860100 	orrne	r0, r6, r0, lsl #2
 898:	00000025 	andeq	r0, r0, r5, lsr #32
 89c:	00779102 	rsbseq	r9, r7, r2, lsl #2
 8a0:	02301900 	eorseq	r1, r0, #0, 18
 8a4:	6f010000 	svcvs	0x00010000
 8a8:	00043c0d 	andeq	r3, r4, sp, lsl #24
 8ac:	00006820 	andeq	r6, r0, r0, lsr #16
 8b0:	769c0100 	ldrvc	r0, [ip], r0, lsl #2
 8b4:	17000004 	strne	r0, [r0, -r4]
 8b8:	00000237 	andeq	r0, r0, r7, lsr r2
 8bc:	25276f01 	strcs	r6, [r7, #-3841]!	; 0xfffff0ff
 8c0:	02000000 	andeq	r0, r0, #0
 8c4:	ec066f91 	stc	15, cr6, [r6], {145}	; 0x91
 8c8:	01000002 	tsteq	r0, r2
 8cc:	00250d70 	eoreq	r0, r5, r0, ror sp
 8d0:	91020000 	mrsls	r0, (UNDEF: 2)
 8d4:	00631077 	rsbeq	r1, r3, r7, ror r0
 8d8:	250d7301 	strcs	r7, [sp, #-769]	; 0xfffffcff
 8dc:	02000000 	andeq	r0, r0, #0
 8e0:	19007691 	stmdbne	r0, {r0, r4, r7, r9, sl, ip, sp, lr}
 8e4:	000002a2 	andeq	r0, r0, r2, lsr #5
 8e8:	ec0d6701 	stc	7, cr6, [sp], {1}
 8ec:	50200003 	eorpl	r0, r0, r3
 8f0:	01000000 	mrseq	r0, (UNDEF: 0)
 8f4:	0004a79c 	muleq	r4, ip, r7
 8f8:	00781300 	rsbseq	r1, r8, r0, lsl #6
 8fc:	252c6701 	strcs	r6, [ip, #-1793]!	; 0xfffff8ff
 900:	02000000 	andeq	r0, r0, #0
 904:	63106f91 	tstvs	r0, #580	; 0x244
 908:	0d680100 	stfeqe	f0, [r8, #-0]
 90c:	00000025 	andeq	r0, r0, r5, lsr #32
 910:	00779102 	rsbseq	r9, r7, r2, lsl #2
 914:	0002b919 	andeq	fp, r2, r9, lsl r9
 918:	0d5f0100 	ldfeqe	f0, [pc, #-0]	; 920 <startup-0x1ffff6e0>
 91c:	2000039a 	mulcs	r0, sl, r3
 920:	00000052 	andeq	r0, r0, r2, asr r0
 924:	04d89c01 	ldrbeq	r9, [r8], #3073	; 0xc01
 928:	78130000 	ldmdavc	r3, {}	; <UNPREDICTABLE>
 92c:	2a5f0100 	bcs	17c0d34 <startup-0x1e83f2cc>
 930:	00000025 	andeq	r0, r0, r5, lsr #32
 934:	106f9102 	rsbne	r9, pc, r2, lsl #2
 938:	60010063 	andvs	r0, r1, r3, rrx
 93c:	0000250d 	andeq	r2, r0, sp, lsl #10
 940:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 944:	01801a00 	orreq	r1, r0, r0, lsl #20
 948:	52010000 	andpl	r0, r1, #0
 94c:	00036c06 	andeq	r6, r3, r6, lsl #24
 950:	00002e20 	andeq	r2, r0, r0, lsr #28
 954:	fd9c0100 	ldc2	1, cr0, [ip]
 958:	13000004 	movwne	r0, #4
 95c:	0100736d 	tsteq	r0, sp, ror #6
 960:	004e1f52 	subeq	r1, lr, r2, asr pc
 964:	91020000 	mrsls	r0, (UNDEF: 2)
 968:	ce1a0074 	mrcgt	0, 0, r0, cr10, cr4, {3}
 96c:	01000002 	tsteq	r0, r2
 970:	032e0643 			; <UNDEFINED> instruction: 0x032e0643
 974:	003e2000 	eorseq	r2, lr, r0
 978:	9c010000 	stcls	0, cr0, [r1], {-0}
 97c:	00000522 	andeq	r0, r0, r2, lsr #10
 980:	00737513 	rsbseq	r7, r3, r3, lsl r5
 984:	4e1f4301 	cdpmi	3, 1, cr4, cr15, cr1, {0}
 988:	02000000 	andeq	r0, r0, #0
 98c:	1b007491 	blne	1dbd8 <startup-0x1ffe2428>
 990:	00000266 	andeq	r0, r0, r6, ror #4
 994:	1c0d3e01 	stcne	14, cr3, [sp], {1}
 998:	12200003 	eorne	r0, r0, #3
 99c:	01000000 	mrseq	r0, (UNDEF: 0)
 9a0:	02da1c9c 	sbcseq	r1, sl, #156, 24	; 0x9c00
 9a4:	35010000 	strcc	r0, [r1, #-0]
 9a8:	0002d80d 	andeq	sp, r2, sp, lsl #16
 9ac:	00004420 	andeq	r4, r0, r0, lsr #8
 9b0:	009c0100 	addseq	r0, ip, r0, lsl #2

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	13490b39 	movtne	r0, #39737	; 0x9b39
  20:	24030000 	strcs	r0, [r3], #-0
  24:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  28:	000e030b 	andeq	r0, lr, fp, lsl #6
  2c:	01010400 	tsteq	r1, r0, lsl #8
  30:	13011349 	movwne	r1, #4937	; 0x1349
  34:	21050000 	mrscs	r0, (UNDEF: 5)
  38:	2f134900 	svccs	0x00134900
  3c:	0600000b 	streq	r0, [r0], -fp
  40:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  44:	0b3b0b3a 	bleq	ec2d34 <startup-0x1f13d2cc>
  48:	13490b39 	movtne	r0, #39737	; 0x9b39
  4c:	00001802 	andeq	r1, r0, r2, lsl #16
  50:	03011307 	movweq	r1, #4871	; 0x1307
  54:	3a0b0b0e 	bcc	2c2c94 <startup-0x1fd3d36c>
  58:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  5c:	0013010b 	andseq	r0, r3, fp, lsl #2
  60:	000d0800 	andeq	r0, sp, r0, lsl #16
  64:	0b3a0803 	bleq	e82078 <startup-0x1f17df88>
  68:	0b390b3b 	bleq	e42d5c <startup-0x1f1bd2a4>
  6c:	0b381349 	bleq	e04d98 <startup-0x1f1fb268>
  70:	0d090000 	stceq	0, cr0, [r9, #-0]
  74:	3a0e0300 	bcc	380c7c <startup-0x1fc7f384>
  78:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  7c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  80:	0a00000b 	beq	b4 <startup-0x1fffff4c>
  84:	0b0b0024 	bleq	2c011c <startup-0x1fd3fee4>
  88:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
  8c:	0f0b0000 	svceq	0x000b0000
  90:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
  94:	0c000013 	stceq	0, cr0, [r0], {19}
  98:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
  9c:	00001301 	andeq	r1, r0, r1, lsl #6
  a0:	4900050d 	stmdbmi	r0, {r0, r2, r3, r8, sl}
  a4:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
  a8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  ac:	0b3b0b3a 	bleq	ec2d9c <startup-0x1f13d264>
  b0:	13490b39 	movtne	r0, #39737	; 0x9b39
  b4:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  b8:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
  bc:	03193f01 	tsteq	r9, #1, 30
  c0:	3b0b3a0e 	blcc	2ce900 <startup-0x1fd31700>
  c4:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
  c8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  cc:	96184006 	ldrls	r4, [r8], -r6
  d0:	13011942 	movwne	r1, #6466	; 0x1942
  d4:	34100000 	ldrcc	r0, [r0], #-0
  d8:	3a080300 	bcc	200ce0 <startup-0x1fdff320>
  dc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  e0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  e4:	11000018 	tstne	r0, r8, lsl r0
  e8:	0111010b 	tsteq	r1, fp, lsl #2
  ec:	13010612 	movwne	r0, #5650	; 0x1612
  f0:	0b120000 	bleq	4800f8 <startup-0x1fb7ff08>
  f4:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
  f8:	13000006 	movwne	r0, #6
  fc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 100:	0b3a0e03 	bleq	e83914 <startup-0x1f17c6ec>
 104:	0b390b3b 	bleq	e42df8 <startup-0x1f1bd208>
 108:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 10c:	18140000 	ldmdane	r4, {}	; <UNPREDICTABLE>
 110:	15000000 	strne	r0, [r0, #-0]
 114:	08030005 	stmdaeq	r3, {r0, r2}
 118:	0b3b0b3a 	bleq	ec2e08 <startup-0x1f13d1f8>
 11c:	13490b39 	movtne	r0, #39737	; 0x9b39
 120:	00001802 	andeq	r1, r0, r2, lsl #16
 124:	03000516 	movweq	r0, #1302	; 0x516
 128:	3b0b3a0e 	blcc	2ce968 <startup-0x1fd31698>
 12c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 130:	00180213 	andseq	r0, r8, r3, lsl r2
 134:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
 138:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 13c:	0b3b0b3a 	bleq	ec2e2c <startup-0x1f13d1d4>
 140:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 144:	06120111 			; <UNDEFINED> instruction: 0x06120111
 148:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 14c:	00130119 	andseq	r0, r3, r9, lsl r1
 150:	002e1800 	eoreq	r1, lr, r0, lsl #16
 154:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 158:	0b3b0b3a 	bleq	ec2e48 <startup-0x1f13d1b8>
 15c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 160:	06120111 			; <UNDEFINED> instruction: 0x06120111
 164:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 168:	00000019 	andeq	r0, r0, r9, lsl r0
 16c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 170:	030b130e 	movweq	r1, #45838	; 0xb30e
 174:	110e1b0e 	tstne	lr, lr, lsl #22
 178:	10061201 	andne	r1, r6, r1, lsl #4
 17c:	02000017 	andeq	r0, r0, #23
 180:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 184:	0b3b0b3a 	bleq	ec2e74 <startup-0x1f13d18c>
 188:	13490b39 	movtne	r0, #39737	; 0x9b39
 18c:	24030000 	strcs	r0, [r3], #-0
 190:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 194:	000e030b 	andeq	r0, lr, fp, lsl #6
 198:	01010400 	tsteq	r1, r0, lsl #8
 19c:	13011349 	movwne	r1, #4937	; 0x1349
 1a0:	21050000 	mrscs	r0, (UNDEF: 5)
 1a4:	2f134900 	svccs	0x00134900
 1a8:	0600000b 	streq	r0, [r0], -fp
 1ac:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 1b0:	0b3b0b3a 	bleq	ec2ea0 <startup-0x1f13d160>
 1b4:	13490b39 	movtne	r0, #39737	; 0x9b39
 1b8:	00001802 	andeq	r1, r0, r2, lsl #16
 1bc:	3f012e07 	svccc	0x00012e07
 1c0:	3a0e0319 	bcc	380e2c <startup-0x1fc7f1d4>
 1c4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 1c8:	1119270b 	tstne	r9, fp, lsl #14
 1cc:	40061201 	andmi	r1, r6, r1, lsl #4
 1d0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 1d4:	00001301 	andeq	r1, r0, r1, lsl #6
 1d8:	03000508 	movweq	r0, #1288	; 0x508
 1dc:	3b0b3a08 	blcc	2cea04 <startup-0x1fd315fc>
 1e0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 1e4:	00180213 	andseq	r0, r8, r3, lsl r2
 1e8:	00340900 	eorseq	r0, r4, r0, lsl #18
 1ec:	0b3a0803 	bleq	e82200 <startup-0x1f17de00>
 1f0:	0b39053b 	bleq	e416e4 <startup-0x1f1be91c>
 1f4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 1f8:	0b0a0000 	bleq	280200 <startup-0x1fd7fe00>
 1fc:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 200:	0b000006 	bleq	220 <startup-0x1ffffde0>
 204:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 208:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 20c:	13490b39 	movtne	r0, #39737	; 0x9b39
 210:	00001802 	andeq	r1, r0, r2, lsl #16
 214:	3f012e0c 	svccc	0x00012e0c
 218:	3a0e0319 	bcc	380e84 <startup-0x1fc7f17c>
 21c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 220:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 224:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 228:	97184006 	ldrls	r4, [r8, -r6]
 22c:	13011942 	movwne	r1, #6466	; 0x1942
 230:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
 234:	03193f00 	tsteq	r9, #0, 30
 238:	3b0b3a0e 	blcc	2cea78 <startup-0x1fd31588>
 23c:	110b3905 	tstne	fp, r5, lsl #18
 240:	40061201 	andmi	r1, r6, r1, lsl #4
 244:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 248:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
 24c:	03193f01 	tsteq	r9, #1, 30
 250:	3b0b3a0e 	blcc	2cea90 <startup-0x1fd31570>
 254:	110b390b 	tstne	fp, fp, lsl #18
 258:	40061201 	andmi	r1, r6, r1, lsl #4
 25c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 260:	00001301 	andeq	r1, r0, r1, lsl #6
 264:	11010b0f 	tstne	r1, pc, lsl #22
 268:	01061201 	tsteq	r6, r1, lsl #4
 26c:	10000013 	andne	r0, r0, r3, lsl r0
 270:	08030034 	stmdaeq	r3, {r2, r4, r5}
 274:	0b3b0b3a 	bleq	ec2f64 <startup-0x1f13d09c>
 278:	13490b39 	movtne	r0, #39737	; 0x9b39
 27c:	00001802 	andeq	r1, r0, r2, lsl #16
 280:	3f012e11 	svccc	0x00012e11
 284:	3a0e0319 	bcc	380ef0 <startup-0x1fc7f110>
 288:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 28c:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 290:	97184006 	ldrls	r4, [r8, -r6]
 294:	13011942 	movwne	r1, #6466	; 0x1942
 298:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
 29c:	03193f01 	tsteq	r9, #1, 30
 2a0:	3b0b3a0e 	blcc	2ceae0 <startup-0x1fd31520>
 2a4:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 2a8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 2ac:	97184006 	ldrls	r4, [r8, -r6]
 2b0:	13011942 	movwne	r1, #6466	; 0x1942
 2b4:	05130000 	ldreq	r0, [r3, #-0]
 2b8:	3a080300 	bcc	200ec0 <startup-0x1fdff140>
 2bc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2c0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 2c4:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
 2c8:	0e03012e 	adfeqsp	f0, f3, #0.5
 2cc:	0b3b0b3a 	bleq	ec2fbc <startup-0x1f13d044>
 2d0:	01110b39 	tsteq	r1, r9, lsr fp
 2d4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2d8:	01194296 			; <UNDEFINED> instruction: 0x01194296
 2dc:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
 2e0:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
 2e4:	0b3b0b3a 	bleq	ec2fd4 <startup-0x1f13d02c>
 2e8:	01110b39 	tsteq	r1, r9, lsr fp
 2ec:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2f0:	00194296 	mulseq	r9, r6, r2
 2f4:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
 2f8:	0b3a0e03 	bleq	e83b0c <startup-0x1f17c4f4>
 2fc:	0b390b3b 	bleq	e42ff0 <startup-0x1f1bd010>
 300:	13491927 	movtne	r1, #39207	; 0x9927
 304:	06120111 			; <UNDEFINED> instruction: 0x06120111
 308:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 30c:	00130119 	andseq	r0, r3, r9, lsl r1
 310:	00051700 	andeq	r1, r5, r0, lsl #14
 314:	0b3a0e03 	bleq	e83b28 <startup-0x1f17c4d8>
 318:	0b390b3b 	bleq	e4300c <startup-0x1f1bcff4>
 31c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 320:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
 324:	3a0e0301 	bcc	380f30 <startup-0x1fc7f0d0>
 328:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 32c:	1119270b 	tstne	r9, fp, lsl #14
 330:	40061201 	andmi	r1, r6, r1, lsl #4
 334:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 338:	00001301 	andeq	r1, r0, r1, lsl #6
 33c:	03012e19 	movweq	r2, #7705	; 0x1e19
 340:	3b0b3a0e 	blcc	2ceb80 <startup-0x1fd31480>
 344:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 348:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 34c:	97184006 	ldrls	r4, [r8, -r6]
 350:	13011942 	movwne	r1, #6466	; 0x1942
 354:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
 358:	03193f01 	tsteq	r9, #1, 30
 35c:	3b0b3a0e 	blcc	2ceb9c <startup-0x1fd31464>
 360:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 364:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 368:	96184006 	ldrls	r4, [r8], -r6
 36c:	13011942 	movwne	r1, #6466	; 0x1942
 370:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
 374:	3a0e0300 	bcc	380f7c <startup-0x1fc7f084>
 378:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 37c:	1119270b 	tstne	r9, fp, lsl #14
 380:	40061201 	andmi	r1, r6, r1, lsl #4
 384:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 388:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
 38c:	3a0e0300 	bcc	380f94 <startup-0x1fc7f06c>
 390:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 394:	1119270b 	tstne	r9, fp, lsl #14
 398:	40061201 	andmi	r1, r6, r1, lsl #4
 39c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 3a0:	Address 0x000003a0 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000002c8 	andeq	r0, r0, r8, asr #5
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	046d0002 	strbteq	r0, [sp], #-2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	200002d8 	ldrdcs	r0, [r0], -r8
  3c:	00000900 	andeq	r0, r0, r0, lsl #18
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200002d8 	ldrdcs	r0, [r0], -r8
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000001ef 	andeq	r0, r0, pc, ror #3
   4:	00670003 	rsbeq	r0, r7, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	6b697245 	blvs	1a5c940 <startup-0x1e5a36c0>
  28:	6e6f7373 	mcrvs	3, 3, r7, cr15, cr3, {3}
  2c:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
  30:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
  34:	432f7374 			; <UNDEFINED> instruction: 0x432f7374
  38:	6d6c6168 	stfvse	f6, [ip, #-416]!	; 0xfffffe60
  3c:	2f737265 	svccs	0x00737265
  40:	2f504f4d 	svccs	0x00504f4d
  44:	64696f42 	strbtvs	r6, [r9], #-3906	; 0xfffff0be
  48:	69532d73 	ldmdbvs	r3, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
  4c:	616c756d 	cmnvs	ip, sp, ror #10
  50:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
  54:	74730000 	ldrbtvc	r0, [r3], #-0
  58:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  5c:	00632e70 	rsbeq	r2, r3, r0, ror lr
  60:	64000001 	strvs	r0, [r0], #-1
  64:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
  68:	682e7372 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}
  6c:	00000100 	andeq	r0, r0, r0, lsl #2
  70:	00010500 	andeq	r0, r1, r0, lsl #10
  74:	00000205 	andeq	r0, r0, r5, lsl #4
  78:	13162000 	tstne	r6, #0
  7c:	212f2121 			; <UNDEFINED> instruction: 0x212f2121
  80:	01000302 	tsteq	r0, r2, lsl #6
  84:	003a0501 	eorseq	r0, sl, r1, lsl #10
  88:	00100205 	andseq	r0, r0, r5, lsl #4
  8c:	25032000 	strcs	r2, [r3, #-0]
  90:	670d0501 	strvs	r0, [sp, -r1, lsl #10]
  94:	3d01053d 	cfstr32cc	mvfx0, [r1, #-244]	; 0xffffff0c
  98:	054c1d05 	strbeq	r1, [ip, #-3333]	; 0xfffff2fb
  9c:	01055203 	tsteq	r5, r3, lsl #4
  a0:	4c1e0559 	cfldr32mi	mvfx0, [lr], {89}	; 0x59
  a4:	05520305 	ldrbeq	r0, [r2, #-773]	; 0xfffffcfb
  a8:	22055901 	andcs	r5, r5, #16384	; 0x4000
  ac:	5912054c 	ldmdbpl	r2, {r2, r3, r6, r8, sl}
  b0:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
  b4:	09052f13 	stmdbeq	r5, {r0, r1, r4, r8, r9, sl, fp, sp}
  b8:	2f06052e 	svccs	0x0006052e
  bc:	05670b05 	strbeq	r0, [r7, #-2821]!	; 0xfffff4fb
  c0:	0c052e02 	stceq	14, cr2, [r5], {2}
  c4:	2e030521 	cfsh32cs	mvfx0, mvfx3, #17
  c8:	05211405 	streq	r1, [r1, #-1029]!	; 0xfffffbfb
  cc:	15057408 	strne	r7, [r5, #-1032]	; 0xfffffbf8
  d0:	7408053d 	strvc	r0, [r8], #-1341	; 0xfffffac3
  d4:	053d0a05 	ldreq	r0, [sp, #-2565]!	; 0xfffff5fb
  d8:	0d053c10 	stceq	12, cr3, [r5, #-64]	; 0xffffffc0
  dc:	2017052e 	andscs	r0, r7, lr, lsr #10
  e0:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
  e4:	05052f0c 	streq	r2, [r5, #-3852]	; 0xfffff0f4
  e8:	5819052e 	ldmdapl	r9, {r1, r2, r3, r5, r8, sl}
  ec:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
  f0:	0402001b 	streq	r0, [r2], #-27	; 0xffffffe5
  f4:	03059a02 	movweq	r9, #23042	; 0x5a02
  f8:	01040200 	mrseq	r0, R12_usr
  fc:	001b053c 	andseq	r0, fp, ip, lsr r5
 100:	49020402 	stmdbmi	r2, {r1, sl}
 104:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 108:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 10c:	1d055201 	sfmne	f5, 4, [r5, #-4]
 110:	4b05055a 	blmi	141680 <startup-0x1febe980>
 114:	054b1105 	strbeq	r1, [fp, #-261]	; 0xfffffefb
 118:	09052e1b 	stmdbeq	r5, {r0, r1, r3, r4, r9, sl, fp, sp}
 11c:	2f11052e 	svccs	0x0011052e
 120:	052e1b05 	streq	r1, [lr, #-2821]!	; 0xfffff4fb
 124:	12052e09 	andne	r2, r5, #9, 28	; 0x90
 128:	2e09052f 	cfsh32cs	mvfx0, mvfx9, #31
 12c:	052f1305 	streq	r1, [pc, #-773]!	; fffffe2f <ball+0xdfffea23>
 130:	0d052e09 	stceq	14, cr2, [r5, #-36]	; 0xffffffdc
 134:	08053d2f 	stmdaeq	r5, {r0, r1, r2, r3, r5, r8, sl, fp, ip, sp}
 138:	3d11053d 	cfldr32cc	mvfx0, [r1, #-244]	; 0xffffff0c
 13c:	055a0e05 	ldrbeq	r0, [sl, #-3589]	; 0xfffff1fb
 140:	11053c08 	tstne	r5, r8, lsl #24
 144:	5a08052f 	bpl	201608 <startup-0x1fdfe9f8>
 148:	053d1105 	ldreq	r1, [sp, #-261]!	; 0xfffffefb
 14c:	08055a0e 	stmdaeq	r5, {r1, r2, r3, r9, fp, ip, lr}
 150:	2f11053c 	svccs	0x0011053c
 154:	055a0505 	ldrbeq	r0, [sl, #-1285]	; 0xfffffafb
 158:	11054b01 	tstne	r5, r1, lsl #22
 15c:	054a1e03 	strbeq	r1, [sl, #-3587]	; 0xfffff1fd
 160:	02053d0d 	andeq	r3, r5, #832	; 0x340
 164:	052f302f 	streq	r3, [pc, #-47]!	; 13d <startup-0x1ffffec3>
 168:	0e05590a 	vmlaeq.f16	s10, s10, s20	; <UNPREDICTABLE>
 16c:	2e05055b 	cfrshl32cs	mvfx5, mvfx11, r0
 170:	02000905 	andeq	r0, r0, #81920	; 0x14000
 174:	00210304 	eoreq	r0, r1, r4, lsl #6
 178:	75030402 	strvc	r0, [r3, #-1026]	; 0xfffffbfe
 17c:	02001f05 	andeq	r1, r0, #5, 30
 180:	05720304 	ldrbeq	r0, [r2, #-772]!	; 0xfffffcfc
 184:	04020005 	streq	r0, [r2], #-5
 188:	0e053c01 	cdpeq	12, 0, cr3, cr5, cr1, {0}
 18c:	2e050540 	cfsh32cs	mvfx0, mvfx5, #32
 190:	02000905 	andeq	r0, r0, #81920	; 0x14000
 194:	00210304 	eoreq	r0, r1, r4, lsl #6
 198:	75030402 	strvc	r0, [r3, #-1026]	; 0xfffffbfe
 19c:	02001e05 	andeq	r1, r0, #5, 28	; 0x50
 1a0:	05720304 	ldrbeq	r0, [r2, #-772]!	; 0xfffffcfc
 1a4:	04020005 	streq	r0, [r2], #-5
 1a8:	05403c01 	strbeq	r3, [r0, #-3073]	; 0xfffff3ff
 1ac:	052f3006 	streq	r3, [pc, #-6]!	; 1ae <startup-0x1ffffe52>
 1b0:	0a052e05 	beq	14b9cc <startup-0x1feb4634>
 1b4:	2e09054d 	cfsh32cs	mvfx0, mvfx9, #45
 1b8:	053d0705 	ldreq	r0, [sp, #-1797]!	; 0xfffff8fb
 1bc:	05595903 	ldrbeq	r5, [r9, #-2307]	; 0xfffff6fd
 1c0:	0c05c90d 			; <UNDEFINED> instruction: 0x0c05c90d
 1c4:	4a04052e 	bmi	101684 <startup-0x1fefe97c>
 1c8:	05210d05 	streq	r0, [r1, #-3333]!	; 0xfffff2fb
 1cc:	04052e0c 	streq	r2, [r5], #-3596	; 0xfffff1f4
 1d0:	210d0558 	tstcs	sp, r8, asr r5
 1d4:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
 1d8:	0d055804 	stceq	8, cr5, [r5, #-16]
 1dc:	2e0c0521 	cfsh32cs	mvfx0, mvfx12, #17
 1e0:	054a0405 	strbeq	r0, [sl, #-1029]	; 0xfffffbfb
 1e4:	03052202 	movweq	r2, #20994	; 0x5202
 1e8:	030e052f 	movweq	r0, #58671	; 0xe52f
 1ec:	05023c75 	streq	r3, [r2, #-3189]	; 0xfffff38b
 1f0:	0b010100 	bleq	405f8 <startup-0x1ffbfa08>
 1f4:	03000004 	movweq	r0, #4
 1f8:	00006700 	andeq	r6, r0, r0, lsl #14
 1fc:	fb010200 	blx	40a06 <startup-0x1ffbf5fa>
 200:	01000d0e 	tsteq	r0, lr, lsl #26
 204:	00010101 	andeq	r0, r1, r1, lsl #2
 208:	00010000 	andeq	r0, r1, r0
 20c:	3a430100 	bcc	10c0614 <startup-0x1ef3f9ec>
 210:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 214:	452f7372 	strmi	r7, [pc, #-882]!	; fffffeaa <ball+0xdfffea9e>
 218:	736b6972 	cmnvc	fp, #1867776	; 0x1c8000
 21c:	2f6e6f73 	svccs	0x006e6f73
 220:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 224:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 228:	68432f73 	stmdavs	r3, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp}^
 22c:	656d6c61 	strbvs	r6, [sp, #-3169]!	; 0xfffff39f
 230:	4d2f7372 	stcmi	3, cr7, [pc, #-456]!	; 70 <startup-0x1fffff90>
 234:	422f504f 	eormi	r5, pc, #79	; 0x4f
 238:	7364696f 	cmnvc	r4, #1818624	; 0x1bc000
 23c:	6d69532d 	stclvs	3, cr5, [r9, #-180]!	; 0xffffff4c
 240:	74616c75 	strbtvc	r6, [r1], #-3189	; 0xfffff38b
 244:	006e6f69 	rsbeq	r6, lr, r9, ror #30
 248:	69726400 	ldmdbvs	r2!, {sl, sp, lr}^
 24c:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 250:	0100632e 	tsteq	r0, lr, lsr #6
 254:	72640000 	rsbvc	r0, r4, #0
 258:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 25c:	00682e73 	rsbeq	r2, r8, r3, ror lr
 260:	00000001 	andeq	r0, r0, r1
 264:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
 268:	0002d802 	andeq	sp, r2, r2, lsl #16
 26c:	01340320 	teqeq	r4, r0, lsr #6
 270:	052f0505 	streq	r0, [pc, #-1285]!	; fffffd73 <ball+0xdfffe967>
 274:	0505200f 	streq	r2, [r5, #-15]
 278:	200f052f 	andcs	r0, pc, pc, lsr #10
 27c:	052f0505 	streq	r0, [pc, #-1285]!	; fffffd7f <ball+0xdfffe973>
 280:	0505200e 	streq	r2, [r5, #-14]
 284:	200f052f 	andcs	r0, pc, pc, lsr #10
 288:	052f0a05 	streq	r0, [pc, #-2565]!	; fffff88b <ball+0xdfffe47f>
 28c:	0402000c 	streq	r0, [r2], #-12
 290:	16052001 	strne	r2, [r5], -r1
 294:	01040200 	mrseq	r0, R12_usr
 298:	000a052e 	andeq	r0, sl, lr, lsr #10
 29c:	3c010402 	cfstrscc	mvf0, [r1], {2}
 2a0:	05210505 	streq	r0, [r1, #-1285]!	; 0xfffffafb
 2a4:	0105200f 	tsteq	r5, pc
 2a8:	a01f052f 	andsge	r0, pc, pc, lsr #10
 2ac:	2f2f0505 	svccs	0x002f0505
 2b0:	052f0105 	streq	r0, [pc, #-261]!	; 1b3 <startup-0x1ffffe4d>
 2b4:	0c053e23 	stceq	14, cr3, [r5], {35}	; 0x23
 2b8:	5910054c 	ldmdbpl	r0, {r2, r3, r6, r8, sl}
 2bc:	05310b05 	ldreq	r0, [r1, #-2821]!	; 0xfffff4fb
 2c0:	2f2f2109 	svccs	0x002f2109
 2c4:	2f0b052f 	svccs	0x000b052f
 2c8:	43010537 	movwmi	r0, #5431	; 0x1537
 2cc:	055a2305 	ldrbeq	r2, [sl, #-773]	; 0xfffffcfb
 2d0:	0b054c0c 	bleq	153308 <startup-0x1feaccf8>
 2d4:	21090530 	tstcs	r9, r0, lsr r5
 2d8:	3a590b05 	bcc	1642ef4 <startup-0x1e9bd10c>
 2dc:	05400105 	strbeq	r0, [r0, #-261]	; 0xfffffefb
 2e0:	09055d2d 	stmdbeq	r5, {r0, r2, r3, r5, r8, sl, fp, ip, lr}
 2e4:	20070568 	andcs	r0, r7, r8, ror #10
 2e8:	6715054b 	ldrvs	r0, [r5, -fp, asr #10]
 2ec:	05660705 	strbeq	r0, [r6, #-1797]!	; 0xfffff8fb
 2f0:	11057505 	tstne	r5, r5, lsl #10
 2f4:	3d010520 	cfstr32cc	mvfx0, [r1, #-128]	; 0xffffff80
 2f8:	05762f05 	ldrbeq	r2, [r6, #-3845]!	; 0xfffff0fb
 2fc:	07056809 	streq	r6, [r5, -r9, lsl #16]
 300:	05674b20 	strbeq	r4, [r7, #-2848]!	; 0xfffff4e0
 304:	1105bb05 	tstne	r5, r5, lsl #22
 308:	3d010520 	cfstr32cc	mvfx0, [r1, #-128]	; 0xffffff80
 30c:	05763305 	ldrbeq	r3, [r6, #-773]!	; 0xfffffcfb
 310:	1005670d 	andne	r6, r5, sp, lsl #14
 314:	7709054b 	strvc	r0, [r9, -fp, asr #10]
 318:	4b200705 	blmi	801f34 <startup-0x1f7fe0cc>
 31c:	830505bb 	movwhi	r0, #21947	; 0x55bb
 320:	05201105 	streq	r1, [r0, #-261]!	; 0xfffffefb
 324:	26053d01 	strcs	r3, [r5], -r1, lsl #26
 328:	3d050568 	cfstr32cc	mvfx0, [r5, #-416]	; 0xfffffe60
 32c:	2010053d 	andscs	r0, r0, sp, lsr r5
 330:	3d2f0505 	cfstr32cc	mvfx0, [pc, #-20]!	; 324 <startup-0x1ffffcdc>
 334:	3109053d 	tstcc	r9, sp, lsr r5
 338:	053d2f3d 	ldreq	r2, [sp, #-3901]!	; 0xfffff0c3
 33c:	11052f18 	tstne	r5, r8, lsl pc
 340:	3d0e0520 	cfstr32cc	mvfx0, [lr, #-128]	; 0xffffff80
 344:	05680d05 	strbeq	r0, [r8, #-3333]!	; 0xfffff2fb
 348:	053d2305 	ldreq	r2, [sp, #-773]!	; 0xfffffcfb
 34c:	01052010 	tsteq	r5, r0, lsl r0
 350:	bc31052f 	cfldr32lt	mvfx0, [r1], #-188	; 0xffffff44
 354:	3d670505 	cfstr64cc	mvdx0, [r7, #-20]!	; 0xffffffec
 358:	05201005 	streq	r1, [r0, #-5]!
 35c:	3d3d2f05 	ldccc	15, cr2, [sp, #-20]!	; 0xffffffec
 360:	053d2f59 	ldreq	r2, [sp, #-3929]!	; 0xfffff0a7
 364:	0d052f12 	stceq	15, cr2, [r5, #-72]	; 0xffffffb8
 368:	4b050520 	blmi	1417f0 <startup-0x1febe810>
 36c:	2010053d 	andscs	r0, r0, sp, lsr r5
 370:	052f0805 	streq	r0, [pc, #-2053]!	; fffffb73 <ball+0xdfffe767>
 374:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
 378:	09054a01 	stmdbeq	r5, {r0, r9, fp, lr}
 37c:	0c05594b 			; <UNDEFINED> instruction: 0x0c05594b
 380:	3d010530 	cfstr32cc	mvfx0, [r1, #-192]	; 0xffffff40
 384:	05ca3e05 	strbeq	r3, [sl, #3589]	; 0xe05
 388:	12059105 	andne	r9, r5, #1073741825	; 0x40000001
 38c:	3d050520 	cfstr32cc	mvfx0, [r5, #-128]	; 0xffffff80
 390:	2f3d2f59 	svccs	0x003d2f59
 394:	053e0805 	ldreq	r0, [lr, #-2053]!	; 0xfffff7fb
 398:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
 39c:	09054a01 	stmdbeq	r5, {r0, r9, fp, lr}
 3a0:	0505594b 	streq	r5, [r5, #-2379]	; 0xfffff6b5
 3a4:	20120531 	andscs	r0, r2, r1, lsr r5
 3a8:	3d2f0505 	cfstr32cc	mvfx0, [pc, #-20]!	; 39c <startup-0x1ffffc64>
 3ac:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 3b0:	05056848 	streq	r6, [r5, #-2120]	; 0xfffff7b8
 3b4:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 3b8:	8301053d 	movwhi	r0, #5437	; 0x153d
 3bc:	054c4205 	strbeq	r4, [ip, #-517]	; 0xfffffdfb
 3c0:	593d9105 	ldmdbpl	sp!, {r0, r2, r8, ip, pc}
 3c4:	01053d3d 	tsteq	r5, sp, lsr sp
 3c8:	4c360583 	cfldr32mi	mvfx0, [r6], #-524	; 0xfffffdf4
 3cc:	05670505 	strbeq	r0, [r7, #-1285]!	; 0xfffffafb
 3d0:	0105590c 	tsteq	r5, ip, lsl #18
 3d4:	4c220567 	cfstr32mi	mvfx0, [r2], #-412	; 0xfffffe64
 3d8:	3d2f0505 	cfstr32cc	mvfx0, [pc, #-20]!	; 3cc <startup-0x1ffffc34>
 3dc:	3e3d3d3d 	mrccc	13, 1, r3, cr13, cr13, {1}
 3e0:	4b4b4b4b 	blmi	12d3114 <startup-0x1ed2ceec>
 3e4:	3d01054c 	cfstr32cc	mvfx0, [r1, #-304]	; 0xfffffed0
 3e8:	053e2405 	ldreq	r2, [lr, #-1029]!	; 0xfffffbfb
 3ec:	05053d12 	streq	r3, [r5, #-3346]	; 0xfffff2ee
 3f0:	2109053c 	tstcs	r9, ip, lsr r5
 3f4:	4b16059f 	blmi	581a78 <startup-0x1fa7e588>
 3f8:	053c0905 	ldreq	r0, [ip, #-2309]!	; 0xfffff6fb
 3fc:	0402000d 	streq	r0, [r2], #-13
 400:	2c052103 	stfcss	f2, [r5], {3}
 404:	03040200 	movweq	r0, #16896	; 0x4200
 408:	00090549 	andeq	r0, r9, r9, asr #10
 40c:	58010402 	stmdapl	r1, {r1, sl}
 410:	02002a05 	andeq	r2, r0, #20480	; 0x5000
 414:	05470204 	strbeq	r0, [r7, #-516]	; 0xfffffdfc
 418:	04020005 	streq	r0, [r2], #-5
 41c:	01055801 	tsteq	r5, r1, lsl #16
 420:	5f2f0551 	svcpl	0x002f0551
 424:	05e50705 	strbeq	r0, [r5, #1797]!	; 0x705
 428:	0c053c05 	stceq	12, cr3, [r5], {5}
 42c:	02040200 	andeq	r0, r4, #0, 4
 430:	4c1c052e 	cfldr32mi	mvfx0, [ip], {46}	; 0x2e
 434:	054a1605 	strbeq	r1, [sl, #-1541]	; 0xfffff9fb
 438:	05052e0d 	streq	r2, [r5, #-3597]	; 0xfffff1f3
 43c:	4b12053e 	blmi	48193c <startup-0x1fb7e6c4>
 440:	15057608 	strne	r7, [r5, #-1544]	; 0xfffff9f8
 444:	c8087903 	stmdagt	r8, {r0, r1, r8, fp, ip, sp, lr}
 448:	09030105 	stmdbeq	r3, {r0, r2, r8}
 44c:	68150520 	ldmdavs	r5, {r5, r8, sl}
 450:	053d0f05 	ldreq	r0, [sp, #-3845]!	; 0xfffff0fb
 454:	10053c02 	andne	r3, r5, r2, lsl #24
 458:	3c030521 	cfstr32cc	mvfx0, [r3], {33}	; 0x21
 45c:	02000d05 	andeq	r0, r0, #320	; 0x140
 460:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 464:	04020011 	streq	r0, [r2], #-17	; 0xffffffef
 468:	1f054a03 	svcne	0x00054a03
 46c:	03040200 	movweq	r0, #16896	; 0x4200
 470:	00180557 	andseq	r0, r8, r7, asr r5
 474:	58010402 	stmdapl	r1, {r1, sl}
 478:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 47c:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 480:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
 484:	02052d02 	andeq	r2, r5, #2, 26	; 0x80
 488:	01040200 	mrseq	r0, R12_usr
 48c:	4f010558 	svcmi	0x00010558
 490:	05761405 	ldrbeq	r1, [r6, #-1029]!	; 0xfffffbfb
 494:	02053d0f 	andeq	r3, r5, #960	; 0x3c0
 498:	2110053c 	tstcs	r0, ip, lsr r5
 49c:	053c0305 	ldreq	r0, [ip, #-773]!	; 0xfffffcfb
 4a0:	04020004 	streq	r0, [r2], #-4
 4a4:	02002103 	andeq	r2, r0, #-1073741824	; 0xc0000000
 4a8:	00910304 	addseq	r0, r1, r4, lsl #6
 4ac:	9f030402 	svcls	0x00030402
 4b0:	03040200 	movweq	r0, #16896	; 0x4200
 4b4:	040200bc 	streq	r0, [r2], #-188	; 0xffffff44
 4b8:	1e054b03 	vmlane.f64	d4, d5, d3
 4bc:	03040200 	movweq	r0, #16896	; 0x4200
 4c0:	054a7a03 	strbeq	r7, [sl, #-2563]	; 0xfffff5fd
 4c4:	04020003 	streq	r0, [r2], #-3
 4c8:	1c055801 	stcne	8, cr5, [r5], {1}
 4cc:	02040200 	andeq	r0, r4, #0, 4
 4d0:	00020549 	andeq	r0, r2, r9, asr #10
 4d4:	58010402 	stmdapl	r1, {r1, sl}
 4d8:	0a030f05 	beq	c40f4 <startup-0x1ff3bf0c>
 4dc:	3c02054a 	cfstr32cc	mvfx0, [r2], {74}	; 0x4a
 4e0:	05211005 	streq	r1, [r1, #-5]!
 4e4:	29053c03 	stmdbcs	r5, {r0, r1, sl, fp, ip, sp}
 4e8:	03040200 	movweq	r0, #16896	; 0x4200
 4ec:	00260521 	eoreq	r0, r6, r1, lsr #10
 4f0:	58030402 	stmdapl	r3, {r1, sl}
 4f4:	02000405 	andeq	r0, r0, #83886080	; 0x5000000
 4f8:	003c0304 	eorseq	r0, ip, r4, lsl #6
 4fc:	59030402 	stmdbpl	r3, {r1, sl}
 500:	03040200 	movweq	r0, #16896	; 0x4200
 504:	0402009f 	streq	r0, [r2], #-159	; 0xffffff61
 508:	0200bc03 	andeq	fp, r0, #768	; 0x300
 50c:	054b0304 	strbeq	r0, [fp, #-772]	; 0xfffffcfc
 510:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
 514:	4a7a0303 	bmi	1e81128 <startup-0x1e17eed8>
 518:	02001905 	andeq	r1, r0, #81920	; 0x14000
 51c:	05580104 	ldrbeq	r0, [r8, #-260]	; 0xfffffefc
 520:	04020003 	streq	r0, [r2], #-3
 524:	1c053c01 	stcne	12, cr3, [r5], {1}
 528:	02040200 	andeq	r0, r4, #0, 4
 52c:	0002052d 	andeq	r0, r2, sp, lsr #10
 530:	58010402 	stmdapl	r1, {r1, sl}
 534:	0a030105 	beq	c0950 <startup-0x1ff3f6b0>
 538:	850d054a 	strhi	r0, [sp, #-1354]	; 0xfffffab6
 53c:	05330505 	ldreq	r0, [r3, #-1285]!	; 0xfffffafb
 540:	02052010 	andeq	r2, r5, #16
 544:	20220530 	eorcs	r0, r2, r0, lsr r5
 548:	67311305 	ldrvs	r1, [r1, -r5, lsl #6]!
 54c:	67761405 	ldrbvs	r1, [r6, -r5, lsl #8]!
 550:	67771305 	ldrbvs	r1, [r7, -r5, lsl #6]!
 554:	0505676a 	streq	r6, [r5, #-1898]	; 0xfffff896
 558:	2f010569 	svccs	0x00010569
 55c:	5b081a05 	blpl	206d78 <startup-0x1fdf9288>
 560:	053d1305 	ldreq	r1, [sp, #-773]!	; 0xfffffcfb
 564:	054b6a0a 	strbeq	r6, [fp, #-2570]	; 0xfffff5f6
 568:	05054b0f 	streq	r4, [r5, #-2831]	; 0xfffff4f1
 56c:	211c054a 	tstcs	ip, sl, asr #10
 570:	05740e05 	ldrbeq	r0, [r4, #-3589]!	; 0xfffff1fb
 574:	11053d09 	tstne	r5, r9, lsl #26
 578:	3d1d0520 	cfldr32cc	mvfx0, [sp, #-128]	; 0xffffff80
 57c:	053c0e05 	ldreq	r0, [ip, #-3589]!	; 0xfffff1fb
 580:	1705590c 	strne	r5, [r5, -ip, lsl #18]
 584:	4a10054c 	bmi	401abc <startup-0x1fbfe544>
 588:	02002305 	andeq	r2, r0, #335544320	; 0x14000000
 58c:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 590:	10054b17 	andne	r4, r5, r7, lsl fp
 594:	00230558 	eoreq	r0, r3, r8, asr r5
 598:	20010402 	andcs	r0, r1, r2, lsl #8
 59c:	054b1705 	strbeq	r1, [fp, #-1797]	; 0xfffff8fb
 5a0:	23055810 	movwcs	r5, #22544	; 0x5810
 5a4:	01040200 	mrseq	r0, R12_usr
 5a8:	4b170520 	blmi	5c1a30 <startup-0x1fa3e5d0>
 5ac:	05581005 	ldrbeq	r1, [r8, #-5]
 5b0:	04020023 	streq	r0, [r2], #-35	; 0xffffffdd
 5b4:	1a052001 	bne	1485c0 <startup-0x1feb7a40>
 5b8:	9e13054c 	cfmac32ls	mvfx0, mvfx3, mvfx12
 5bc:	02002205 	andeq	r2, r0, #1342177280	; 0x50000000
 5c0:	75030204 	strvc	r0, [r3, #-516]	; 0xfffffdfc
 5c4:	0005054a 	andeq	r0, r5, sl, asr #10
 5c8:	66010402 	strvs	r0, [r1], -r2, lsl #8
 5cc:	05580e03 	ldrbeq	r0, [r8, #-3587]	; 0xfffff1fd
 5d0:	0805200d 	stmdaeq	r5, {r0, r2, r3, sp}
 5d4:	5910052f 	ldmdbpl	r0, {r0, r1, r2, r3, r5, r8, sl}
 5d8:	05301405 	ldreq	r1, [r0, #-1029]!	; 0xfffffbfb
 5dc:	04020001 	streq	r0, [r2], #-1
 5e0:	1f055a01 	svcne	0x00055a01
 5e4:	670a05af 	strvs	r0, [sl, -pc, lsr #11]
 5e8:	054b0805 	strbeq	r0, [fp, #-2053]	; 0xfffff7fb
 5ec:	17054b0e 	strne	r4, [r5, -lr, lsl #22]
 5f0:	2e0d0575 	cfrshl64cs	mvdx13, mvdx5, r0
 5f4:	054c0505 	strbeq	r0, [ip, #-1285]	; 0xfffffafb
 5f8:	0105200e 	tsteq	r5, lr
 5fc:	0008024b 	andeq	r0, r8, fp, asr #4
 600:	Address 0x00000600 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	4f454750 	svcmi	0x00454750
   4:	5254454d 	subspl	r4, r4, #322961408	; 0x13400000
   8:	4f740059 	svcmi	0x00740059
   c:	6d006a62 	vstrvs	s12, [r0, #-392]	; 0xfffffe78
  10:	0065766f 	rsbeq	r7, r5, pc, ror #12
  14:	6e696170 	mcrvs	1, 3, r6, cr9, cr0, {3}
  18:	69640074 	stmdbvs	r4!, {r2, r4, r5, r6}^
  1c:	64007872 	strvs	r7, [r0], #-2162	; 0xfffff78e
  20:	00797269 	rsbseq	r7, r9, r9, ror #4
  24:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
  28:	6f65675f 	svcvs	0x0065675f
  2c:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
  30:	50740079 	rsbspl	r0, r4, r9, ror r0
  34:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
  38:	494f5000 	stmdbmi	pc, {ip, lr}^	; <UNPREDICTABLE>
  3c:	7500544e 	strvc	r5, [r0, #-1102]	; 0xfffffbb2
  40:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
  44:	2064656e 	rsbcs	r6, r4, lr, ror #10
  48:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
  4c:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
  50:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
  54:	70006465 	andvc	r6, r0, r5, ror #8
  58:	0078736f 	rsbseq	r7, r8, pc, ror #6
  5c:	79736f70 	ldmdbvc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
  60:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
  64:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
  68:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  6c:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  70:	31393130 	teqcc	r9, r0, lsr r1
  74:	20353230 	eorscs	r3, r5, r0, lsr r2
  78:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  7c:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  80:	415b2029 	cmpmi	fp, r9, lsr #32
  84:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  88:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  8c:	6172622d 	cmnvs	r2, sp, lsr #4
  90:	2068636e 	rsbcs	r6, r8, lr, ror #6
  94:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  98:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  9c:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  a0:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
  a4:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
  a8:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
  ac:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
  b0:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
  b4:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
  b8:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
  bc:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
  c0:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
  c4:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  c8:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
  cc:	20672d20 	rsbcs	r2, r7, r0, lsr #26
  d0:	20304f2d 	eorscs	r4, r0, sp, lsr #30
  d4:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
  d8:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
  dc:	69656800 	stmdbvs	r5!, {fp, sp, lr}^
  e0:	00746867 	rsbseq	r6, r4, r7, ror #16
  e4:	74646977 	strbtvc	r6, [r4], #-2423	; 0xfffff689
  e8:	3a430068 	bcc	10c0290 <startup-0x1ef3fd70>
  ec:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
  f0:	452f7372 	strmi	r7, [pc, #-882]!	; fffffd86 <ball+0xdfffe97a>
  f4:	736b6972 	cmnvc	fp, #1867776	; 0x1c8000
  f8:	2f6e6f73 	svccs	0x006e6f73
  fc:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 100:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 104:	68432f73 	stmdavs	r3, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp}^
 108:	656d6c61 	strbvs	r6, [sp, #-3169]!	; 0xfffff39f
 10c:	4d2f7372 	stcmi	3, cr7, [pc, #-456]!	; ffffff4c <ball+0xdfffeb40>
 110:	422f504f 	eormi	r5, pc, #79	; 0x4f
 114:	7364696f 	cmnvc	r4, #1818624	; 0x1bc000
 118:	6d69532d 	stclvs	3, cr5, [r9, #-180]!	; 0xffffff4c
 11c:	74616c75 	strbtvc	r6, [r1], #-3189	; 0xfffff38b
 120:	2f6e6f69 	svccs	0x006e6f69
 124:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 128:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
 12c:	616d0063 	cmnvs	sp, r3, rrx
 130:	63006e69 	movwvs	r6, #3689	; 0xe69
 134:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
 138:	77656e00 	strbvc	r6, [r5, -r0, lsl #28]!
 13c:	656e0078 	strbvs	r0, [lr, #-120]!	; 0xffffff88
 140:	75007977 	strvc	r7, [r0, #-2423]	; 0xfffff689
 144:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 148:	2064656e 	rsbcs	r6, r4, lr, ror #10
 14c:	00746e69 	rsbseq	r6, r4, r9, ror #28
 150:	6f654774 	svcvs	0x00654774
 154:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 158:	69750079 	ldmdbvs	r5!, {r0, r3, r4, r5, r6}^
 15c:	5f38746e 	svcpl	0x0038746e
 160:	74730074 	ldrbtvc	r0, [r3], #-116	; 0xffffff8c
 164:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 168:	69730070 	ldmdbvs	r3!, {r4, r5, r6}^
 16c:	0078657a 	rsbseq	r6, r8, sl, ror r5
 170:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 174:	61620079 	smcvs	8201	; 0x2009
 178:	64006c6c 	strvs	r6, [r0], #-3180	; 0xfffff394
 17c:	00776172 	rsbseq	r6, r7, r2, ror r1
 180:	616c6564 	cmnvs	ip, r4, ror #10
 184:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 188:	00696c6c 	rsbeq	r6, r9, ip, ror #24
 18c:	5f746573 	svcpl	0x00746573
 190:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 194:	735f7463 	cmpvc	pc, #1660944384	; 0x63000000
 198:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 19c:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
 1a0:	6f5f7261 	svcvs	0x005f7261
 1a4:	63656a62 	cmnvs	r5, #401408	; 0x62000
 1a8:	3a430074 	bcc	10c0380 <startup-0x1ef3fc80>
 1ac:	6573555c 	ldrbvs	r5, [r3, #-1372]!	; 0xfffffaa4
 1b0:	455c7372 	ldrbmi	r7, [ip, #-882]	; 0xfffffc8e
 1b4:	736b6972 	cmnvc	fp, #1867776	; 0x1c8000
 1b8:	5c6e6f73 	stclpl	15, cr6, [lr], #-460	; 0xfffffe34
 1bc:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 1c0:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 1c4:	68435c73 	stmdavs	r3, {r0, r1, r4, r5, r6, sl, fp, ip, lr}^
 1c8:	656d6c61 	strbvs	r6, [sp, #-3169]!	; 0xfffff39f
 1cc:	4d5c7372 	ldclmi	3, cr7, [ip, #-456]	; 0xfffffe38
 1d0:	425c504f 	subsmi	r5, ip, #79	; 0x4f
 1d4:	7364696f 	cmnvc	r4, #1818624	; 0x1bc000
 1d8:	6d69532d 	stclvs	3, cr5, [r9, #-180]!	; 0xffffff4c
 1dc:	74616c75 	strbtvc	r6, [r1], #-3189	; 0xfffff38b
 1e0:	006e6f69 	rsbeq	r6, lr, r9, ror #30
 1e4:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 1e8:	6a626f5f 	bvs	189bf6c <startup-0x1e764094>
 1ec:	00746365 	rsbseq	r6, r4, r5, ror #6
 1f0:	706d756e 	rsbvc	r7, sp, lr, ror #10
 1f4:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 1f8:	6f6d0073 	svcvs	0x006d0073
 1fc:	6f5f6576 	svcvs	0x005f6576
 200:	63656a62 	cmnvs	r5, #401408	; 0x62000
 204:	70730074 	rsbsvc	r0, r3, r4, ror r0
 208:	78646565 	stmdavc	r4!, {r0, r2, r5, r6, r8, sl, sp, lr}^
 20c:	65707300 	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
 210:	00796465 	rsbseq	r6, r9, r5, ror #8
 214:	4a424f50 	bmi	1093f5c <startup-0x1ef6c0a4>
 218:	00544345 	subseq	r4, r4, r5, asr #6
 21c:	65676170 	strbvs	r6, [r7, #-368]!	; 0xfffffe90
 220:	67657300 	strbvs	r7, [r5, -r0, lsl #6]!
 224:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 228:	61760073 	cmnvs	r6, r3, ror r0
 22c:	0065756c 	rsbeq	r7, r5, ip, ror #10
 230:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
 234:	635f7463 	cmpvs	pc, #1660944384	; 0x63000000
 238:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 23c:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 240:	6e690072 	mcrvs	0, 3, r0, cr9, cr2, {3}
 244:	6f007469 	svcvs	0x00007469
 248:	61567475 	cmpvs	r6, r5, ror r4
 24c:	7267006c 	rsbvc	r0, r7, #108	; 0x6c
 250:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 254:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
 258:	645f6461 	ldrbvs	r6, [pc], #-1121	; 260 <startup-0x1ffffda0>
 25c:	00617461 	rsbeq	r7, r1, r1, ror #8
 260:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0xfffff690
 264:	6564006c 	strbvs	r0, [r4, #-108]!	; 0xffffff94
 268:	5f79616c 	svcpl	0x0079616c
 26c:	6e303035 	mrcvs	0, 1, r3, cr0, cr5, {1}
 270:	61620073 	smcvs	8195	; 0x2003
 274:	67006573 	smlsdxvs	r0, r3, r5, r6
 278:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 27c:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 280:	5f746961 	svcpl	0x00746961
 284:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 288:	75620079 	strbvc	r0, [r2, #-121]!	; 0xffffff87
 28c:	67007973 	smlsdxvs	r0, r3, r9, r7
 290:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 294:	695f6369 	ldmdbvs	pc, {r0, r3, r5, r6, r8, r9, sp, lr}^	; <UNPREDICTABLE>
 298:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
 29c:	7a696c61 	bvc	1a5b428 <startup-0x1e5a4bd8>
 2a0:	72670065 	rsbvc	r0, r7, #101	; 0x65
 2a4:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 2a8:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 2ac:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 2b0:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
 2b4:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 2b8:	61726700 	cmnvs	r2, r0, lsl #14
 2bc:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 2c0:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 2c4:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 2c8:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
 2cc:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
 2d0:	5f79616c 	svcpl	0x0079616c
 2d4:	726b696d 	rsbvc	r6, fp, #1785856	; 0x1b4000
 2d8:	6564006f 	strbvs	r0, [r4, #-111]!	; 0xffffff91
 2dc:	5f79616c 	svcpl	0x0079616c
 2e0:	6e303532 	mrcvs	5, 1, r3, cr0, cr2, {1}
 2e4:	6e690073 	mcrvs	0, 3, r0, cr9, cr3, {3}
 2e8:	006c6156 	rsbeq	r6, ip, r6, asr r1
 2ec:	6b73616d 	blvs	1cd88a8 <startup-0x1e327758>
 2f0:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
 2f4:	6f007865 	svcvs	0x00007865
 2f8:	73377475 	teqvc	r7, #1962934272	; 0x75000000
 2fc:	67006765 	strvs	r6, [r0, -r5, ror #14]
 300:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 304:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 308:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 30c:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 310:	3a430061 	bcc	10c049c <startup-0x1ef3fb64>
 314:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 318:	452f7372 	strmi	r7, [pc, #-882]!	; ffffffae <ball+0xdfffeba2>
 31c:	736b6972 	cmnvc	fp, #1867776	; 0x1c8000
 320:	2f6e6f73 	svccs	0x006e6f73
 324:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 328:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 32c:	68432f73 	stmdavs	r3, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp}^
 330:	656d6c61 	strbvs	r6, [sp, #-3169]!	; 0xfffff39f
 334:	4d2f7372 	stcmi	3, cr7, [pc, #-456]!	; 174 <startup-0x1ffffe8c>
 338:	422f504f 	eormi	r5, pc, #79	; 0x4f
 33c:	7364696f 	cmnvc	r4, #1818624	; 0x1bc000
 340:	6d69532d 	stclvs	3, cr5, [r9, #-180]!	; 0xffffff4c
 344:	74616c75 	strbtvc	r6, [r1], #-3189	; 0xfffff38b
 348:	2f6e6f69 	svccs	0x006e6f69
 34c:	76697264 	strbtvc	r7, [r9], -r4, ror #4
 350:	2e737265 	cdpcs	2, 7, cr7, cr3, cr5, {3}
 354:	656b0063 	strbvs	r0, [fp, #-99]!	; 0xffffff9d
 358:	67006279 	smlsdxvs	r0, r9, r2, r6
 35c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 360:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 364:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 368:	61726700 	cmnvs	r2, r0, lsl #14
 36c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 370:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 374:	735f7261 	cmpvc	pc, #268435462	; 0x10000006
 378:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
 37c:	7264006e 	rsbvc	r0, r4, #110	; 0x6e
 380:	625f7761 	subsvs	r7, pc, #25427968	; 0x1840000
 384:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
 388:	72670072 	rsbvc	r0, r7, #114	; 0x72
 38c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 390:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
 394:	6b006461 	blvs	19520 <startup-0x1ffe6ae0>
 398:	00737965 	rsbseq	r7, r3, r5, ror #18
 39c:	61656c63 	cmnvs	r5, r3, ror #24
 3a0:	75625f72 	strbvc	r5, [r2, #-3954]!	; 0xfffff08e
 3a4:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 3a8:	61726700 	cmnvs	r2, r0, lsl #14
 3ac:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 3b0:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 3b4:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 3b8:	616d6d6f 	cmnvs	sp, pc, ror #26
 3bc:	Address 0x000003bc is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000020 	andeq	r0, r0, r0, lsr #32
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	180e4101 	stmdane	lr, {r0, r8, lr}
  3c:	00070d41 	andeq	r0, r7, r1, asr #26
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	00000000 	andeq	r0, r0, r0
  48:	20000030 	andcs	r0, r0, r0, lsr r0
  4c:	0000001a 	andeq	r0, r0, sl, lsl r0
  50:	40080e41 	andmi	r0, r8, r1, asr #28
  54:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  58:	100e4101 	andne	r4, lr, r1, lsl #2
  5c:	00070d41 	andeq	r0, r7, r1, asr #26
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	00000000 	andeq	r0, r0, r0
  68:	2000004a 	andcs	r0, r0, sl, asr #32
  6c:	0000001a 	andeq	r0, r0, sl, lsl r0
  70:	40080e41 	andmi	r0, r8, r1, asr #28
  74:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  78:	100e4101 	andne	r4, lr, r1, lsl #2
  7c:	00070d41 	andeq	r0, r7, r1, asr #26
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	00000000 	andeq	r0, r0, r0
  88:	20000064 	andcs	r0, r0, r4, rrx
  8c:	000000ba 	strheq	r0, [r0], -sl
  90:	40080e41 	andmi	r0, r8, r1, asr #28
  94:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  98:	300e4101 	andcc	r4, lr, r1, lsl #2
  9c:	00070d41 	andeq	r0, r7, r1, asr #26
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	00000000 	andeq	r0, r0, r0
  a8:	2000011e 	andcs	r0, r0, lr, lsl r1
  ac:	0000009c 	muleq	r0, ip, r0
  b0:	40080e41 	andmi	r0, r8, r1, asr #28
  b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b8:	200e4101 	andcs	r4, lr, r1, lsl #2
  bc:	00070d41 	andeq	r0, r7, r1, asr #26
  c0:	00000020 	andeq	r0, r0, r0, lsr #32
  c4:	00000000 	andeq	r0, r0, r0
  c8:	200001ba 			; <UNDEFINED> instruction: 0x200001ba
  cc:	0000011e 	andeq	r0, r0, lr, lsl r1
  d0:	400c0e41 	andmi	r0, ip, r1, asr #28
  d4:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  d8:	018e4002 	orreq	r4, lr, r2
  dc:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
  e0:	0000070d 	andeq	r0, r0, sp, lsl #14
  e4:	0000000c 	andeq	r0, r0, ip
  e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  ec:	7c020001 	stcvc	0, cr0, [r2], {1}
  f0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  f4:	00000018 	andeq	r0, r0, r8, lsl r0
  f8:	000000e4 	andeq	r0, r0, r4, ror #1
  fc:	200002d8 	ldrdcs	r0, [r0], -r8
 100:	00000044 	andeq	r0, r0, r4, asr #32
 104:	40080e41 	andmi	r0, r8, r1, asr #28
 108:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 10c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 110:	00000018 	andeq	r0, r0, r8, lsl r0
 114:	000000e4 	andeq	r0, r0, r4, ror #1
 118:	2000031c 	andcs	r0, r0, ip, lsl r3
 11c:	00000012 	andeq	r0, r0, r2, lsl r0
 120:	40080e41 	andmi	r0, r8, r1, asr #28
 124:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 128:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 12c:	0000001c 	andeq	r0, r0, ip, lsl r0
 130:	000000e4 	andeq	r0, r0, r4, ror #1
 134:	2000032e 	andcs	r0, r0, lr, lsr #6
 138:	0000003e 	andeq	r0, r0, lr, lsr r0
 13c:	40080e41 	andmi	r0, r8, r1, asr #28
 140:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 144:	100e4101 	andne	r4, lr, r1, lsl #2
 148:	00070d41 	andeq	r0, r7, r1, asr #26
 14c:	0000001c 	andeq	r0, r0, ip, lsl r0
 150:	000000e4 	andeq	r0, r0, r4, ror #1
 154:	2000036c 	andcs	r0, r0, ip, ror #6
 158:	0000002e 	andeq	r0, r0, lr, lsr #32
 15c:	40080e41 	andmi	r0, r8, r1, asr #28
 160:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 164:	100e4101 	andne	r4, lr, r1, lsl #2
 168:	00070d41 	andeq	r0, r7, r1, asr #26
 16c:	0000001c 	andeq	r0, r0, ip, lsl r0
 170:	000000e4 	andeq	r0, r0, r4, ror #1
 174:	2000039a 	mulcs	r0, sl, r3
 178:	00000052 	andeq	r0, r0, r2, asr r0
 17c:	40080e41 	andmi	r0, r8, r1, asr #28
 180:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 184:	180e4101 	stmdane	lr, {r0, r8, lr}
 188:	00070d41 	andeq	r0, r7, r1, asr #26
 18c:	0000001c 	andeq	r0, r0, ip, lsl r0
 190:	000000e4 	andeq	r0, r0, r4, ror #1
 194:	200003ec 	andcs	r0, r0, ip, ror #7
 198:	00000050 	andeq	r0, r0, r0, asr r0
 19c:	40080e41 	andmi	r0, r8, r1, asr #28
 1a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1a4:	180e4101 	stmdane	lr, {r0, r8, lr}
 1a8:	00070d41 	andeq	r0, r7, r1, asr #26
 1ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b0:	000000e4 	andeq	r0, r0, r4, ror #1
 1b4:	2000043c 	andcs	r0, r0, ip, lsr r4
 1b8:	00000068 	andeq	r0, r0, r8, rrx
 1bc:	40080e41 	andmi	r0, r8, r1, asr #28
 1c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1c4:	180e4101 	stmdane	lr, {r0, r8, lr}
 1c8:	00070d41 	andeq	r0, r7, r1, asr #26
 1cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d0:	000000e4 	andeq	r0, r0, r4, ror #1
 1d4:	200004a4 	andcs	r0, r0, r4, lsr #9
 1d8:	00000070 	andeq	r0, r0, r0, ror r0
 1dc:	40080e41 	andmi	r0, r8, r1, asr #28
 1e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1e4:	100e4101 	andne	r4, lr, r1, lsl #2
 1e8:	00070d41 	andeq	r0, r7, r1, asr #26
 1ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f0:	000000e4 	andeq	r0, r0, r4, ror #1
 1f4:	20000514 	andcs	r0, r0, r4, lsl r5
 1f8:	00000090 	muleq	r0, r0, r0
 1fc:	40080e41 	andmi	r0, r8, r1, asr #28
 200:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 204:	180e4101 	stmdane	lr, {r0, r8, lr}
 208:	00070d41 	andeq	r0, r7, r1, asr #26
 20c:	0000001c 	andeq	r0, r0, ip, lsl r0
 210:	000000e4 	andeq	r0, r0, r4, ror #1
 214:	200005a4 	andcs	r0, r0, r4, lsr #11
 218:	00000074 	andeq	r0, r0, r4, ror r0
 21c:	40080e41 	andmi	r0, r8, r1, asr #28
 220:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 224:	100e4101 	andne	r4, lr, r1, lsl #2
 228:	00070d41 	andeq	r0, r7, r1, asr #26
 22c:	0000001c 	andeq	r0, r0, ip, lsl r0
 230:	000000e4 	andeq	r0, r0, r4, ror #1
 234:	20000618 	andcs	r0, r0, r8, lsl r6
 238:	00000046 	andeq	r0, r0, r6, asr #32
 23c:	40080e41 	andmi	r0, r8, r1, asr #28
 240:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 244:	100e4101 	andne	r4, lr, r1, lsl #2
 248:	00070d41 	andeq	r0, r7, r1, asr #26
 24c:	0000001c 	andeq	r0, r0, ip, lsl r0
 250:	000000e4 	andeq	r0, r0, r4, ror #1
 254:	2000065e 	andcs	r0, r0, lr, asr r6
 258:	00000046 	andeq	r0, r0, r6, asr #32
 25c:	40080e41 	andmi	r0, r8, r1, asr #28
 260:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 264:	100e4101 	andne	r4, lr, r1, lsl #2
 268:	00070d41 	andeq	r0, r7, r1, asr #26
 26c:	0000001c 	andeq	r0, r0, ip, lsl r0
 270:	000000e4 	andeq	r0, r0, r4, ror #1
 274:	200006a4 	andcs	r0, r0, r4, lsr #13
 278:	0000002a 	andeq	r0, r0, sl, lsr #32
 27c:	40080e41 	andmi	r0, r8, r1, asr #28
 280:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 284:	100e4101 	andne	r4, lr, r1, lsl #2
 288:	00070d41 	andeq	r0, r7, r1, asr #26
 28c:	00000018 	andeq	r0, r0, r8, lsl r0
 290:	000000e4 	andeq	r0, r0, r4, ror #1
 294:	200006ce 	andcs	r0, r0, lr, asr #13
 298:	00000056 	andeq	r0, r0, r6, asr r0
 29c:	40080e41 	andmi	r0, r8, r1, asr #28
 2a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2a4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2ac:	000000e4 	andeq	r0, r0, r4, ror #1
 2b0:	20000724 	andcs	r0, r0, r4, lsr #14
 2b4:	00000068 	andeq	r0, r0, r8, rrx
 2b8:	40080e41 	andmi	r0, r8, r1, asr #28
 2bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2c0:	100e4101 	andne	r4, lr, r1, lsl #2
 2c4:	00070d41 	andeq	r0, r7, r1, asr #26
 2c8:	00000024 	andeq	r0, r0, r4, lsr #32
 2cc:	000000e4 	andeq	r0, r0, r4, ror #1
 2d0:	2000078c 	andcs	r0, r0, ip, lsl #15
 2d4:	000000c4 	andeq	r0, r0, r4, asr #1
 2d8:	40100e41 	andsmi	r0, r0, r1, asr #28
 2dc:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 2e0:	02874003 	addeq	r4, r7, #3
 2e4:	41018e40 	tstmi	r1, r0, asr #28
 2e8:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 2ec:	00000007 	andeq	r0, r0, r7
 2f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2f4:	000000e4 	andeq	r0, r0, r4, ror #1
 2f8:	20000850 	andcs	r0, r0, r0, asr r8
 2fc:	0000005c 	andeq	r0, r0, ip, asr r0
 300:	40080e41 	andmi	r0, r8, r1, asr #28
 304:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 308:	100e4101 	andne	r4, lr, r1, lsl #2
 30c:	00070d41 	andeq	r0, r7, r1, asr #26
 310:	0000001c 	andeq	r0, r0, ip, lsl r0
 314:	000000e4 	andeq	r0, r0, r4, ror #1
 318:	200008ac 	andcs	r0, r0, ip, lsr #17
 31c:	00000124 	andeq	r0, r0, r4, lsr #2
 320:	40080e41 	andmi	r0, r8, r1, asr #28
 324:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 328:	100e4101 	andne	r4, lr, r1, lsl #2
 32c:	00070d41 	andeq	r0, r7, r1, asr #26
 330:	00000018 	andeq	r0, r0, r8, lsl r0
 334:	000000e4 	andeq	r0, r0, r4, ror #1
 338:	200009d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 33c:	000000a4 	andeq	r0, r0, r4, lsr #1
 340:	40080e41 	andmi	r0, r8, r1, asr #28
 344:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 348:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 34c:	00000020 	andeq	r0, r0, r0, lsr #32
 350:	000000e4 	andeq	r0, r0, r4, ror #1
 354:	20000a74 	andcs	r0, r0, r4, ror sl
 358:	00000114 	andeq	r0, r0, r4, lsl r1
 35c:	400c0e41 	andmi	r0, ip, r1, asr #28
 360:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 364:	018e4002 	orreq	r4, lr, r2
 368:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
 36c:	0000070d 	andeq	r0, r0, sp, lsl #14
 370:	00000024 	andeq	r0, r0, r4, lsr #32
 374:	000000e4 	andeq	r0, r0, r4, ror #1
 378:	20000b88 	andcs	r0, r0, r8, lsl #23
 37c:	00000050 	andeq	r0, r0, r0, asr r0
 380:	40140e41 	andsmi	r0, r4, r1, asr #28
 384:	85400584 	strbhi	r0, [r0, #-1412]	; 0xfffffa7c
 388:	03864004 	orreq	r4, r6, #4
 38c:	40028740 	andmi	r8, r2, r0, asr #14
 390:	0e41018e 	dvfeqd	f0, f1, #0.5
 394:	070d4138 	smladxeq	sp, r8, r1, r4
